{
  "address": "0xDb470b5f2191B67E997138423331D6C3eB985Bb9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBookManager",
          "name": "bookManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintToInt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bookManager",
      "outputs": [
        {
          "internalType": "contract IBookManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "limitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.TakeOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "getExpectedInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "takenQuoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spendBaseAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "limitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.SpendOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "getExpectedOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "takenQuoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spendBaseAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        },
        {
          "internalType": "Tick",
          "name": "tick",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "depth",
              "type": "uint64"
            }
          ],
          "internalType": "struct IBookViewer.Liquidity[]",
          "name": "liquidity",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f9b663d75b903c994ddb462886d7decf4877f9b9c5c6a60f1bea4b2c71d58d7",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0xDb470b5f2191B67E997138423331D6C3eB985Bb9",
    "transactionIndex": 1,
    "gasUsed": "1888258",
    "logsBloom": "0x
    "blockHash": "0x19d632957f447809fb11d57529ab381d8db554569717a562bb61b7d8e1e0c4ea",
    "transactionHash": "0x0f9b663d75b903c994ddb462886d7decf4877f9b9c5c6a60f1bea4b2c71d58d7",
    "logs": [],
    "blockNumber": 24329868,
    "cumulativeGasUsed": "1888258",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6563188ADfBa863B42B50d010ed0fCD09fBDcD59"
  ],
  "numDeployments": 1,
  "solcInputHash": "1899820ed803b64636b3a251ead847ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"bookManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bookManager\",\"outputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.TakeOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"getExpectedInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takenQuoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spendBaseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.SpendOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"getExpectedOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takenQuoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spendBaseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"}],\"internalType\":\"struct IBookViewer.Liquidity[]\",\"name\":\"liquidity\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{\"getExpectedInput((uint192,uint256,uint256,bytes))\":{\"params\":{\"params\":\"The parameters of the take order\"},\"returns\":{\"spendBaseAmount\":\"The expected spend base amount\",\"takenQuoteAmount\":\"The expected taken quote amount\"}},\"getExpectedOutput((uint192,uint256,uint256,bytes))\":{\"params\":{\"params\":\"The parameters of the spend order\"},\"returns\":{\"spendBaseAmount\":\"The expected spend base amount\",\"takenQuoteAmount\":\"The expected taken quote amount\"}}},\"stateVariables\":{\"bookManager\":{\"return\":\"The instance of the book manager\",\"returns\":{\"_0\":\"The instance of the book manager\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bookManager()\":{\"notice\":\"Returns the book manager\"},\"getExpectedInput((uint192,uint256,uint256,bytes))\":{\"notice\":\"Returns the expected input for a take order\"},\"getExpectedOutput((uint192,uint256,uint256,bytes))\":{\"notice\":\"Returns the expected output for a spend order\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BookViewer.sol\":\"BookViewer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"contracts/BookViewer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport {IBookManager} from \\\"./interfaces/IBookManager.sol\\\";\\nimport {IBookViewer} from \\\"./interfaces/IBookViewer.sol\\\";\\nimport {IController} from \\\"./interfaces/IController.sol\\\";\\nimport {SignificantBit} from \\\"./libraries/SignificantBit.sol\\\";\\nimport {Math} from \\\"./libraries/Math.sol\\\";\\nimport {Lockers} from \\\"./libraries/Lockers.sol\\\";\\nimport {BookId} from \\\"./libraries/BookId.sol\\\";\\nimport {Tick, TickLibrary} from \\\"./libraries/Tick.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"./libraries/FeePolicy.sol\\\";\\n\\ncontract BookViewer is IBookViewer {\\n    using SafeCast for *;\\n    using TickLibrary for *;\\n    using Math for uint256;\\n    using SignificantBit for uint256;\\n    using FeePolicyLibrary for FeePolicy;\\n\\n    IBookManager public immutable bookManager;\\n\\n    constructor(IBookManager bookManager_) {\\n        bookManager = bookManager_;\\n    }\\n\\n    function getLiquidity(BookId id, Tick tick, uint256 n) external view returns (Liquidity[] memory liquidity) {\\n        liquidity = new Liquidity[](n);\\n        if (bookManager.getDepth(id, tick) == 0) tick = bookManager.minGreaterThan(id, tick);\\n        for (uint256 i = 0; i < n; ++i) {\\n            if (Tick.unwrap(tick) == type(int24).min) break;\\n            liquidity[i] = Liquidity({tick: tick, depth: bookManager.getDepth(id, tick)});\\n            tick = bookManager.minGreaterThan(id, tick);\\n        }\\n    }\\n\\n    function getExpectedInput(IController.TakeOrderParams memory params)\\n        external\\n        view\\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\\n    {\\n        IBookManager.BookKey memory key = bookManager.getBookKey(params.id);\\n\\n        if (bookManager.isEmpty(params.id)) return (0, 0);\\n\\n        Tick tick = bookManager.getLowest(params.id);\\n\\n        while (Tick.unwrap(tick) > type(int24).min) {\\n            unchecked {\\n                if (params.limitPrice < tick.toPrice()) break;\\n                uint256 maxAmount;\\n                if (key.takerPolicy.usesQuote()) {\\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.quoteAmount - takenQuoteAmount, true);\\n                } else {\\n                    maxAmount = params.quoteAmount - takenQuoteAmount;\\n                }\\n                maxAmount = maxAmount.divide(key.unit, true);\\n\\n                if (maxAmount == 0) break;\\n                uint256 currentDepth = bookManager.getDepth(params.id, tick);\\n                uint256 quoteAmount = (currentDepth > maxAmount ? maxAmount : currentDepth) * key.unit;\\n                uint256 baseAmount = tick.quoteToBase(quoteAmount, true);\\n                if (key.takerPolicy.usesQuote()) {\\n                    quoteAmount = uint256(int256(quoteAmount) - key.takerPolicy.calculateFee(quoteAmount, false));\\n                } else {\\n                    baseAmount = uint256(baseAmount.toInt256() + key.takerPolicy.calculateFee(baseAmount, false));\\n                }\\n                if (quoteAmount == 0) break;\\n\\n                takenQuoteAmount += quoteAmount;\\n                spendBaseAmount += baseAmount;\\n                if (params.quoteAmount <= takenQuoteAmount) break;\\n                tick = bookManager.minGreaterThan(params.id, tick);\\n            }\\n        }\\n    }\\n\\n    function getExpectedOutput(IController.SpendOrderParams memory params)\\n        external\\n        view\\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\\n    {\\n        IBookManager.BookKey memory key = bookManager.getBookKey(params.id);\\n\\n        if (bookManager.isEmpty(params.id)) return (0, 0);\\n\\n        Tick tick = bookManager.getLowest(params.id);\\n\\n        unchecked {\\n            while (spendBaseAmount <= params.baseAmount && Tick.unwrap(tick) > type(int24).min) {\\n                if (params.limitPrice < tick.toPrice()) break;\\n                uint256 maxAmount;\\n                if (key.takerPolicy.usesQuote()) {\\n                    maxAmount = params.baseAmount - spendBaseAmount;\\n                } else {\\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.baseAmount - spendBaseAmount, false);\\n                }\\n                maxAmount = tick.baseToQuote(maxAmount, false) / key.unit;\\n\\n                if (maxAmount == 0) break;\\n                uint256 currentDepth = bookManager.getDepth(params.id, tick);\\n                uint256 quoteAmount = (currentDepth > maxAmount ? maxAmount : currentDepth) * key.unit;\\n                uint256 baseAmount = tick.quoteToBase(quoteAmount, true);\\n                if (key.takerPolicy.usesQuote()) {\\n                    quoteAmount = uint256(int256(quoteAmount) - key.takerPolicy.calculateFee(quoteAmount, false));\\n                } else {\\n                    baseAmount = uint256(baseAmount.toInt256() + key.takerPolicy.calculateFee(baseAmount, false));\\n                }\\n                if (baseAmount == 0) break;\\n\\n                takenQuoteAmount += quoteAmount;\\n                spendBaseAmount += baseAmount;\\n                tick = bookManager.minGreaterThan(params.id, tick);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47842401e5373450bc9882bb043dafc8c1c0e4067f6231032493ce3504af0741\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Currency} from \\\"../libraries/Currency.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {FeePolicy} from \\\"../libraries/FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnit();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unit The unit of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unit,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param amount The order amount\\n     */\\n    event Make(BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param amount The order amount\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param canceledAmount The canceled amount\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param rawAmount The claimed amount\\n     */\\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param oldDefaultProvider The old default provider address\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed oldDefaultProvider, address indexed newDefaultProvider);\\n\\n    struct BookKey {\\n        Currency base;\\n        uint64 unit;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable amount\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the lowest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The lowest tick\\n     */\\n    function getLowest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the minimum tick greater than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the highest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next higher tick\\n     */\\n    function minGreaterThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\\n        /// @notice The limit order service provider address to collect fees\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxAmount;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 to;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param provider The provider address\\n     * @param currency The currency\\n     */\\n    function collect(address provider, Currency currency) external;\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0x224a951363ac9248260ff1e4be5cb6e044e71cbe5a00cb31b33b24093cbd3c28\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBookViewer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {IController} from \\\"./IController.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\n\\n/**\\n * @title IBookViewer\\n * @notice Interface for the book viewer contract\\n */\\ninterface IBookViewer {\\n    /**\\n     * @notice Returns the book manager\\n     * @return The instance of the book manager\\n     */\\n    function bookManager() external view returns (IBookManager);\\n\\n    struct Liquidity {\\n        Tick tick;\\n        uint64 depth;\\n    }\\n\\n    /**\\n     * @notice Returns the liquidity for a specific book\\n     * @param id The id of the book\\n     * @param from The starting tick\\n     * @param n The number of ticks to return\\n     * @return liquidity An array of liquidity data\\n     */\\n    function getLiquidity(BookId id, Tick from, uint256 n) external view returns (Liquidity[] memory liquidity);\\n\\n    /**\\n     * @notice Returns the expected input for a take order\\n     * @param params The parameters of the take order\\n     * @return takenQuoteAmount The expected taken quote amount\\n     * @return spendBaseAmount The expected spend base amount\\n     */\\n    function getExpectedInput(IController.TakeOrderParams memory params)\\n        external\\n        view\\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount);\\n\\n    /**\\n     * @notice Returns the expected output for a spend order\\n     * @param params The parameters of the spend order\\n     * @return takenQuoteAmount The expected taken quote amount\\n     * @return spendBaseAmount The expected spend base amount\\n     */\\n    function getExpectedOutput(IController.SpendOrderParams memory params)\\n        external\\n        view\\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount);\\n}\\n\",\"keccak256\":\"0x07a76d98cead898e80bd8165e72b61bc932cb4237db147adc33e130b9e6b2487\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\n\\ninterface IController {\\n    error InvalidAccess();\\n    error InvalidLength();\\n    error Deadline();\\n    error InvalidMarket();\\n    error ControllerSlippage();\\n    error ValueTransferFailed();\\n    error InvalidAction();\\n\\n    enum Action {\\n        OPEN,\\n        MAKE,\\n        LIMIT,\\n        TAKE,\\n        SPEND,\\n        CLAIM,\\n        CANCEL\\n    }\\n\\n    struct ERC20PermitParams {\\n        address token;\\n        uint256 permitAmount;\\n        PermitSignature signature;\\n    }\\n\\n    struct ERC721PermitParams {\\n        uint256 tokenId;\\n        PermitSignature signature;\\n    }\\n\\n    struct PermitSignature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct OpenBookParams {\\n        IBookManager.BookKey key;\\n        bytes hookData;\\n    }\\n\\n    struct MakeOrderParams {\\n        BookId id;\\n        Tick tick;\\n        uint256 quoteAmount;\\n        bytes hookData;\\n    }\\n\\n    struct LimitOrderParams {\\n        BookId takeBookId;\\n        BookId makeBookId;\\n        uint256 limitPrice;\\n        Tick tick;\\n        uint256 quoteAmount;\\n        bytes takeHookData;\\n        bytes makeHookData;\\n    }\\n\\n    struct TakeOrderParams {\\n        BookId id;\\n        uint256 limitPrice;\\n        uint256 quoteAmount;\\n        bytes hookData;\\n    }\\n\\n    struct SpendOrderParams {\\n        BookId id;\\n        uint256 limitPrice;\\n        uint256 baseAmount;\\n        bytes hookData;\\n    }\\n\\n    struct ClaimOrderParams {\\n        OrderId id;\\n        bytes hookData;\\n    }\\n\\n    struct CancelOrderParams {\\n        OrderId id;\\n        uint256 leftQuoteAmount;\\n        bytes hookData;\\n    }\\n\\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external;\\n\\n    function getDepth(BookId id, Tick tick) external view returns (uint256);\\n\\n    function getLowestPrice(BookId id) external view returns (uint256);\\n\\n    function getOrder(OrderId orderId)\\n        external\\n        view\\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount);\\n\\n    function fromPrice(uint256 price) external pure returns (Tick);\\n\\n    function toPrice(Tick tick) external pure returns (uint256);\\n\\n    function execute(\\n        Action[] calldata actionList,\\n        bytes[] calldata paramsDataList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata erc20PermitParamsList,\\n        ERC721PermitParams[] calldata erc721PermitParamsList,\\n        uint64 deadline\\n    ) external payable returns (OrderId[] memory ids);\\n\\n    function make(\\n        MakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable returns (OrderId[] memory ids);\\n\\n    function take(\\n        TakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable;\\n\\n    function spend(\\n        SpendOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable;\\n\\n    function claim(\\n        ClaimOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external;\\n\\n    function cancel(\\n        CancelOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb239642244a942d5c879d1c71c84d39b4e290218b5bc6162e1e8646541f3e396\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4d9d80441c88885319565bc701c35d50c73bfa100a49a5fc8e5102fb416aabf\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenAmount The amount that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledAmount The amount that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedAmount The amount that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0x9627052cb6279f42bbcbe17f960d7d0dc659a83bcb1670b280408a06e7814ae4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := hash\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428d95d5b141c6905c6726bdbd1a0c67c169a98a259f3befc7841e68cec4721d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\\n    }\\n}\\n\",\"keccak256\":\"0x629225d2ac7749b330ba4f4fd529ace80a7f9a2acfa3fb911d18e51e790924db\",\"license\":\"MIT\"},\"contracts/libraries/Lockers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.23;\\n\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\n\\n/// @author Clober\\n/// @author Modified from Uniswap V4 (https://github.com/Uniswap/v4-core/tree/98680ebc1a654120e995d53a5b10ec6fe153066f)\\n/// @notice Contains data about pool lockers.\\n\\n/// @dev This library manages a custom storage implementation for a queue\\n///      that tracks current lockers. The \\\"sentinel\\\" storage slot for this data structure,\\n///      always passed in as IPoolManager.LockData storage self, stores not just the current\\n///      length of the queue but also the global count of non-zero deltas across all lockers.\\n///      The values of the data structure start at OFFSET, and each value is a locker address.\\nlibrary Lockers {\\n    /// struct LockData {\\n    ///     /// @notice The current number of active lockers\\n    ///     /// @dev This value starts with 1 to make dirty slot\\n    ///     uint128 nextLength;\\n    ///     /// @notice The total number of nonzero deltas over all active + completed lockers\\n    ///     uint128 nonzeroDeltaCount;\\n    /// }\\n    uint256 internal constant LOCK_DATA_SLOT = uint256(keccak256(\\\"LockData\\\"));\\n\\n    uint256 internal constant LOCKERS_SLOT = uint256(keccak256(\\\"Lockers\\\"));\\n\\n    // The number of slots per item in the lockers array\\n    uint256 internal constant LOCKER_STRUCT_SIZE = 2;\\n\\n    uint256 internal constant HOOK_ADDRESS_SLOT = uint256(keccak256(\\\"HookAddress\\\"));\\n\\n    uint256 internal constant NONZERO_DELTA_COUNT_OFFSET = 2 ** 128;\\n\\n    uint256 internal constant EMPTY_ADDRESS_STORAGE = 1 << 255;\\n\\n    function initialize() internal {\\n        clear();\\n        uint256 lockersSlot = LOCKERS_SLOT;\\n        // @dev To reduce lock sstore gas, we set 5 lockers storages dirty\\n        assembly {\\n            for { let i := 0 } lt(i, 5) { i := add(i, 1) } {\\n                sstore(lockersSlot, EMPTY_ADDRESS_STORAGE)\\n                sstore(add(lockersSlot, 1), EMPTY_ADDRESS_STORAGE)\\n                lockersSlot := add(lockersSlot, LOCKER_STRUCT_SIZE)\\n            }\\n        }\\n    }\\n\\n    /// @dev Pushes a locker onto the end of the queue, and updates the sentinel storage slot.\\n    function push(address locker, address lockCaller) internal {\\n        // read current value from the sentinel storage slot\\n        uint128 l = length();\\n        unchecked {\\n            // not in assembly because OFFSET is in the library scope\\n            uint256 indexToWrite = LOCKERS_SLOT + (l * LOCKER_STRUCT_SIZE);\\n            uint256 lockDataSlot = LOCK_DATA_SLOT;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // in the next storage slot, write the locker and lockCaller\\n                sstore(indexToWrite, locker)\\n                sstore(add(indexToWrite, 1), lockCaller)\\n\\n                // increase the length\\n                sstore(lockDataSlot, add(sload(lockDataSlot), 1))\\n            }\\n        }\\n    }\\n\\n    function lockData() internal view returns (uint128 l, uint128 nonzeroDeltaCount) {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            let data := sload(slot)\\n            l := sub(data, 1)\\n            nonzeroDeltaCount := shr(128, data)\\n        }\\n    }\\n\\n    function length() internal view returns (uint128 l) {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            l := sub(sload(slot), 1)\\n        }\\n    }\\n\\n    /// @dev Pops a locker off the end of the queue. Note that no storage gets cleared.\\n    function pop() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, sub(sload(slot), 1))\\n        }\\n    }\\n\\n    function clear() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, 1)\\n        }\\n    }\\n\\n    function getLocker(uint256 i) internal view returns (address locker) {\\n        unchecked {\\n            // not in assembly because OFFSET is in the library scope\\n            uint256 position = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                locker := sload(position)\\n            }\\n        }\\n    }\\n\\n    function getLockCaller(uint256 i) internal view returns (address locker) {\\n        unchecked {\\n            // not in assembly because OFFSET is in the library scope\\n            uint256 position = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE + 1);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                locker := sload(position)\\n            }\\n        }\\n    }\\n\\n    function getCurrentLocker() internal view returns (address) {\\n        uint128 l = length();\\n        unchecked {\\n            return l > 0 ? getLocker(l - 1) : address(0);\\n        }\\n    }\\n\\n    function getCurrentLockCaller() internal view returns (address) {\\n        uint128 l = length();\\n        unchecked {\\n            return l > 0 ? getLockCaller(l - 1) : address(0);\\n        }\\n    }\\n\\n    function incrementNonzeroDeltaCount() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, add(sload(slot), NONZERO_DELTA_COUNT_OFFSET))\\n        }\\n    }\\n\\n    function decrementNonzeroDeltaCount() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, sub(sload(slot), NONZERO_DELTA_COUNT_OFFSET))\\n        }\\n    }\\n\\n    function getCurrentHook() internal view returns (IHooks currentHook) {\\n        return IHooks(getHook(length()));\\n    }\\n\\n    function getHook(uint256 i) internal view returns (address hook) {\\n        unchecked {\\n            uint256 position = HOOK_ADDRESS_SLOT + i;\\n            assembly {\\n                hook := sload(position)\\n            }\\n        }\\n    }\\n\\n    function setCurrentHook(IHooks currentHook) internal returns (bool set) {\\n        // Set the hook address for the current locker if the address is 0.\\n        // If the address is nonzero, a hook has already been set for this lock, and is not allowed to be updated or cleared at the end of the call.\\n        if (address(getCurrentHook()) == address(0)) {\\n            unchecked {\\n                uint256 indexToWrite = HOOK_ADDRESS_SLOT + length();\\n                assembly {\\n                    sstore(indexToWrite, currentHook)\\n                }\\n            }\\n            return true;\\n        }\\n    }\\n\\n    function clearCurrentHook() internal {\\n        unchecked {\\n            uint256 indexToWrite = HOOK_ADDRESS_SLOT + length();\\n            assembly {\\n                sstore(indexToWrite, EMPTY_ADDRESS_STORAGE)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91b53136285ee83877d13b10fc38318af1086f82ea5ab61d151b5b816eb873d7\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {SignificantBit} from \\\"./SignificantBit.sol\\\";\\n\\nlibrary Math {\\n    using SignificantBit for uint256;\\n\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (int256) {\\n        require(x > 0);\\n\\n        uint8 msb = x.mostSignificantBit();\\n\\n        if (msb > 128) x >>= msb - 128;\\n        else if (msb < 128) x <<= 128 - msb;\\n\\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\\n\\n        int256 bit = 0x80000000000000000000000000000000;\\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result |= bit;\\n                x = (x >> 1) - 0x80000000000000000000000000000000;\\n            }\\n            bit >>= 1;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x44a5703a0cdbdf56c972cb7ddeb5205996e4879ee3d09a5f5c785adc4de076ab\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := shr(40, id)\\n            index := id\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := shr(40, id)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := id\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd41c94ed2861eb80259bf4e8e860fb3f1d446cb2148311fc46eace86e3c60cd1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SignificantBit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignificantBit {\\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\\n    bytes internal constant DEBRUIJN_INDEX =\\n        hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n     * @notice Finds the index of the least significant bit.\\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\\n     * @return ret The index of the least significant bit.\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 index;\\n        assembly {\\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\\n        }\\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 msb;\\n        assembly {\\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(5, gt(x, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(4, gt(x, 0xFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(3, gt(x, 0xFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(2, gt(x, 0xF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(1, gt(x, 0x3))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := gt(x, 0x1)\\n            msb := or(msb, f)\\n        }\\n        return uint8(msb);\\n    }\\n}\\n\",\"keccak256\":\"0x8dae2286bc0000fa7607b781f9ad044e81b48d10742cde8ecc050e58b1390c9b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for uint256;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 5800731190957938;\\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function toTick(uint24 x) internal pure returns (Tick t) {\\n        assembly {\\n            t := sub(x, 0x800000)\\n        }\\n    }\\n\\n    function toUint24(Tick tick) internal pure returns (uint24 r) {\\n        assembly {\\n            r := add(tick, 0x800000)\\n        }\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        int256 log = price.log2();\\n        int256 tick = log / 49089913871092318234424474366155889;\\n        int256 tickLow = (\\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\\n        ) / 49089913871092318234424474366155889;\\n\\n        if (tick == tickLow) return Tick.wrap(int24(tick));\\n\\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\\n\\n        return Tick.wrap(int24(tickLow));\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 128;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\\n        }\\n        if (tickValue > 0) price = type(uint256).max / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xb16d803debbca272bfbf72925254a341a560c868b020db23ff9a888bd3d1b42b\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "SafeCastOverflowedUintToInt(uint256)": [
        {
          "details": "An uint value doesn't fit in an int of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getExpectedInput((uint192,uint256,uint256,bytes))": {
        "params": {
          "params": "The parameters of the take order"
        },
        "returns": {
          "spendBaseAmount": "The expected spend base amount",
          "takenQuoteAmount": "The expected taken quote amount"
        }
      },
      "getExpectedOutput((uint192,uint256,uint256,bytes))": {
        "params": {
          "params": "The parameters of the spend order"
        },
        "returns": {
          "spendBaseAmount": "The expected spend base amount",
          "takenQuoteAmount": "The expected taken quote amount"
        }
      }
    },
    "stateVariables": {
      "bookManager": {
        "return": "The instance of the book manager",
        "returns": {
          "_0": "The instance of the book manager"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bookManager()": {
        "notice": "Returns the book manager"
      },
      "getExpectedInput((uint192,uint256,uint256,bytes))": {
        "notice": "Returns the expected input for a take order"
      },
      "getExpectedOutput((uint192,uint256,uint256,bytes))": {
        "notice": "Returns the expected output for a spend order"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}