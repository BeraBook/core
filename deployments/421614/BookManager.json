{
  "address": "0xBe84BD49aAf710Cc11FA9675c79D107af8552f17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultProvider_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BookNotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurrencyNotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedHookCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hooks",
          "type": "address"
        }
      ],
      "name": "HookAddressNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeePolicy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHookResponse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "InvalidProvider",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hook",
          "type": "address"
        }
      ],
      "name": "LockedBy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "SafeCastOverflowedIntToUint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintToInt",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "OrderId",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "canceledAmount",
          "type": "uint64"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "OrderId",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "rawAmount",
          "type": "uint64"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Collect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "Delist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "BookId",
          "name": "bookId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tick",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "amount",
          "type": "uint64"
        }
      ],
      "name": "Make",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "Currency",
          "name": "base",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Currency",
          "name": "quote",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "unit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "FeePolicy",
          "name": "makerPolicy",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "FeePolicy",
          "name": "takerPolicy",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "contract IHooks",
          "name": "hooks",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldDefaultProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDefaultProvider",
          "type": "address"
        }
      ],
      "name": "SetDefaultProvider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "BookId",
          "name": "bookId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tick",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "amount",
          "type": "uint64"
        }
      ],
      "name": "Take",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "Whitelist",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "OrderId",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "to",
              "type": "uint64"
            }
          ],
          "internalType": "struct IBookManager.CancelParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "hookData",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "canceledAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkAuthorized",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "OrderId",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "hookData",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "collect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "currencyDelta",
      "outputs": [
        {
          "internalType": "int256",
          "name": "currencyDelta",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "delist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        }
      ],
      "name": "getBookKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unit",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        },
        {
          "internalType": "Tick",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "getDepth",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockData",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        }
      ],
      "name": "getLowest",
      "outputs": [
        {
          "internalType": "Tick",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "OrderId",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "open",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "claimable",
              "type": "uint64"
            }
          ],
          "internalType": "struct IBookManager.OrderInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        }
      ],
      "name": "isEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "load",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "value",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "startSlot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "nSlot",
          "type": "uint256"
        }
      ],
      "name": "load",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "Currency",
                  "name": "base",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "unit",
                  "type": "uint64"
                },
                {
                  "internalType": "Currency",
                  "name": "quote",
                  "type": "address"
                },
                {
                  "internalType": "FeePolicy",
                  "name": "makerPolicy",
                  "type": "uint24"
                },
                {
                  "internalType": "contract IHooks",
                  "name": "hooks",
                  "type": "address"
                },
                {
                  "internalType": "FeePolicy",
                  "name": "takerPolicy",
                  "type": "uint24"
                }
              ],
              "internalType": "struct IBookManager.BookKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            }
          ],
          "internalType": "struct IBookManager.MakeParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "hookData",
          "type": "bytes"
        }
      ],
      "name": "make",
      "outputs": [
        {
          "internalType": "OrderId",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        },
        {
          "internalType": "Tick",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "minGreaterThan",
      "outputs": [
        {
          "internalType": "Tick",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unit",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "key",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "hookData",
          "type": "bytes"
        }
      ],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "reservesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDefaultProvider",
          "type": "address"
        }
      ],
      "name": "setDefaultProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "Currency",
                  "name": "base",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "unit",
                  "type": "uint64"
                },
                {
                  "internalType": "Currency",
                  "name": "quote",
                  "type": "address"
                },
                {
                  "internalType": "FeePolicy",
                  "name": "makerPolicy",
                  "type": "uint24"
                },
                {
                  "internalType": "contract IHooks",
                  "name": "hooks",
                  "type": "address"
                },
                {
                  "internalType": "FeePolicy",
                  "name": "takerPolicy",
                  "type": "uint24"
                }
              ],
              "internalType": "struct IBookManager.BookKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "maxAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IBookManager.TakeParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "hookData",
          "type": "bytes"
        }
      ],
      "name": "take",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "tokenOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2f04c236fd8254fcd5b2809212e65066b8ff79f9f35753dc97f1e2440d3745fa",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0xBe84BD49aAf710Cc11FA9675c79D107af8552f17",
    "transactionIndex": 3,
    "gasUsed": "10579724",
    "logsBloom": "0x00000001000000000000000000000000000000000000000000800000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000008000001000000000000000000000000000000000000020000100000000000000800000000010000000000000000000000c00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000800000000040000000000",
    "blockHash": "0xc29d12e9428a5e65556e9408913f0d596d5f6f505c2d9965d66e8b10002924ec",
    "transactionHash": "0x2f04c236fd8254fcd5b2809212e65066b8ff79f9f35753dc97f1e2440d3745fa",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 23376713,
        "transactionHash": "0x2f04c236fd8254fcd5b2809212e65066b8ff79f9f35753dc97f1e2440d3745fa",
        "address": "0xBe84BD49aAf710Cc11FA9675c79D107af8552f17",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f79ee8f8fa862e98201120d83c4ec39d9468d49"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc29d12e9428a5e65556e9408913f0d596d5f6f505c2d9965d66e8b10002924ec"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23376713,
        "transactionHash": "0x2f04c236fd8254fcd5b2809212e65066b8ff79f9f35753dc97f1e2440d3745fa",
        "address": "0xBe84BD49aAf710Cc11FA9675c79D107af8552f17",
        "topics": [
          "0x32faddbcf33c8560cff79ba1ddc6b995adbeefe08acc9d6c3cc64fe0c2158eef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f79ee8f8fa862e98201120d83c4ec39d9468d49"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xc29d12e9428a5e65556e9408913f0d596d5f6f505c2d9965d66e8b10002924ec"
      }
    ],
    "blockNumber": 23376713,
    "cumulativeGasUsed": "13673821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "baseURI",
    "contractURI",
    "Clober Orderbook Maker Order",
    "CLOB-ORDER"
  ],
  "numDeployments": 1,
  "solcInputHash": "6d67cda5872fd76f8ff4e0dcae9b6502",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultProvider_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BookNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrencyNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedHookCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"HookAddressNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeePolicy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHookResponse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"InvalidProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"LockedBy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"OrderId\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"canceledAmount\",\"type\":\"uint64\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"OrderId\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"Delist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"BookId\",\"name\":\"bookId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"Make\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDefaultProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefaultProvider\",\"type\":\"address\"}],\"name\":\"SetDefaultProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"BookId\",\"name\":\"bookId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"Take\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"OrderId\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"to\",\"type\":\"uint64\"}],\"internalType\":\"struct IBookManager.CancelParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canceledAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkAuthorized\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"OrderId\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"currencyDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"currencyDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"delist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"}],\"name\":\"getBookKey\",\"outputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"getDepth\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"}],\"name\":\"getLowest\",\"outputs\":[{\"internalType\":\"Tick\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"OrderId\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"open\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"claimable\",\"type\":\"uint64\"}],\"internalType\":\"struct IBookManager.OrderInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"}],\"name\":\"isEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"load\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"startSlot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nSlot\",\"type\":\"uint256\"}],\"name\":\"load\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"internalType\":\"struct IBookManager.MakeParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"make\",\"outputs\":[{\"internalType\":\"OrderId\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"minGreaterThan\",\"outputs\":[{\"internalType\":\"Tick\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"reservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDefaultProvider\",\"type\":\"address\"}],\"name\":\"setDefaultProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"maxAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IBookManager.TakeParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"tokenOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"HookAddressNotValid(address)\":[{\"params\":{\"hooks\":\"The address of the hooks contract\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Cancel(uint256,uint64)\":{\"params\":{\"canceledAmount\":\"The canceled amount\",\"orderId\":\"The order id\"}},\"Claim(uint256,uint64)\":{\"params\":{\"orderId\":\"The order id\",\"rawAmount\":\"The claimed amount\"}},\"Collect(address,address,uint256)\":{\"params\":{\"amount\":\"The collected amount\",\"currency\":\"The currency\",\"provider\":\"The provider address\"}},\"Delist(address)\":{\"params\":{\"provider\":\"The provider address\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Make(uint192,address,int24,uint256,uint64)\":{\"params\":{\"amount\":\"The order amount\",\"bookId\":\"The book id\",\"orderIndex\":\"The order index\",\"tick\":\"The order tick\",\"user\":\"The user address\"}},\"Open(uint192,address,address,uint64,uint24,uint24,address)\":{\"params\":{\"base\":\"The base currency\",\"hooks\":\"The hooks contract\",\"id\":\"The book id\",\"makerPolicy\":\"The maker fee policy\",\"quote\":\"The quote currency\",\"takerPolicy\":\"The taker fee policy\",\"unit\":\"The unit of the book\"}},\"SetDefaultProvider(address,address)\":{\"params\":{\"newDefaultProvider\":\"The new default provider address\",\"oldDefaultProvider\":\"The old default provider address\"}},\"Take(uint192,address,int24,uint64)\":{\"params\":{\"amount\":\"The order amount\",\"bookId\":\"The book id\",\"tick\":\"The order tick\",\"user\":\"The user address\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Whitelist(address)\":{\"params\":{\"provider\":\"The provider address\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"cancel((uint256,uint64),bytes)\":{\"params\":{\"hookData\":\"The hook data\",\"params\":\"The order parameters\"},\"returns\":{\"canceledAmount\":\"The amount of quote currency canceled\"}},\"checkAuthorized(address,address,uint256)\":{\"params\":{\"owner\":\"The address of the token owner\",\"spender\":\"The address of the spender\",\"tokenId\":\"The token ID\"}},\"claim(uint256,bytes)\":{\"params\":{\"hookData\":\"The hook data\",\"id\":\"The order ID\"},\"returns\":{\"claimedAmount\":\"The amount claimed\"}},\"collect(address,address)\":{\"params\":{\"currency\":\"The currency\",\"provider\":\"The provider address\"}},\"delist(address)\":{\"params\":{\"provider\":\"The provider address\"}},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBookKey(uint192)\":{\"params\":{\"id\":\"The book ID\"},\"returns\":{\"_0\":\"The book key\"}},\"getDepth(uint192,int24)\":{\"params\":{\"id\":\"The book ID\",\"tick\":\"The tick\"},\"returns\":{\"_0\":\"The depth of the tick\"}},\"getLock(uint256)\":{\"params\":{\"i\":\"The index of the lock\"},\"returns\":{\"_0\":\"The locker's address\",\"_1\":\"The caller's address\"}},\"getLockData()\":{\"returns\":{\"_0\":\"The lock data including necessary numeric values\"}},\"getLowest(uint192)\":{\"params\":{\"id\":\"The book ID\"},\"returns\":{\"_0\":\"The lowest tick\"}},\"getOrder(uint256)\":{\"params\":{\"id\":\"The order ID\"},\"returns\":{\"_0\":\"Order information including provider, open status, and claimable amount\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isEmpty(uint192)\":{\"params\":{\"id\":\"The book ID\"},\"returns\":{\"_0\":\"True if the book is empty, false otherwise\"}},\"load(bytes32)\":{\"params\":{\"slot\":\"The storage slot\"},\"returns\":{\"value\":\"The value in the slot\"}},\"load(bytes32,uint256)\":{\"params\":{\"nSlot\":\"The number of slots to load\",\"startSlot\":\"The starting slot\"},\"returns\":{\"value\":\"The sequence of values\"}},\"lock(address,bytes)\":{\"params\":{\"data\":\"The lock data\",\"locker\":\"The locker address\"},\"returns\":{\"result\":\"The lock return data\"}},\"make(((address,uint64,address,uint24,address,uint24),int24,uint64,address),bytes)\":{\"params\":{\"hookData\":\"The hook data\",\"params\":\"The order parameters\"},\"returns\":{\"id\":\"The order id. Returns 0 if the order is not settled\",\"quoteAmount\":\"The amount of quote currency to be paid\"}},\"minGreaterThan(uint192,int24)\":{\"details\":\"Returns `Tick.wrap(type(int24).min)` if the specified tick is the highest\",\"params\":{\"id\":\"The book ID\",\"tick\":\"The specified tick\"},\"returns\":{\"_0\":\"The next higher tick\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"open((address,uint64,address,uint24,address,uint24),bytes)\":{\"params\":{\"hookData\":\"The hook data\",\"key\":\"The book key\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline for the signature\",\"r\":\"The r value of the signature\",\"s\":\"The s value of the signature\",\"spender\":\"The address to approve\",\"tokenId\":\"The tokenId to approve\",\"v\":\"The recovery id of the signature\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setDefaultProvider(address)\":{\"params\":{\"newDefaultProvider\":\"The new default provider address\"}},\"settle(address)\":{\"params\":{\"currency\":\"The currency\"},\"returns\":{\"paid\":\"The settled amount\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"take(((address,uint64,address,uint24,address,uint24),int24,uint64),bytes)\":{\"params\":{\"hookData\":\"The hook data\",\"params\":\"The order parameters\"},\"returns\":{\"baseAmount\":\"The amount of base currency to be paid\",\"quoteAmount\":\"The amount of quote currency to be received\"}},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"whitelist(address)\":{\"params\":{\"provider\":\"The provider address\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"amount\":\"The amount\",\"currency\":\"The currency\",\"to\":\"The recipient address\"}}},\"stateVariables\":{\"baseURI\":{\"return\":\"The base URI\",\"returns\":{\"_0\":\"The base URI\"}},\"contractURI\":{\"return\":\"The contract URI\",\"returns\":{\"_0\":\"The contract URI\"}},\"currencyDelta\":{\"params\":{\"currency\":\"The currency in question\",\"locker\":\"The address of the locker\"},\"return\":\"currencyDelta The net change in currency balance\",\"returns\":{\"currencyDelta\":\"The net change in currency balance\"}},\"defaultProvider\":{\"return\":\"The default provider\",\"returns\":{\"_0\":\"The default provider\"}},\"isWhitelisted\":{\"params\":{\"provider\":\"The address of the provider\"},\"return\":\"True if the provider is whitelisted, false otherwise\",\"returns\":{\"_0\":\"True if the provider is whitelisted, false otherwise\"}},\"reservesOf\":{\"params\":{\"currency\":\"The currency in question\"},\"return\":\"The total reserves amount\",\"returns\":{\"_0\":\"The total reserves amount\"}},\"tokenOwed\":{\"params\":{\"currency\":\"The currency in question\",\"provider\":\"The provider's address\"},\"return\":\"amount The owed amount\",\"returns\":{\"amount\":\"The owed amount\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20TransferFailed()\":[{\"notice\":\"Thrown when an ERC20 transfer fails\"}],\"FailedHookCall()\":[{\"notice\":\"thrown when a hook call fails\"}],\"HookAddressNotValid(address)\":[{\"notice\":\"Thrown if the address will not lead to the specified hook calls being called\"}],\"InvalidHookResponse()\":[{\"notice\":\"Hook did not return its selector\"}],\"NativeTransferFailed()\":[{\"notice\":\"Thrown when a native transfer fails\"}]},\"events\":{\"Cancel(uint256,uint64)\":{\"notice\":\"Event emitted when an order is canceled\"},\"Claim(uint256,uint64)\":{\"notice\":\"Event emitted when an order is claimed\"},\"Collect(address,address,uint256)\":{\"notice\":\"Event emitted when a provider collects fees\"},\"Delist(address)\":{\"notice\":\"Event emitted when a provider is delisted\"},\"Make(uint192,address,int24,uint256,uint64)\":{\"notice\":\"Event emitted when a new order is made\"},\"Open(uint192,address,address,uint64,uint24,uint24,address)\":{\"notice\":\"Event emitted when a new book is opened\"},\"SetDefaultProvider(address,address)\":{\"notice\":\"Event emitted when new default provider is set\"},\"Take(uint192,address,int24,uint64)\":{\"notice\":\"Event emitted when an order is taken\"},\"Whitelist(address)\":{\"notice\":\"Event emitted when a provider is whitelisted\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The EIP-712 domain separator for this contract\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the permit struct used by the contract\"},\"baseURI()\":{\"notice\":\"Returns the base URI\"},\"cancel((uint256,uint64),bytes)\":{\"notice\":\"Cancel a limit order\"},\"checkAuthorized(address,address,uint256)\":{\"notice\":\"Verifies if an owner has authorized a spender for a token\"},\"claim(uint256,bytes)\":{\"notice\":\"Claims an order\"},\"collect(address,address)\":{\"notice\":\"Collects fees from a provider\"},\"contractURI()\":{\"notice\":\"Returns the contract URI\"},\"currencyDelta(address,address)\":{\"notice\":\"Calculates the currency balance changes for a given locker\"},\"defaultProvider()\":{\"notice\":\"Returns the default provider\"},\"delist(address)\":{\"notice\":\"Delists a provider\"},\"getBookKey(uint192)\":{\"notice\":\"Retrieves the book key for a given book ID\"},\"getDepth(uint192,int24)\":{\"notice\":\"Returns the depth of a given book ID and tick\"},\"getLock(uint256)\":{\"notice\":\"Retrieves the locker and caller addresses for a given lock\"},\"getLockData()\":{\"notice\":\"Provides the lock data\"},\"getLowest(uint192)\":{\"notice\":\"Retrieves the lowest tick for a given book ID\"},\"getOrder(uint256)\":{\"notice\":\"Provides information about an order\"},\"isEmpty(uint192)\":{\"notice\":\"Checks if a book is empty\"},\"isWhitelisted(address)\":{\"notice\":\"Checks if a provider is whitelisted\"},\"load(bytes32)\":{\"notice\":\"Loads a value from a specific storage slot\"},\"load(bytes32,uint256)\":{\"notice\":\"Loads a sequence of values starting from a specific slot\"},\"lock(address,bytes)\":{\"notice\":\"Locks a book manager function\"},\"make(((address,uint64,address,uint24,address,uint24),int24,uint64,address),bytes)\":{\"notice\":\"Make a limit order\"},\"minGreaterThan(uint192,int24)\":{\"notice\":\"Finds the minimum tick greater than a specified tick in a book\"},\"open((address,uint64,address,uint24,address,uint24),bytes)\":{\"notice\":\"Opens a new book\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve the spender to transfer the given tokenId\"},\"reservesOf(address)\":{\"notice\":\"Returns the total reserves of a given currency\"},\"setDefaultProvider(address)\":{\"notice\":\"Sets the default provider\"},\"settle(address)\":{\"notice\":\"Settles a currency\"},\"take(((address,uint64,address,uint24,address,uint24),int24,uint64),bytes)\":{\"notice\":\"Take a limit order at specific tick\"},\"tokenOwed(address,address)\":{\"notice\":\"Calculates the amount owed to a provider in a given currency\"},\"whitelist(address)\":{\"notice\":\"Whitelists a provider\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraws a currency\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BookManager.sol\":\"BookManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@clober/library/contracts/DirtyUint64.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nlibrary DirtyUint64 {\\n    error DirtyUint64Error(uint256 errorCode);\\n    uint256 private constant _OVERFLOW_ERROR = 0;\\n    uint256 private constant _UNDERFLOW_ERROR = 1;\\n\\n    function toDirtyUnsafe(uint64 cleanUint) internal pure returns (uint64 dirtyUint) {\\n        assembly {\\n            dirtyUint := add(cleanUint, 1)\\n        }\\n    }\\n\\n    function toDirty(uint64 cleanUint) internal pure returns (uint64 dirtyUint) {\\n        assembly {\\n            dirtyUint := add(cleanUint, 1)\\n        }\\n        if (dirtyUint == 0) {\\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\\n        }\\n    }\\n\\n    function toClean(uint64 dirtyUint) internal pure returns (uint64 cleanUint) {\\n        assembly {\\n            cleanUint := sub(dirtyUint, gt(dirtyUint, 0))\\n        }\\n    }\\n\\n    function addClean(uint64 current, uint64 cleanUint) internal pure returns (uint64) {\\n        assembly {\\n            current := add(add(current, iszero(current)), cleanUint)\\n        }\\n        if (current < cleanUint) {\\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\\n        }\\n        return current;\\n    }\\n\\n    function addDirty(uint64 current, uint64 dirtyUint) internal pure returns (uint64) {\\n        assembly {\\n            current := sub(add(add(current, iszero(current)), add(dirtyUint, iszero(dirtyUint))), 1)\\n        }\\n        if (current < dirtyUint) {\\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\\n        }\\n        return current;\\n    }\\n\\n    function subClean(uint64 current, uint64 cleanUint) internal pure returns (uint64 ret) {\\n        assembly {\\n            current := add(current, iszero(current))\\n            ret := sub(current, cleanUint)\\n        }\\n        if (current < ret || ret == 0) {\\n            revert DirtyUint64Error(_UNDERFLOW_ERROR);\\n        }\\n    }\\n\\n    function subDirty(uint64 current, uint64 dirtyUint) internal pure returns (uint64 ret) {\\n        assembly {\\n            current := add(current, iszero(current))\\n            ret := sub(add(current, 1), add(dirtyUint, iszero(dirtyUint)))\\n        }\\n        if (current < ret || ret == 0) {\\n            revert DirtyUint64Error(_UNDERFLOW_ERROR);\\n        }\\n    }\\n\\n    function sumPackedUnsafe(\\n        uint256 packed,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (uint64 ret) {\\n        packed = packed >> (from << 6);\\n        unchecked {\\n            for (uint256 i = from; i < to; ++i) {\\n                assembly {\\n                    let element := and(packed, 0xffffffffffffffff)\\n                    ret := add(ret, add(element, iszero(element)))\\n                    packed := shr(64, packed)\\n                }\\n            }\\n        }\\n        assembly {\\n            ret := sub(ret, sub(to, from))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f945464f04f0d1731dd2a6bf9f96768e63e09835cd812eae520ca47438a2069\",\"license\":\"-\"},\"@clober/library/contracts/PackedUint256.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nlibrary PackedUint256 {\\n    error PackedUint256Error(uint256 errorCode);\\n    uint256 private constant _UINT8_INDEX_ERROR = 0;\\n    uint256 private constant _UINT16_INDEX_ERROR = 1;\\n    uint256 private constant _UINT32_INDEX_ERROR = 2;\\n    uint256 private constant _UINT64_INDEX_ERROR = 3;\\n\\n    uint256 private constant _MAX_UINT64 = type(uint64).max;\\n    uint256 private constant _MAX_UINT32 = type(uint32).max;\\n    uint256 private constant _MAX_UINT16 = type(uint16).max;\\n    uint256 private constant _MAX_UINT8 = type(uint8).max;\\n\\n    function get8Unsafe(uint256 packed, uint256 index) internal pure returns (uint8 ret) {\\n        assembly {\\n            ret := shr(shl(3, index), packed)\\n        }\\n    }\\n\\n    function get8(uint256 packed, uint256 index) internal pure returns (uint8 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(3, index), packed)\\n        }\\n    }\\n\\n    function get16Unsafe(uint256 packed, uint256 index) internal pure returns (uint16 ret) {\\n        assembly {\\n            ret := shr(shl(4, index), packed)\\n        }\\n    }\\n\\n    function get16(uint256 packed, uint256 index) internal pure returns (uint16 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(4, index), packed)\\n        }\\n    }\\n\\n    function get32Unsafe(uint256 packed, uint256 index) internal pure returns (uint32 ret) {\\n        assembly {\\n            ret := shr(shl(5, index), packed)\\n        }\\n    }\\n\\n    function get32(uint256 packed, uint256 index) internal pure returns (uint32 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(5, index), packed)\\n        }\\n    }\\n\\n    function get64Unsafe(uint256 packed, uint256 index) internal pure returns (uint64 ret) {\\n        assembly {\\n            ret := shr(shl(6, index), packed)\\n        }\\n    }\\n\\n    function get64(uint256 packed, uint256 index) internal pure returns (uint64 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(6, index), packed)\\n        }\\n    }\\n\\n    function add8Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(3, index), casted))\\n        }\\n    }\\n\\n    function add8(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        uint8 current = get8Unsafe(packed, index);\\n        current += value;\\n        ret = update8Unsafe(packed, index, current);\\n    }\\n\\n    function add16Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(4, index), casted))\\n        }\\n    }\\n\\n    function add16(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        uint16 current = get16Unsafe(packed, index);\\n        current += value;\\n        ret = update16Unsafe(packed, index, current);\\n    }\\n\\n    function add32Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(5, index), casted))\\n        }\\n    }\\n\\n    function add32(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        uint32 current = get32Unsafe(packed, index);\\n        current += value;\\n        ret = update32Unsafe(packed, index, current);\\n    }\\n\\n    function add64Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(6, index), casted))\\n        }\\n    }\\n\\n    function add64(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        uint64 current = get64Unsafe(packed, index);\\n        current += value;\\n        ret = update64Unsafe(packed, index, current);\\n    }\\n\\n    function sub8Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(3, index), casted))\\n        }\\n    }\\n\\n    function sub8(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        uint8 current = get8Unsafe(packed, index);\\n        current -= value;\\n        ret = update8Unsafe(packed, index, current);\\n    }\\n\\n    function sub16Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(4, index), casted))\\n        }\\n    }\\n\\n    function sub16(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        uint16 current = get16Unsafe(packed, index);\\n        current -= value;\\n        ret = update16Unsafe(packed, index, current);\\n    }\\n\\n    function sub32Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(5, index), casted))\\n        }\\n    }\\n\\n    function sub32(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        uint32 current = get32Unsafe(packed, index);\\n        current -= value;\\n        ret = update32Unsafe(packed, index, current);\\n    }\\n\\n    function sub64Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(6, index), casted))\\n        }\\n    }\\n\\n    function sub64(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        uint64 current = get64Unsafe(packed, index);\\n        current -= value;\\n        ret = update64Unsafe(packed, index, current);\\n    }\\n\\n    function update8Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 3;\\n            packed = packed - (packed & (_MAX_UINT8 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update8(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 3;\\n            packed = packed - (packed & (_MAX_UINT8 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update16Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 4;\\n            packed = packed - (packed & (_MAX_UINT16 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update16(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 4;\\n            packed = packed - (packed & (_MAX_UINT16 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update32Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 5;\\n            packed = packed - (packed & (_MAX_UINT32 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update32(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 5;\\n            packed = packed - (packed & (_MAX_UINT32 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update64Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 6;\\n            packed = packed - (packed & (_MAX_UINT64 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update64(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 6;\\n            packed = packed - (packed & (_MAX_UINT64 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function total32(uint256 packed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret = _MAX_UINT32 & packed;\\n            for (uint256 i = 0; i < 7; ++i) {\\n                packed = packed >> 32;\\n                ret += _MAX_UINT32 & packed;\\n            }\\n            return ret;\\n        }\\n    }\\n\\n    function total64(uint256 packed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret = _MAX_UINT64 & packed;\\n            for (uint256 i = 0; i < 3; ++i) {\\n                packed = packed >> 64;\\n                ret += _MAX_UINT64 & packed;\\n            }\\n            return ret;\\n        }\\n    }\\n\\n    function sum32(\\n        uint256 packed,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            packed = packed >> (from << 5);\\n            uint256 ret = 0;\\n            for (uint256 i = from; i < to; ++i) {\\n                ret += _MAX_UINT32 & packed;\\n                packed = packed >> 32;\\n            }\\n            return ret;\\n        }\\n    }\\n\\n    function sum64(\\n        uint256 packed,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            packed = packed >> (from << 6);\\n            uint256 ret = 0;\\n            for (uint256 i = from; i < to; ++i) {\\n                ret += _MAX_UINT64 & packed;\\n                packed = packed >> 64;\\n            }\\n            return ret;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06afe8ad083ccf139f6629ea721aa57ee1356b13648d5b958ee5c0333647a4bf\",\"license\":\"-\"},\"@clober/library/contracts/SegmentedSegmentTree.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PackedUint256.sol\\\";\\nimport \\\"./DirtyUint64.sol\\\";\\n\\n/**\\n\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\n\\n                  Segmented Segment Tree\\n                               by Clober\\n\\n____________/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\____________/\\\\\\\\\\\\____\\n __________/\\\\\\\\\\\\\\\\\\\\___________/\\\\\\\\\\\\\\\\////___________/\\\\\\\\\\\\\\\\\\\\____\\n  ________/\\\\\\\\\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\///______________/\\\\\\\\\\\\/\\\\\\\\\\\\____\\n   ______/\\\\\\\\\\\\/\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\/\\\\/\\\\\\\\\\\\____\\n    ____/\\\\\\\\\\\\/__\\\\/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\///////\\\\\\\\\\\\_____/\\\\\\\\\\\\/__\\\\/\\\\\\\\\\\\____\\n     __/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\n      _\\\\///////////\\\\\\\\\\\\//__\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\///////////\\\\\\\\\\\\//__\\n       ___________\\\\/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/_____________\\\\/\\\\\\\\\\\\____\\n        ___________\\\\///________\\\\/////////_______________\\\\///_____\\n\\n          4 Layers of 64-bit nodes, hence 464\\n\\n\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\n*/\\n\\nlibrary SegmentedSegmentTree {\\n    using PackedUint256 for uint256;\\n    using DirtyUint64 for uint64;\\n\\n    error SegmentedSegmentTreeError(uint256 errorCode);\\n    uint256 private constant _INDEX_ERROR = 0;\\n    uint256 private constant _OVERFLOW_ERROR = 1;\\n\\n    //    uint8 private constant _R = 2; // There are `2` root node groups\\n    //    uint8 private constant _C = 4; // There are `4` children (each child is a node group of its own) for each node\\n    uint8 private constant _L = 4; // There are `4` layers of node groups\\n    uint256 private constant _P = 4; // uint256 / uint64 = `4`\\n    uint256 private constant _P_M = 3; // % 4 = & `3`\\n    uint256 private constant _P_P = 2; // 2 ** `2` = 4\\n    uint256 private constant _N_P = 4; // C * P = 2 ** `4`\\n    uint256 private constant _MAX_NODES = 2**15; // (R * P) * ((C * P) ** (L - 1)) = `32768`\\n    uint256 private constant _MAX_NODES_P_MINUS_ONE = 14; // MAX_NODES / R = 2 ** `14`\\n\\n    struct Core {\\n        mapping(uint256 => uint256)[_L] layers;\\n    }\\n\\n    struct LayerIndex {\\n        uint256 group;\\n        uint256 node;\\n    }\\n\\n    function get(Core storage core, uint256 index) internal view returns (uint64 ret) {\\n        if (index >= _MAX_NODES) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n        unchecked {\\n            ret = core.layers[_L - 1][index >> _P_P].get64(index & _P_M).toClean();\\n        }\\n    }\\n\\n    function total(Core storage core) internal view returns (uint64) {\\n        return\\n            DirtyUint64.sumPackedUnsafe(core.layers[0][0], 0, _P) +\\n            DirtyUint64.sumPackedUnsafe(core.layers[0][1], 0, _P);\\n    }\\n\\n    function query(\\n        Core storage core,\\n        uint256 left,\\n        uint256 right\\n    ) internal view returns (uint64 sum) {\\n        if (left == right) {\\n            return 0;\\n        }\\n        // right should be greater than left\\n        if (left >= right) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n        if (right > _MAX_NODES) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n\\n        LayerIndex[] memory leftIndices = _getLayerIndices(left);\\n        LayerIndex[] memory rightIndices = _getLayerIndices(right);\\n        uint256 ret;\\n        uint256 deficit;\\n\\n        unchecked {\\n            uint256 leftNodeIndex;\\n            uint256 rightNodeIndex;\\n            for (uint256 l = _L - 1; ; --l) {\\n                LayerIndex memory leftIndex = leftIndices[l];\\n                LayerIndex memory rightIndex = rightIndices[l];\\n                leftNodeIndex += leftIndex.node;\\n                rightNodeIndex += rightIndex.node;\\n\\n                if (rightIndex.group == leftIndex.group) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, rightNodeIndex);\\n                    break;\\n                }\\n\\n                if (rightIndex.group - leftIndex.group < 4) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\\n\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\\n\\n                    for (uint256 group = leftIndex.group + 1; group < rightIndex.group; group++) {\\n                        ret += DirtyUint64.sumPackedUnsafe(core.layers[l][group], 0, _P);\\n                    }\\n                    break;\\n                }\\n\\n                if (leftIndex.group % 4 == 0) {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], 0, leftNodeIndex);\\n                    leftNodeIndex = 0;\\n                } else if (leftIndex.group % 4 == 1) {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group - 1], 0, _P);\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], 0, leftNodeIndex);\\n                    leftNodeIndex = 0;\\n                } else if (leftIndex.group % 4 == 2) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group + 1], 0, _P);\\n                    leftNodeIndex = 1;\\n                } else {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\\n                    leftNodeIndex = 1;\\n                }\\n\\n                if (rightIndex.group % 4 == 0) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\\n                    rightNodeIndex = 0;\\n                } else if (rightIndex.group % 4 == 1) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group - 1], 0, _P);\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\\n                    rightNodeIndex = 0;\\n                } else if (rightIndex.group % 4 == 2) {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], rightNodeIndex, _P);\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group + 1], 0, _P);\\n                    rightNodeIndex = 1;\\n                } else {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], rightNodeIndex, _P);\\n                    rightNodeIndex = 1;\\n                }\\n            }\\n            ret -= deficit;\\n        }\\n        sum = uint64(ret);\\n    }\\n\\n    function update(\\n        Core storage core,\\n        uint256 index,\\n        uint64 value\\n    ) internal returns (uint64 replaced) {\\n        if (index >= _MAX_NODES) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n        LayerIndex[] memory indices = _getLayerIndices(index);\\n        unchecked {\\n            LayerIndex memory bottomIndex = indices[_L - 1];\\n            replaced = core.layers[_L - 1][bottomIndex.group].get64Unsafe(bottomIndex.node).toClean();\\n            if (replaced >= value) {\\n                uint64 diff = replaced - value;\\n                for (uint256 l = 0; l < _L; ++l) {\\n                    LayerIndex memory layerIndex = indices[l];\\n                    uint256 node = core.layers[l][layerIndex.group];\\n                    core.layers[l][layerIndex.group] = node.update64(\\n                        layerIndex.node,\\n                        node.get64(layerIndex.node).subClean(diff)\\n                    );\\n                }\\n            } else {\\n                uint64 diff = value - replaced;\\n                if (total(core) > type(uint64).max - diff) revert SegmentedSegmentTreeError(_OVERFLOW_ERROR);\\n                for (uint256 l = 0; l < _L; ++l) {\\n                    LayerIndex memory layerIndex = indices[l];\\n                    uint256 node = core.layers[l][layerIndex.group];\\n                    core.layers[l][layerIndex.group] = node.update64(\\n                        layerIndex.node,\\n                        node.get64(layerIndex.node).addClean(diff)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getLayerIndices(uint256 index) private pure returns (LayerIndex[] memory) {\\n        unchecked {\\n            LayerIndex[] memory indices = new LayerIndex[](_L);\\n            uint256 shifter = _MAX_NODES_P_MINUS_ONE;\\n            for (uint256 l = 0; l < _L; ++l) {\\n                indices[l] = LayerIndex({group: index >> shifter, node: (index >> (shifter - _P_P)) & _P_M});\\n                shifter = shifter - _N_P;\\n            }\\n            return indices;\\n        }\\n    }\\n}\\n\\n/*\\n * Segmented Segment Tree is a Segment Tree\\n * that has been compressed so that `C` nodes\\n * are compressed into a single uint256.\\n *\\n * Each node in a non-leaf node group is the sum of the\\n * total sum of each child node group that it represents.\\n * Each non-leaf node represents `E` node groups.\\n *\\n * A node group consists of `S` uint256.\\n *\\n * By expressing the index in `N` notation,\\n * we can find the index in each respective layer\\n *\\n * S: Size of each node group\\n * C: Compression Coefficient\\n * E: Expansion Coefficient\\n * L: Number of Layers\\n * N: Notation, S * C * E\\n *\\n * `E` will not be considered for this version of the implementation. (E = 2)\\n */\\n\",\"keccak256\":\"0x2f77fa7d506726281f06ad30b4c2511698cd6aea252d0e8960466ae0b809e967\",\"license\":\"-\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BookManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./libraries/BookId.sol\\\";\\nimport \\\"./libraries/Book.sol\\\";\\nimport \\\"./libraries/OrderId.sol\\\";\\nimport \\\"./libraries/Lockers.sol\\\";\\nimport \\\"./interfaces/ILocker.sol\\\";\\nimport \\\"./libraries/ERC721Permit.sol\\\";\\nimport \\\"./libraries/Hooks.sol\\\";\\n\\ncontract BookManager is IBookManager, Ownable2Step, ERC721Permit {\\n    using SafeCast for *;\\n    using BookIdLibrary for IBookManager.BookKey;\\n    using TickLibrary for Tick;\\n    using Book for Book.State;\\n    using OrderIdLibrary for OrderId;\\n    using CurrencyLibrary for Currency;\\n    using FeePolicyLibrary for FeePolicy;\\n    using Hooks for IHooks;\\n\\n    string public override baseURI; // slot 10\\n    string public override contractURI;\\n    address public override defaultProvider;\\n\\n    mapping(address locker => mapping(Currency currency => int256 currencyDelta)) public override currencyDelta;\\n    mapping(Currency currency => uint256) public override reservesOf;\\n    mapping(BookId id => Book.State) internal _books;\\n    mapping(address provider => bool) public override isWhitelisted;\\n    mapping(address provider => mapping(Currency currency => uint256 amount)) public override tokenOwed;\\n\\n    constructor(\\n        address owner_,\\n        address defaultProvider_,\\n        string memory baseURI_,\\n        string memory contractURI_,\\n        string memory name_,\\n        string memory symbol_\\n    ) Ownable(owner_) ERC721Permit(name_, symbol_, \\\"2\\\") {\\n        setDefaultProvider(defaultProvider_);\\n        baseURI = baseURI_;\\n        contractURI = contractURI_;\\n        Lockers.initialize();\\n    }\\n\\n    modifier onlyByLocker() {\\n        _checkLocker(msg.sender);\\n        _;\\n    }\\n\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view {\\n        _checkAuthorized(owner, spender, tokenId);\\n    }\\n\\n    function _checkLocker(address caller) internal view {\\n        address locker = Lockers.getCurrentLocker();\\n        IHooks hook = Lockers.getCurrentHook();\\n        if (caller == locker) return;\\n        if (caller == address(hook) && hook.hasPermission(Hooks.ACCESS_LOCK_FLAG)) return;\\n        revert LockedBy(locker, address(hook));\\n    }\\n\\n    function getBookKey(BookId id) external view returns (BookKey memory) {\\n        return _books[id].key;\\n    }\\n\\n    function getOrder(OrderId id) external view returns (OrderInfo memory) {\\n        (BookId bookId, Tick tick, uint40 orderIndex) = id.decode();\\n        Book.State storage book = _books[bookId];\\n        Book.Order memory order = book.getOrder(tick, orderIndex);\\n        uint64 claimable = book.calculateClaimableRawAmount(tick, orderIndex);\\n        unchecked {\\n            return OrderInfo({provider: order.provider, open: order.pending - claimable, claimable: claimable});\\n        }\\n    }\\n\\n    function open(BookKey calldata key, bytes calldata hookData) external onlyByLocker {\\n        // @dev Also, the book opener should set unit at least circulatingTotalSupply / type(uint64).max to avoid overflow.\\n        //      But it is not checked here because it is not possible to check it without knowing circulatingTotalSupply.\\n        if (key.unit == 0) revert InvalidUnit();\\n\\n        if (!(key.makerPolicy.isValid() && key.takerPolicy.isValid())) revert InvalidFeePolicy();\\n        unchecked {\\n            if (key.makerPolicy.rate() + key.takerPolicy.rate() < 0) revert InvalidFeePolicy();\\n        }\\n        if (key.makerPolicy.rate() < 0 || key.takerPolicy.rate() < 0) {\\n            if (key.makerPolicy.usesQuote() != key.takerPolicy.usesQuote()) revert InvalidFeePolicy();\\n        }\\n        if (!key.hooks.isValidHookAddress()) revert Hooks.HookAddressNotValid(address(key.hooks));\\n\\n        key.hooks.beforeOpen(key, hookData);\\n\\n        BookId id = key.toId();\\n        _books[id].open(key);\\n\\n        key.hooks.afterOpen(key, hookData);\\n\\n        emit Open(id, key.base, key.quote, key.unit, key.makerPolicy, key.takerPolicy, key.hooks);\\n    }\\n\\n    function lock(address locker, bytes calldata data) external returns (bytes memory result) {\\n        Lockers.push(locker, msg.sender);\\n\\n        // the locker does everything in this callback, including paying what they owe via calls to settle\\n        result = ILocker(locker).lockAcquired(msg.sender, data);\\n\\n        (uint128 length, uint128 nonzeroDeltaCount) = Lockers.lockData();\\n        if (length == 1) {\\n            if (nonzeroDeltaCount != 0) revert CurrencyNotSettled();\\n            Lockers.clear();\\n        } else {\\n            Lockers.pop();\\n        }\\n    }\\n\\n    function getLock(uint256 i) external view returns (address, address) {\\n        return (Lockers.getLocker(i), Lockers.getLockCaller(i));\\n    }\\n\\n    function getLockData() external view returns (uint128, uint128) {\\n        return Lockers.lockData();\\n    }\\n\\n    function getDepth(BookId id, Tick tick) external view returns (uint64) {\\n        return _books[id].depth(tick);\\n    }\\n\\n    function getLowest(BookId id) external view returns (Tick) {\\n        return _books[id].lowest();\\n    }\\n\\n    function minGreaterThan(BookId id, Tick tick) external view returns (Tick) {\\n        return _books[id].minGreaterThan(tick);\\n    }\\n\\n    function isEmpty(BookId id) external view returns (bool) {\\n        return _books[id].isEmpty();\\n    }\\n\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        onlyByLocker\\n        returns (OrderId id, uint256 quoteAmount)\\n    {\\n        if (params.provider != address(0) && !isWhitelisted[params.provider]) revert InvalidProvider(params.provider);\\n        params.tick.validateTick();\\n        BookId bookId = params.key.toId();\\n        Book.State storage book = _books[bookId];\\n        book.checkOpened();\\n\\n        if (!params.key.hooks.beforeMake(params, hookData)) return (OrderId.wrap(0), 0);\\n\\n        uint40 orderIndex = book.make(params.tick, params.amount, params.provider);\\n        id = OrderIdLibrary.encode(bookId, params.tick, orderIndex);\\n        int256 quoteDelta;\\n        unchecked {\\n            // @dev uint64 * uint64 < type(uint256).max\\n            quoteAmount = uint256(params.amount) * params.key.unit;\\n\\n            // @dev 0 < uint64 * uint64 + rate * uint64 * uint64 < type(int256).max\\n            quoteDelta = int256(quoteAmount);\\n            if (params.key.makerPolicy.usesQuote()) {\\n                quoteDelta += params.key.makerPolicy.calculateFee(quoteAmount, false);\\n                quoteAmount = uint256(quoteDelta);\\n            }\\n        }\\n\\n        _accountDelta(params.key.quote, quoteDelta);\\n\\n        _mint(msg.sender, OrderId.unwrap(id));\\n\\n        params.key.hooks.afterMake(params, id, hookData);\\n\\n        emit Make(bookId, msg.sender, params.tick, orderIndex, params.amount);\\n    }\\n\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        onlyByLocker\\n        returns (uint256 quoteAmount, uint256 baseAmount)\\n    {\\n        params.tick.validateTick();\\n        BookId bookId = params.key.toId();\\n        Book.State storage book = _books[bookId];\\n        book.checkOpened();\\n\\n        if (!params.key.hooks.beforeTake(params, hookData)) return (0, 0);\\n\\n        uint64 takenAmount = book.take(params.tick, params.maxAmount);\\n        unchecked {\\n            quoteAmount = uint256(takenAmount) * params.key.unit;\\n        }\\n        baseAmount = params.tick.quoteToBase(quoteAmount, true);\\n\\n        int256 quoteDelta = int256(quoteAmount);\\n        int256 baseDelta = baseAmount.toInt256();\\n        if (params.key.takerPolicy.usesQuote()) {\\n            quoteDelta -= params.key.takerPolicy.calculateFee(quoteAmount, false);\\n            quoteAmount = uint256(quoteDelta);\\n        } else {\\n            baseDelta += params.key.takerPolicy.calculateFee(baseAmount, false);\\n            baseAmount = uint256(baseDelta);\\n        }\\n        _accountDelta(params.key.quote, -quoteDelta);\\n        _accountDelta(params.key.base, baseDelta);\\n\\n        params.key.hooks.afterTake(params, takenAmount, hookData);\\n\\n        emit Take(bookId, msg.sender, params.tick, takenAmount);\\n    }\\n\\n    function cancel(CancelParams calldata params, bytes calldata hookData)\\n        external\\n        onlyByLocker\\n        returns (uint256 canceledAmount)\\n    {\\n        _checkAuthorized(_ownerOf(OrderId.unwrap(params.id)), msg.sender, OrderId.unwrap(params.id));\\n\\n        Book.State storage book = _books[params.id.getBookId()];\\n        BookKey memory key = book.key;\\n\\n        if (!key.hooks.beforeCancel(params, hookData)) return 0;\\n\\n        (uint64 canceled, uint64 pending) = book.cancel(params.id, params.to);\\n\\n        unchecked {\\n            canceledAmount = uint256(canceled) * key.unit;\\n            if (key.makerPolicy.usesQuote()) {\\n                int256 quoteFee = key.makerPolicy.calculateFee(canceledAmount, true);\\n                canceledAmount = uint256(int256(canceledAmount) + quoteFee);\\n            }\\n        }\\n\\n        if (pending == 0) _burn(OrderId.unwrap(params.id));\\n\\n        _accountDelta(key.quote, -int256(canceledAmount));\\n\\n        key.hooks.afterCancel(params, canceled, hookData);\\n\\n        emit Cancel(params.id, canceled);\\n    }\\n\\n    function claim(OrderId id, bytes calldata hookData) external onlyByLocker returns (uint256 claimedAmount) {\\n        _checkAuthorized(_ownerOf(OrderId.unwrap(id)), msg.sender, OrderId.unwrap(id));\\n\\n        Tick tick;\\n        uint40 orderIndex;\\n        Book.State storage book;\\n        {\\n            BookId bookId;\\n            (bookId, tick, orderIndex) = id.decode();\\n            book = _books[bookId];\\n        }\\n        IBookManager.BookKey memory key = book.key;\\n\\n        if (!key.hooks.beforeClaim(id, hookData)) return 0;\\n\\n        uint64 claimedRaw = book.claim(tick, orderIndex);\\n\\n        int256 quoteFee;\\n        int256 baseFee;\\n        {\\n            uint256 claimedInQuote;\\n            unchecked {\\n                claimedInQuote = uint256(claimedRaw) * key.unit;\\n            }\\n            claimedAmount = tick.quoteToBase(claimedInQuote, false);\\n\\n            FeePolicy makerPolicy = key.makerPolicy;\\n            FeePolicy takerPolicy = key.takerPolicy;\\n            if (takerPolicy.usesQuote()) {\\n                quoteFee = takerPolicy.calculateFee(claimedInQuote, true);\\n            } else {\\n                baseFee = takerPolicy.calculateFee(claimedAmount, true);\\n            }\\n\\n            if (makerPolicy.usesQuote()) {\\n                quoteFee += makerPolicy.calculateFee(claimedInQuote, true);\\n            } else {\\n                int256 makeFee = makerPolicy.calculateFee(claimedAmount, false);\\n                baseFee += makeFee;\\n                claimedAmount = makeFee > 0 ? claimedAmount - uint256(makeFee) : claimedAmount + uint256(-makeFee);\\n            }\\n        }\\n\\n        Book.Order memory order = book.getOrder(tick, orderIndex);\\n        address provider = order.provider;\\n        if (provider == address(0)) provider = defaultProvider;\\n        if (quoteFee > 0) tokenOwed[provider][key.quote] += quoteFee.toUint256();\\n        if (baseFee > 0) tokenOwed[provider][key.base] += baseFee.toUint256();\\n\\n        if (order.pending == 0) _burn(OrderId.unwrap(id));\\n\\n        _accountDelta(key.base, -claimedAmount.toInt256());\\n\\n        key.hooks.afterClaim(id, claimedRaw, hookData);\\n\\n        emit Claim(id, claimedRaw);\\n    }\\n\\n    function collect(address provider, Currency currency) external {\\n        uint256 amount = tokenOwed[provider][currency];\\n        if (amount > 0) {\\n            tokenOwed[provider][currency] = 0;\\n            reservesOf[currency] -= amount;\\n            currency.transfer(provider, amount);\\n            emit Collect(provider, currency, amount);\\n        }\\n    }\\n\\n    function withdraw(Currency currency, address to, uint256 amount) external onlyByLocker {\\n        if (amount > 0) {\\n            _accountDelta(currency, amount.toInt256());\\n            reservesOf[currency] -= amount;\\n            currency.transfer(to, amount);\\n        }\\n    }\\n\\n    function settle(Currency currency) external payable onlyByLocker returns (uint256 paid) {\\n        uint256 reservesBefore = reservesOf[currency];\\n        reservesOf[currency] = currency.balanceOfSelf();\\n        paid = reservesOf[currency] - reservesBefore;\\n        // subtraction must be safe\\n        _accountDelta(currency, -(paid.toInt256()));\\n    }\\n\\n    function whitelist(address provider) external onlyOwner {\\n        isWhitelisted[provider] = true;\\n        emit Whitelist(provider);\\n    }\\n\\n    function delist(address provider) external onlyOwner {\\n        isWhitelisted[provider] = false;\\n        emit Delist(provider);\\n    }\\n\\n    function setDefaultProvider(address newDefaultProvider) public onlyOwner {\\n        address oldDefaultProvider = defaultProvider;\\n        defaultProvider = newDefaultProvider;\\n        emit SetDefaultProvider(oldDefaultProvider, newDefaultProvider);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function _accountDelta(Currency currency, int256 delta) internal {\\n        if (delta == 0) return;\\n\\n        address locker = Lockers.getCurrentLocker();\\n        int256 current = currencyDelta[locker][currency];\\n        int256 next = current + delta;\\n\\n        unchecked {\\n            if (next == 0) Lockers.decrementNonzeroDeltaCount();\\n            else if (current == 0) Lockers.incrementNonzeroDeltaCount();\\n        }\\n\\n        currencyDelta[locker][currency] = next;\\n    }\\n\\n    function load(bytes32 slot) external view returns (bytes32 value) {\\n        assembly {\\n            value := sload(slot)\\n        }\\n    }\\n\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory value) {\\n        value = new bytes(32 * nSlot);\\n\\n        assembly {\\n            for { let i := 0 } lt(i, nSlot) { i := add(i, 1) } {\\n                mstore(add(value, mul(add(i, 1), 32)), sload(add(startSlot, i)))\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xaa422ed699ddab51bbbe795de6a3d1a4e7537105110d255fda7de1c5f1a444b5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"../libraries/Book.sol\\\";\\nimport \\\"../libraries/Currency.sol\\\";\\nimport \\\"../libraries/OrderId.sol\\\";\\nimport \\\"../libraries/Tick.sol\\\";\\nimport \\\"../libraries/FeePolicy.sol\\\";\\nimport \\\"./IERC721Permit.sol\\\";\\nimport \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnit();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unit The unit of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unit,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param amount The order amount\\n     */\\n    event Make(BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param amount The order amount\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param canceledAmount The canceled amount\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param rawAmount The claimed amount\\n     */\\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param oldDefaultProvider The old default provider address\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed oldDefaultProvider, address indexed newDefaultProvider);\\n\\n    struct BookKey {\\n        Currency base;\\n        uint64 unit;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable amount\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the lowest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The lowest tick\\n     */\\n    function getLowest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the minimum tick greater than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the highest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next higher tick\\n     */\\n    function minGreaterThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\\n        /// @notice The limit order service provider address to collect fees\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxAmount;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 to;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param provider The provider address\\n     * @param currency The currency\\n     */\\n    function collect(address provider, Currency currency) external;\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0x70ed4c02f86ee08f773665a7b6a8540d78bf5197e71b3b10d7ff511a6acc2b36\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4d9d80441c88885319565bc701c35d50c73bfa100a49a5fc8e5102fb416aabf\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IBookManager.sol\\\";\\nimport \\\"../libraries/OrderId.sol\\\";\\nimport \\\"../libraries/Tick.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenAmount The amount that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledAmount The amount that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedAmount The amount that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb1e06b73d4db262613f7aaa1522cf72fe2dbbfea20e42990998cf833243603f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ILocker\\n * @notice Interface for the locker contract\\n */\\ninterface ILocker {\\n    /**\\n     * @notice Called by the book manager on `msg.sender` when a lock is acquired\\n     * @param data The data that was passed to the call to lock\\n     * @return Any data that you want to be returned from the lock call\\n     */\\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x15fdb667c09302c413ce0791ac30b25bebac076d8d9a662eab2d928dafa06c37\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Book.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@clober/library/contracts/SegmentedSegmentTree.sol\\\";\\n\\nimport \\\"../interfaces/IBookManager.sol\\\";\\nimport \\\"./Tick.sol\\\";\\nimport \\\"./OrderId.sol\\\";\\nimport \\\"./TotalClaimableMap.sol\\\";\\nimport \\\"./TickBitmap.sol\\\";\\n\\nlibrary Book {\\n    using Book for State;\\n    using TickBitmap for mapping(uint256 => uint256);\\n    using SegmentedSegmentTree for SegmentedSegmentTree.Core;\\n    using TotalClaimableMap for mapping(uint24 => uint256);\\n    using TickLibrary for *;\\n    using OrderIdLibrary for OrderId;\\n\\n    error ZeroAmount();\\n    error BookAlreadyOpened();\\n    error BookNotOpened();\\n    error OrdersOutOfRange();\\n    error QueueReplaceFailed();\\n    error TooLargeTakeAmount();\\n    error CancelFailed(uint64 maxCancelableAmount);\\n\\n    // @dev Due to the segment tree implementation, the maximum order size is 2 ** 15.\\n    uint40 internal constant MAX_ORDER = 2 ** 15; // 32768\\n    uint256 internal constant MAX_ORDER_M = 2 ** 15 - 1; // % 32768\\n\\n    struct Order {\\n        address provider;\\n        uint64 pending; // @dev unfilled amount + filled(claimable) amount\\n    }\\n\\n    struct Queue {\\n        SegmentedSegmentTree.Core tree;\\n        Order[] orders;\\n    }\\n\\n    struct State {\\n        IBookManager.BookKey key;\\n        mapping(Tick tick => Queue) queues;\\n        mapping(uint256 => uint256) tickBitmap;\\n        // @dev Four values of totalClaimable are stored in one uint256\\n        mapping(uint24 groupIndex => uint256) totalClaimableOf;\\n    }\\n\\n    function open(State storage self, IBookManager.BookKey calldata key) external {\\n        if (self.isOpened()) revert BookAlreadyOpened();\\n        self.key = key;\\n    }\\n\\n    function isOpened(State storage self) internal view returns (bool) {\\n        return self.key.unit != 0;\\n    }\\n\\n    function checkOpened(State storage self) internal view {\\n        if (!self.isOpened()) revert BookNotOpened();\\n    }\\n\\n    function depth(State storage self, Tick tick) internal view returns (uint64) {\\n        return self.queues[tick].tree.total() - self.totalClaimableOf.get(tick);\\n    }\\n\\n    function lowest(State storage self) internal view returns (Tick) {\\n        return self.tickBitmap.lowest().toTick();\\n    }\\n\\n    function minGreaterThan(State storage self, Tick tick) internal view returns (Tick) {\\n        return self.tickBitmap.minGreaterThan(tick.toUint24()).toTick();\\n    }\\n\\n    function isEmpty(State storage self) internal view returns (bool) {\\n        return self.tickBitmap.isEmpty();\\n    }\\n\\n    function _getOrder(State storage self, Tick tick, uint40 index) private view returns (Order storage) {\\n        return self.queues[tick].orders[index];\\n    }\\n\\n    function getOrder(State storage self, Tick tick, uint40 index) internal view returns (Order memory) {\\n        return _getOrder(self, tick, index);\\n    }\\n\\n    function make(State storage self, Tick tick, uint64 amount, address provider)\\n        external\\n        returns (uint40 orderIndex)\\n    {\\n        if (amount == 0) revert ZeroAmount();\\n        uint24 tickIndex = tick.toUint24();\\n        if (!self.tickBitmap.has(tickIndex)) self.tickBitmap.set(tickIndex);\\n\\n        Queue storage queue = self.queues[tick];\\n        // @dev Assume that orders.length cannot reach to type(uint40).max + 1.\\n        orderIndex = SafeCast.toUint40(queue.orders.length);\\n\\n        if (orderIndex >= MAX_ORDER) {\\n            unchecked {\\n                uint40 staleOrderIndex = orderIndex - MAX_ORDER;\\n                uint64 stalePendingAmount = queue.orders[staleOrderIndex].pending;\\n                if (stalePendingAmount > 0) {\\n                    // If the order is not settled completely, we cannot replace it\\n                    uint64 claimable = calculateClaimableRawAmount(self, tick, staleOrderIndex);\\n                    if (claimable != stalePendingAmount) revert QueueReplaceFailed();\\n                }\\n            }\\n\\n            // The stale order is settled completely, so remove it from the totalClaimableOf.\\n            // We can determine the stale order is claimable.\\n            uint64 staleOrderedAmount = queue.tree.get(orderIndex & MAX_ORDER_M);\\n            if (staleOrderedAmount > 0) self.totalClaimableOf.sub(tick, staleOrderedAmount);\\n        }\\n\\n        queue.tree.update(orderIndex & MAX_ORDER_M, amount);\\n\\n        queue.orders.push(Order({pending: amount, provider: provider}));\\n    }\\n\\n    /**\\n     * @notice Take orders from the book\\n     * @param self The book state\\n     * @param maxTakeAmount The maximum amount to take\\n     * @return takenAmount The actual amount to take\\n     */\\n    function take(State storage self, Tick tick, uint64 maxTakeAmount) external returns (uint64 takenAmount) {\\n        uint64 currentDepth = depth(self, tick);\\n        if (currentDepth > maxTakeAmount) {\\n            takenAmount = maxTakeAmount;\\n        } else {\\n            takenAmount = currentDepth;\\n            self.tickBitmap.clear(tick.toUint24());\\n        }\\n\\n        self.totalClaimableOf.add(tick, takenAmount);\\n    }\\n\\n    function cancel(State storage self, OrderId orderId, uint64 to)\\n        external\\n        returns (uint64 canceled, uint64 afterPending)\\n    {\\n        (, Tick tick, uint40 orderIndex) = orderId.decode();\\n        Queue storage queue = self.queues[tick];\\n        uint64 pending = queue.orders[orderIndex].pending;\\n        uint64 claimableRaw = calculateClaimableRawAmount(self, tick, orderIndex);\\n        afterPending = to + claimableRaw;\\n        unchecked {\\n            if (pending < afterPending) revert CancelFailed(pending - claimableRaw);\\n            canceled = pending - afterPending;\\n\\n            self.queues[tick].tree.update(\\n                orderIndex & MAX_ORDER_M, self.queues[tick].tree.get(orderIndex & MAX_ORDER_M) - canceled\\n            );\\n        }\\n        queue.orders[orderIndex].pending = afterPending;\\n\\n        if (depth(self, tick) == 0) {\\n            // clear() won't revert so we can cancel with to=0 even if the depth() is already zero\\n            // works even if bitmap is empty\\n            self.tickBitmap.clear(tick.toUint24());\\n        }\\n    }\\n\\n    function claim(State storage self, Tick tick, uint40 index) external returns (uint64 claimedRaw) {\\n        Order storage order = _getOrder(self, tick, index);\\n\\n        claimedRaw = calculateClaimableRawAmount(self, tick, index);\\n        unchecked {\\n            order.pending -= claimedRaw;\\n        }\\n    }\\n\\n    function calculateClaimableRawAmount(State storage self, Tick tick, uint40 index) public view returns (uint64) {\\n        uint64 orderAmount = self.getOrder(tick, index).pending;\\n\\n        Queue storage queue = self.queues[tick];\\n        // @dev Book logic always considers replaced orders as claimable.\\n        unchecked {\\n            if (uint256(index) + MAX_ORDER < queue.orders.length) return orderAmount;\\n            uint64 totalClaimable = self.totalClaimableOf.get(tick);\\n            uint64 rangeRight = _getClaimRangeRight(queue, index);\\n            if (rangeRight - orderAmount >= totalClaimable) return 0;\\n\\n            // -------- totalClaimable ---------|---\\n            // ------|---- orderAmount ----|--------\\n            //   rangeLeft           rangeRight\\n            if (rangeRight <= totalClaimable) return orderAmount;\\n            // -- totalClaimable --|----------------\\n            // ------|---- orderAmount ----|--------\\n            //   rangeLeft           rangeRight\\n            else return totalClaimable - (rangeRight - orderAmount);\\n        }\\n    }\\n\\n    function _getClaimRangeRight(Queue storage queue, uint256 orderIndex) private view returns (uint64 rangeRight) {\\n        uint256 l = queue.orders.length & MAX_ORDER_M;\\n        uint256 r = (orderIndex + 1) & MAX_ORDER_M;\\n        rangeRight = (l < r) ? queue.tree.query(l, r) : queue.tree.total() - queue.tree.query(r, l);\\n    }\\n}\\n\",\"keccak256\":\"0x823ce74647f9be9ab7c6f4d7f33050ca617a6d30e0d2dfe54e471a380cb02148\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := hash\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e4f39abaec1daacb64f566bfff0471c39f6c9e55d28bf8c95a5d36263ab4fe1\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity ^0.8.20;\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xa0b380059f60b44a905482f7a46ba6657a48c2b0fc3a3d92907fbf68c031ae7d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n// Modified by Clober Team\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address);\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return spender != address(0)\\n            && (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        // @dev MODIFIED: Define _setOwner\\n        _setOwner(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Override this function to set owner\\n     */\\n    function _setOwner(uint256 tokenId, address owner) internal virtual;\\n}\\n\",\"keccak256\":\"0x80c014727496ca50481d62028af4949908ac059d4ae282583a7328706c016552\",\"license\":\"MIT\"},\"contracts/libraries/ERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\n\\nimport {ERC721} from \\\"./ERC721.sol\\\";\\nimport {IERC721Permit} from \\\"../interfaces/IERC721Permit.sol\\\";\\n\\ncontract ERC721Permit is ERC721, IERC721Permit, EIP712 {\\n    // keccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\\n\\n    uint256 private constant _NONCE_MASK = uint256(0xffffffffffffffffffffffff) << 160;\\n\\n    // @dev tokenId => (nonce << 160 | owner)\\n    mapping(uint256 => uint256) private _nonceAndOwner;\\n\\n    constructor(string memory name_, string memory symbol_, string memory version_)\\n        ERC721(name_, symbol_)\\n        EIP712(name_, version_)\\n    {}\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external\\n        override\\n    {\\n        if (block.timestamp > deadline) revert PermitExpired();\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, _getAndIncrementNonce(tokenId), deadline))\\n        );\\n\\n        address owner = ownerOf(tokenId);\\n        if (spender == owner) revert InvalidSignature();\\n\\n        if (owner.code.length > 0) {\\n            if (IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) != 0x1626ba7e) {\\n                revert InvalidSignature();\\n            }\\n        } else {\\n            if (ECDSA.recover(digest, v, r, s) != owner) revert InvalidSignature();\\n        }\\n\\n        _approve(spender, tokenId, owner, true);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721Permit).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function nonces(uint256 id) external view returns (uint256) {\\n        return _nonceAndOwner[id] >> 160;\\n    }\\n\\n    function _getAndIncrementNonce(uint256 tokenId) internal returns (uint256 nonce) {\\n        uint256 nonceAndOwner = _nonceAndOwner[tokenId];\\n        nonce = nonceAndOwner >> 160;\\n        _nonceAndOwner[tokenId] = nonceAndOwner + (1 << 160);\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view override returns (address) {\\n        return address(uint160(_nonceAndOwner[tokenId]));\\n    }\\n\\n    function _setOwner(uint256 tokenId, address owner) internal override {\\n        _nonceAndOwner[tokenId] = (_nonceAndOwner[tokenId] & _NONCE_MASK) | uint256(uint160(owner));\\n    }\\n}\\n\",\"keccak256\":\"0xbc644cc36c0f93a023f36e1e780ccdb9ef10dce0434e039812b4756af44a2a5c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\\n    }\\n}\\n\",\"keccak256\":\"0xebc5eb1479644b4f0ac0ecd9de637b5f149b0a80e1d82ee787f38cc4cd1fa3bb\",\"license\":\"MIT\"},\"contracts/libraries/Hooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Lockers.sol\\\";\\nimport \\\"../interfaces/IBookManager.sol\\\";\\n\\n/// @author Clober\\n/// @author Modified from Uniswap V4 (https://github.com/Uniswap/v4-core/blob/1f350fa95e862ba8c56c8ff7e146d47c9043465e)\\n/// @notice V4 decides whether to invoke specific hooks by inspecting the leading bits of the address that\\n/// the hooks contract is deployed to.\\n/// For example, a hooks contract deployed to address: 0x9000000000000000000000000000000000000000\\n/// has leading bits '1001' which would cause the 'before open' and 'after make' hooks to be used.\\nlibrary Hooks {\\n    using Hooks for IHooks;\\n\\n    uint256 internal constant BEFORE_OPEN_FLAG = 1 << 159;\\n    uint256 internal constant AFTER_OPEN_FLAG = 1 << 158;\\n    uint256 internal constant BEFORE_MAKE_FLAG = 1 << 157;\\n    uint256 internal constant AFTER_MAKE_FLAG = 1 << 156;\\n    uint256 internal constant BEFORE_TAKE_FLAG = 1 << 155;\\n    uint256 internal constant AFTER_TAKE_FLAG = 1 << 154;\\n    uint256 internal constant BEFORE_CANCEL_FLAG = 1 << 153;\\n    uint256 internal constant AFTER_CANCEL_FLAG = 1 << 152;\\n    uint256 internal constant BEFORE_CLAIM_FLAG = 1 << 151;\\n    uint256 internal constant AFTER_CLAIM_FLAG = 1 << 150;\\n    uint256 internal constant NO_OP_FLAG = 1 << 149;\\n    uint256 internal constant ACCESS_LOCK_FLAG = 1 << 148;\\n\\n    bytes4 public constant NO_OP_SELECTOR = bytes4(keccak256(abi.encodePacked(\\\"NoOp\\\")));\\n\\n    struct Permissions {\\n        bool beforeOpen;\\n        bool afterOpen;\\n        bool beforeMake;\\n        bool afterMake;\\n        bool beforeTake;\\n        bool afterTake;\\n        bool beforeCancel;\\n        bool afterCancel;\\n        bool beforeClaim;\\n        bool afterClaim;\\n        bool noOp;\\n        bool accessLock;\\n    }\\n\\n    /// @notice Thrown if the address will not lead to the specified hook calls being called\\n    /// @param hooks The address of the hooks contract\\n    error HookAddressNotValid(address hooks);\\n\\n    /// @notice Hook did not return its selector\\n    error InvalidHookResponse();\\n\\n    /// @notice thrown when a hook call fails\\n    error FailedHookCall();\\n\\n    /// @notice Utility function intended to be used in hook constructors to ensure\\n    /// the deployed hooks address causes the intended hooks to be called\\n    /// @param permissions The hooks that are intended to be called\\n    /// @dev permissions param is memory as the function will be called from constructors\\n    function validateHookPermissions(IHooks self, Permissions memory permissions) internal pure {\\n        if (\\n            permissions.beforeOpen != self.hasPermission(BEFORE_OPEN_FLAG)\\n                || permissions.afterOpen != self.hasPermission(AFTER_OPEN_FLAG)\\n                || permissions.beforeMake != self.hasPermission(BEFORE_MAKE_FLAG)\\n                || permissions.afterMake != self.hasPermission(AFTER_MAKE_FLAG)\\n                || permissions.beforeTake != self.hasPermission(BEFORE_TAKE_FLAG)\\n                || permissions.afterTake != self.hasPermission(AFTER_TAKE_FLAG)\\n                || permissions.beforeCancel != self.hasPermission(BEFORE_CANCEL_FLAG)\\n                || permissions.afterCancel != self.hasPermission(AFTER_CANCEL_FLAG)\\n                || permissions.beforeClaim != self.hasPermission(BEFORE_CLAIM_FLAG)\\n                || permissions.afterClaim != self.hasPermission(AFTER_CLAIM_FLAG)\\n                || permissions.noOp != self.hasPermission(NO_OP_FLAG)\\n                || permissions.accessLock != self.hasPermission(ACCESS_LOCK_FLAG)\\n        ) {\\n            revert HookAddressNotValid(address(self));\\n        }\\n    }\\n\\n    /// @notice Ensures that the hook address includes at least one hook flag or is the 0 address\\n    /// @param hook The hook to verify\\n    function isValidHookAddress(IHooks hook) internal pure returns (bool) {\\n        // if NoOp is allowed, at least one of beforeMake, beforeTake, beforeCancel and beforeClaim should be allowed\\n        if (\\n            hook.hasPermission(NO_OP_FLAG) && !hook.hasPermission(BEFORE_MAKE_FLAG)\\n                && !hook.hasPermission(BEFORE_TAKE_FLAG) && !hook.hasPermission(BEFORE_CANCEL_FLAG)\\n                && !hook.hasPermission(BEFORE_CLAIM_FLAG)\\n        ) {\\n            return false;\\n        }\\n        // If a hook contract is set, it must have at least 1 flag set\\n        return address(hook) == address(0) || uint160(address(hook)) >= ACCESS_LOCK_FLAG;\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook\\n    /// @return expectedSelector The selector that the hook is expected to return\\n    /// @return selector The selector that the hook actually returned\\n    function _callHook(IHooks self, bytes memory data) private returns (bytes4 expectedSelector, bytes4 selector) {\\n        bool set = Lockers.setCurrentHook(self);\\n\\n        assembly {\\n            expectedSelector := mload(add(data, 0x20))\\n        }\\n\\n        (bool success, bytes memory result) = address(self).call(data);\\n        if (!success) _revert(result);\\n\\n        selector = abi.decode(result, (bytes4));\\n\\n        // We only want to clear the current hook if it was set in setCurrentHook in this execution frame.\\n        if (set) Lockers.clearCurrentHook();\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook\\n    function callHook(IHooks self, bytes memory data) internal {\\n        (bytes4 expectedSelector, bytes4 selector) = _callHook(self, data);\\n\\n        if (selector != expectedSelector) revert InvalidHookResponse();\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook\\n    /// @return shouldExecute Whether the operation should be executed or nooped\\n    function callHookNoopable(IHooks self, bytes memory data) internal returns (bool shouldExecute) {\\n        (bytes4 expectedSelector, bytes4 selector) = _callHook(self, data);\\n\\n        if (selector == expectedSelector) shouldExecute = true;\\n        else if (selector == NO_OP_SELECTOR && self.hasPermission(NO_OP_FLAG)) shouldExecute = false;\\n        else revert InvalidHookResponse();\\n    }\\n\\n    /// @notice calls beforeOpen hook if permissioned and validates return value\\n    function beforeOpen(IHooks self, IBookManager.BookKey memory key, bytes calldata hookData) internal {\\n        if (self.hasPermission(BEFORE_OPEN_FLAG)) {\\n            self.callHook(abi.encodeWithSelector(IHooks.beforeOpen.selector, msg.sender, key, hookData));\\n        }\\n    }\\n\\n    /// @notice calls afterOpen hook if permissioned and validates return value\\n    function afterOpen(IHooks self, IBookManager.BookKey memory key, bytes calldata hookData) internal {\\n        if (self.hasPermission(AFTER_OPEN_FLAG)) {\\n            self.callHook(abi.encodeWithSelector(IHooks.afterOpen.selector, msg.sender, key, hookData));\\n        }\\n    }\\n\\n    /// @notice calls beforeMake hook if permissioned and validates return value\\n    function beforeMake(IHooks self, IBookManager.MakeParams memory params, bytes calldata hookData)\\n        internal\\n        returns (bool shouldExecute)\\n    {\\n        if (self.hasPermission(BEFORE_MAKE_FLAG)) {\\n            shouldExecute =\\n                self.callHookNoopable(abi.encodeWithSelector(IHooks.beforeMake.selector, msg.sender, params, hookData));\\n        } else {\\n            shouldExecute = true;\\n        }\\n    }\\n\\n    /// @notice calls afterMake hook if permissioned and validates return value\\n    function afterMake(IHooks self, IBookManager.MakeParams memory params, OrderId orderId, bytes calldata hookData)\\n        internal\\n    {\\n        if (self.hasPermission(AFTER_MAKE_FLAG)) {\\n            self.callHook(abi.encodeWithSelector(IHooks.afterMake.selector, msg.sender, params, orderId, hookData));\\n        }\\n    }\\n\\n    /// @notice calls beforeTake hook if permissioned and validates return value\\n    function beforeTake(IHooks self, IBookManager.TakeParams memory params, bytes calldata hookData)\\n        internal\\n        returns (bool shouldExecute)\\n    {\\n        if (self.hasPermission(BEFORE_TAKE_FLAG)) {\\n            shouldExecute =\\n                self.callHookNoopable(abi.encodeWithSelector(IHooks.beforeTake.selector, msg.sender, params, hookData));\\n        } else {\\n            shouldExecute = true;\\n        }\\n    }\\n\\n    /// @notice calls afterTake hook if permissioned and validates return value\\n    function afterTake(IHooks self, IBookManager.TakeParams memory params, uint64 takenAmount, bytes calldata hookData)\\n        internal\\n    {\\n        if (self.hasPermission(AFTER_TAKE_FLAG)) {\\n            self.callHook(abi.encodeWithSelector(IHooks.afterTake.selector, msg.sender, params, takenAmount, hookData));\\n        }\\n    }\\n\\n    /// @notice calls beforeCancel hook if permissioned and validates return value\\n    function beforeCancel(IHooks self, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        internal\\n        returns (bool shouldExecute)\\n    {\\n        if (self.hasPermission(BEFORE_CANCEL_FLAG)) {\\n            shouldExecute = self.callHookNoopable(\\n                abi.encodeWithSelector(IHooks.beforeCancel.selector, msg.sender, params, hookData)\\n            );\\n        } else {\\n            shouldExecute = true;\\n        }\\n    }\\n\\n    /// @notice calls afterCancel hook if permissioned and validates return value\\n    function afterCancel(\\n        IHooks self,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledAmount,\\n        bytes calldata hookData\\n    ) internal {\\n        if (self.hasPermission(AFTER_CANCEL_FLAG)) {\\n            self.callHook(\\n                abi.encodeWithSelector(IHooks.afterCancel.selector, msg.sender, params, canceledAmount, hookData)\\n            );\\n        }\\n    }\\n\\n    /// @notice calls beforeClaim hook if permissioned and validates return value\\n    function beforeClaim(IHooks self, OrderId orderId, bytes calldata hookData) internal returns (bool shouldExecute) {\\n        if (self.hasPermission(BEFORE_CLAIM_FLAG)) {\\n            shouldExecute = self.callHookNoopable(\\n                abi.encodeWithSelector(IHooks.beforeClaim.selector, msg.sender, orderId, hookData)\\n            );\\n        } else {\\n            shouldExecute = true;\\n        }\\n    }\\n\\n    /// @notice calls afterClaim hook if permissioned and validates return value\\n    function afterClaim(IHooks self, OrderId orderId, uint64 claimedAmount, bytes calldata hookData) internal {\\n        if (self.hasPermission(AFTER_CLAIM_FLAG)) {\\n            self.callHook(\\n                abi.encodeWithSelector(IHooks.afterClaim.selector, msg.sender, orderId, claimedAmount, hookData)\\n            );\\n        }\\n    }\\n\\n    function hasPermission(IHooks self, uint256 flag) internal pure returns (bool) {\\n        return uint256(uint160(address(self))) & flag != 0;\\n    }\\n\\n    /// @notice bubble up revert if present. Else throw FailedHookCall\\n    function _revert(bytes memory result) private pure {\\n        if (result.length > 0) {\\n            assembly {\\n                revert(add(0x20, result), mload(result))\\n            }\\n        } else {\\n            revert FailedHookCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c9dc249450f7dd0653283a462372b99802982d01a328edf18c4d8dc9319b39f\",\"license\":\"MIT\"},\"contracts/libraries/Lockers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.23;\\n\\nimport \\\"../interfaces/IHooks.sol\\\";\\n\\n/// @author Clober\\n/// @author Modified from Uniswap V4 (https://github.com/Uniswap/v4-core/tree/98680ebc1a654120e995d53a5b10ec6fe153066f)\\n/// @notice Contains data about pool lockers.\\n\\n/// @dev This library manages a custom storage implementation for a queue\\n///      that tracks current lockers. The \\\"sentinel\\\" storage slot for this data structure,\\n///      always passed in as IPoolManager.LockData storage self, stores not just the current\\n///      length of the queue but also the global count of non-zero deltas across all lockers.\\n///      The values of the data structure start at OFFSET, and each value is a locker address.\\nlibrary Lockers {\\n    /// struct LockData {\\n    ///     /// @notice The current number of active lockers\\n    ///     /// @dev This value starts with 1 to make dirty slot\\n    ///     uint128 nextLength;\\n    ///     /// @notice The total number of nonzero deltas over all active + completed lockers\\n    ///     uint128 nonzeroDeltaCount;\\n    /// }\\n    uint256 internal constant LOCK_DATA_SLOT = uint256(keccak256(\\\"LockData\\\"));\\n\\n    uint256 internal constant LOCKERS_SLOT = uint256(keccak256(\\\"Lockers\\\"));\\n\\n    // The number of slots per item in the lockers array\\n    uint256 internal constant LOCKER_STRUCT_SIZE = 2;\\n\\n    uint256 internal constant HOOK_ADDRESS_SLOT = uint256(keccak256(\\\"HookAddress\\\"));\\n\\n    uint256 internal constant NONZERO_DELTA_COUNT_OFFSET = 2 ** 128;\\n\\n    uint256 internal constant EMPTY_ADDRESS_STORAGE = 1 << 255;\\n\\n    function initialize() internal {\\n        clear();\\n        uint256 lockersSlot = LOCKERS_SLOT;\\n        // @dev To reduce lock sstore gas, we set 5 lockers storages dirty\\n        assembly {\\n            for { let i := 0 } lt(i, 5) { i := add(i, 1) } {\\n                sstore(lockersSlot, EMPTY_ADDRESS_STORAGE)\\n                sstore(add(lockersSlot, 1), EMPTY_ADDRESS_STORAGE)\\n                lockersSlot := add(lockersSlot, LOCKER_STRUCT_SIZE)\\n            }\\n        }\\n    }\\n\\n    /// @dev Pushes a locker onto the end of the queue, and updates the sentinel storage slot.\\n    function push(address locker, address lockCaller) internal {\\n        // read current value from the sentinel storage slot\\n        uint128 l = length();\\n        unchecked {\\n            // not in assembly because OFFSET is in the library scope\\n            uint256 indexToWrite = LOCKERS_SLOT + (l * LOCKER_STRUCT_SIZE);\\n            uint256 lockDataSlot = LOCK_DATA_SLOT;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // in the next storage slot, write the locker and lockCaller\\n                sstore(indexToWrite, locker)\\n                sstore(add(indexToWrite, 1), lockCaller)\\n\\n                // increase the length\\n                sstore(lockDataSlot, add(sload(lockDataSlot), 1))\\n            }\\n        }\\n    }\\n\\n    function lockData() internal view returns (uint128 l, uint128 nonzeroDeltaCount) {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            let data := sload(slot)\\n            l := sub(data, 1)\\n            nonzeroDeltaCount := shr(128, data)\\n        }\\n    }\\n\\n    function length() internal view returns (uint128 l) {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            l := sub(sload(slot), 1)\\n        }\\n    }\\n\\n    /// @dev Pops a locker off the end of the queue. Note that no storage gets cleared.\\n    function pop() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, sub(sload(slot), 1))\\n        }\\n    }\\n\\n    function clear() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, 1)\\n        }\\n    }\\n\\n    function getLocker(uint256 i) internal view returns (address locker) {\\n        unchecked {\\n            // not in assembly because OFFSET is in the library scope\\n            uint256 position = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                locker := sload(position)\\n            }\\n        }\\n    }\\n\\n    function getLockCaller(uint256 i) internal view returns (address locker) {\\n        unchecked {\\n            // not in assembly because OFFSET is in the library scope\\n            uint256 position = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE + 1);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                locker := sload(position)\\n            }\\n        }\\n    }\\n\\n    function getCurrentLocker() internal view returns (address) {\\n        uint128 l = length();\\n        unchecked {\\n            return l > 0 ? getLocker(l - 1) : address(0);\\n        }\\n    }\\n\\n    function getCurrentLockCaller() internal view returns (address) {\\n        uint128 l = length();\\n        unchecked {\\n            return l > 0 ? getLockCaller(l - 1) : address(0);\\n        }\\n    }\\n\\n    function incrementNonzeroDeltaCount() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, add(sload(slot), NONZERO_DELTA_COUNT_OFFSET))\\n        }\\n    }\\n\\n    function decrementNonzeroDeltaCount() internal {\\n        uint256 slot = LOCK_DATA_SLOT;\\n        assembly {\\n            sstore(slot, sub(sload(slot), NONZERO_DELTA_COUNT_OFFSET))\\n        }\\n    }\\n\\n    function getCurrentHook() internal view returns (IHooks currentHook) {\\n        return IHooks(getHook(length()));\\n    }\\n\\n    function getHook(uint256 i) internal view returns (address hook) {\\n        unchecked {\\n            uint256 position = HOOK_ADDRESS_SLOT + i;\\n            assembly {\\n                hook := sload(position)\\n            }\\n        }\\n    }\\n\\n    function setCurrentHook(IHooks currentHook) internal returns (bool set) {\\n        // Set the hook address for the current locker if the address is 0.\\n        // If the address is nonzero, a hook has already been set for this lock, and is not allowed to be updated or cleared at the end of the call.\\n        if (address(getCurrentHook()) == address(0)) {\\n            unchecked {\\n                uint256 indexToWrite = HOOK_ADDRESS_SLOT + length();\\n                assembly {\\n                    sstore(indexToWrite, currentHook)\\n                }\\n            }\\n            return true;\\n        }\\n    }\\n\\n    function clearCurrentHook() internal {\\n        unchecked {\\n            uint256 indexToWrite = HOOK_ADDRESS_SLOT + length();\\n            assembly {\\n                sstore(indexToWrite, EMPTY_ADDRESS_STORAGE)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0604ff0faeeacb55c1913dc360eaf45c91fd636f6e7b16cfa92e888eefbbf3c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SignificantBit.sol\\\";\\n\\nlibrary Math {\\n    using SignificantBit for uint256;\\n\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (int256) {\\n        require(x > 0);\\n\\n        uint8 msb = x.mostSignificantBit();\\n\\n        if (msb > 128) x >>= msb - 128;\\n        else if (msb < 128) x <<= 128 - msb;\\n\\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\\n\\n        int256 bit = 0x80000000000000000000000000000000;\\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result |= bit;\\n                x = (x >> 1) - 0x80000000000000000000000000000000;\\n            }\\n            bit >>= 1;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe7597fa634f5bd517236d0f003ebbbe03eed6fc77a07907870ac21c803fa95fa\",\"license\":\"-\"},\"contracts/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Tick.sol\\\";\\nimport \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := shr(40, id)\\n            index := id\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := shr(40, id)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := id\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x68d432fc1e330f0678b675beaf34889263d7c7411d19ff5c5654f4eca8ca1e42\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SignificantBit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignificantBit {\\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\\n    bytes internal constant DEBRUIJN_INDEX =\\n        hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n     * @notice Finds the index of the least significant bit.\\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\\n     * @return ret The index of the least significant bit.\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 index;\\n        assembly {\\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\\n        }\\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 msb;\\n        assembly {\\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(5, gt(x, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(4, gt(x, 0xFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(3, gt(x, 0xFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(2, gt(x, 0xF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(1, gt(x, 0x3))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := gt(x, 0x1)\\n            msb := or(msb, f)\\n        }\\n        return uint8(msb);\\n    }\\n}\\n\",\"keccak256\":\"0x8dae2286bc0000fa7607b781f9ad044e81b48d10742cde8ecc050e58b1390c9b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for uint256;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 5800731190957938;\\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function toTick(uint24 x) internal pure returns (Tick t) {\\n        assembly {\\n            t := sub(x, 0x800000)\\n        }\\n    }\\n\\n    function toUint24(Tick tick) internal pure returns (uint24 r) {\\n        assembly {\\n            r := add(tick, 0x800000)\\n        }\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        int256 log = price.log2();\\n        int256 tick = log / 49089913871092318234424474366155889;\\n        int256 tickLow = (\\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\\n        ) / 49089913871092318234424474366155889;\\n\\n        if (tick == tickLow) return Tick.wrap(int24(tick));\\n\\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\\n\\n        return Tick.wrap(int24(tickLow));\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 128;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\\n        }\\n        if (tickValue > 0) price = type(uint256).max / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0x29628ae108b4751ec75ccebed056f9f31cb3dfeea003e31e02ede78baad4a3dd\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SignificantBit.sol\\\";\\n\\nlibrary TickBitmap {\\n    using SignificantBit for uint256;\\n\\n    error EmptyError();\\n    error AlreadyExistsError();\\n\\n    uint256 public constant B0_BITMAP_KEY = uint256(keccak256(\\\"TickBitmap\\\"));\\n    uint256 public constant MAX_UINT_256_MINUS_1 = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;\\n\\n    function has(mapping(uint256 => uint256) storage self, uint24 value) internal view returns (bool) {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 mask = 1 << b2;\\n        return self[b0b1] & mask == mask;\\n    }\\n\\n    function isEmpty(mapping(uint256 => uint256) storage self) internal view returns (bool) {\\n        return self[B0_BITMAP_KEY] == 0;\\n    }\\n\\n    function _split(uint24 value) private pure returns (uint256 b0b1, uint8 b2) {\\n        assembly {\\n            b2 := value\\n            b0b1 := shr(8, value)\\n        }\\n    }\\n\\n    function lowest(mapping(uint256 => uint256) storage self) internal view returns (uint24) {\\n        if (isEmpty(self)) revert EmptyError();\\n\\n        uint256 b0 = self[B0_BITMAP_KEY].leastSignificantBit();\\n        uint256 b0b1 = (b0 << 8) | (self[~b0].leastSignificantBit());\\n        uint256 b2 = self[b0b1].leastSignificantBit();\\n        return uint24((b0b1 << 8) | b2);\\n    }\\n\\n    function set(mapping(uint256 => uint256) storage self, uint24 value) internal {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 mask = 1 << b2;\\n        uint256 b2Bitmap = self[b0b1];\\n        if (b2Bitmap & mask > 0) revert AlreadyExistsError();\\n\\n        self[b0b1] = b2Bitmap | mask;\\n        if (b2Bitmap == 0) {\\n            mask = 1 << (b0b1 & 0xff);\\n            uint256 b1BitmapKey = ~(b0b1 >> 8);\\n            uint256 b1Bitmap = self[b1BitmapKey];\\n            self[b1BitmapKey] = b1Bitmap | mask;\\n\\n            if (b1Bitmap == 0) self[B0_BITMAP_KEY] = self[B0_BITMAP_KEY] | (1 << ~b1BitmapKey);\\n        }\\n    }\\n\\n    function clear(mapping(uint256 => uint256) storage self, uint24 value) internal {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 mask = 1 << b2;\\n        uint256 b2Bitmap = self[b0b1];\\n\\n        self[b0b1] = b2Bitmap & (~mask);\\n        if (b2Bitmap == mask) {\\n            mask = 1 << (b0b1 & 0xff);\\n            uint256 b1BitmapKey = ~(b0b1 >> 8);\\n            uint256 b1Bitmap = self[b1BitmapKey];\\n\\n            self[b1BitmapKey] = b1Bitmap & (~mask);\\n            if (mask == b1Bitmap) {\\n                mask = 1 << (~b1BitmapKey);\\n                self[B0_BITMAP_KEY] = self[B0_BITMAP_KEY] & (~mask);\\n            }\\n        }\\n    }\\n\\n    function minGreaterThan(mapping(uint256 => uint256) storage self, uint24 value) internal view returns (uint24) {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 b2Bitmap = (MAX_UINT_256_MINUS_1 << b2) & self[b0b1];\\n        if (b2Bitmap == 0) {\\n            uint256 b0 = b0b1 >> 8;\\n            uint256 b1Bitmap = (MAX_UINT_256_MINUS_1 << (b0b1 & 0xff)) & self[~b0];\\n            if (b1Bitmap == 0) {\\n                uint256 b0Bitmap = (MAX_UINT_256_MINUS_1 << b0) & self[B0_BITMAP_KEY];\\n                if (b0Bitmap == 0) return 0;\\n                b0 = b0Bitmap.leastSignificantBit();\\n                b1Bitmap = self[~b0];\\n            }\\n            b0b1 = (b0 << 8) | b1Bitmap.leastSignificantBit();\\n            b2Bitmap = self[b0b1];\\n        }\\n        b2 = b2Bitmap.leastSignificantBit();\\n        return uint24((b0b1 << 8) | b2);\\n    }\\n}\\n\",\"keccak256\":\"0x6ea1043f87eb5c4b811d3522f9b862e4d43b46d5e24114a94dcfe6c17c333d8b\",\"license\":\"-\"},\"contracts/libraries/TotalClaimableMap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@clober/library/contracts/DirtyUint64.sol\\\";\\nimport \\\"@clober/library/contracts/PackedUint256.sol\\\";\\n\\nimport \\\"./Tick.sol\\\";\\n\\nlibrary TotalClaimableMap {\\n    using DirtyUint64 for uint64;\\n    using PackedUint256 for uint256;\\n\\n    // @dev n should be less than type(uint64).max due to the dirty storage logic.\\n    function add(mapping(uint24 => uint256) storage self, Tick tick, uint64 n) internal {\\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\\n        uint256 group = self[groupIndex];\\n        // @notice Be aware of dirty storage add logic\\n        self[groupIndex] = group.update64Unsafe(\\n            elementIndex, // elementIndex < 4\\n            group.get64Unsafe(elementIndex).addClean(n)\\n        );\\n    }\\n\\n    function sub(mapping(uint24 => uint256) storage self, Tick tick, uint64 n) internal {\\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\\n        self[groupIndex] = self[groupIndex].sub64Unsafe(elementIndex, n);\\n    }\\n\\n    function get(mapping(uint24 => uint256) storage self, Tick tick) internal view returns (uint64) {\\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\\n        return self[groupIndex].get64Unsafe(elementIndex).toClean();\\n    }\\n\\n    function _splitTick(Tick tick) internal pure returns (uint24 groupIndex, uint8 elementIndex) {\\n        uint256 casted = uint24(Tick.unwrap(tick));\\n        assembly {\\n            groupIndex := shr(2, casted) // div 4\\n            elementIndex := and(casted, 3) // mod 4\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b9586f295c3d92d0617f6629b940c5a8c35f7da368eb614e7e75f3e525863d8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061034e5760003560e01c80637b305c42116101bb578063c87b56dd116100f7578063e8a3d48511610095578063f2fde38b1161006f578063f2fde38b14610bd2578063f86a11b314610bf2578063fcc8fc9b14610c12578063fefc7c5114610c3257600080fd5b8063e8a3d48514610b55578063e985e9c514610b6a578063f035079914610bb357600080fd5b8063d83747e8116100d1578063d83747e814610ad7578063d9caed1214610af7578063de4478ec14610b17578063e30c397814610b3757600080fd5b8063c87b56dd146109cf578063d09ef241146109ef578063d68f4dd114610a4c57600080fd5b80639b19251a11610164578063a12ef25e1161013e578063a12ef25e14610937578063a22cb46514610957578063a54b283114610977578063b88d4fde146109af57600080fd5b80639b19251a146108175780639b22917d146108375780639ca179981461091757600080fd5b80639363cb8a116101955780639363cb8a146107b557806393c85a21146107d557806395d89b411461080257600080fd5b80637b305c421461073c57806384b0196e1461076f5780638da5cb5b1461079757600080fd5b80633b9500b01161028a5780636a256b291161023357806370a082311161020d57806370a08231146106d2578063715018a6146106f257806379ba5097146107075780637ac2ff7b1461071c57600080fd5b80636a256b291461068a5780636b2cc75c1461069d5780636c0360eb146106bd57600080fd5b806342842e0e1161026457806342842e0e146106085780634c02bf0b146106285780636352211e1461066a57600080fd5b80633b9500b0146105775780633e547b061461059757806341a8bb88146105cf57600080fd5b80631dbef488116102f757806330adf81f116102d157806330adf81f146104de5780633644e5151461051257806338926b6d146105275780633af32abf1461054757600080fd5b80631dbef4881461046957806323b872dd1461049e5780632f584a6d146104be57600080fd5b8063095ea7b311610328578063095ea7b3146103e9578063141a468c1461040b57806314d6a9eb1461044957600080fd5b806301ffc9a71461035a57806306fdde031461038f578063081812fc146103b157600080fd5b3661035557005b600080fd5b34801561036657600080fd5b5061037a610375366004614dec565b610c52565b60405190151581526020015b60405180910390f35b34801561039b57600080fd5b506103a4610c96565b6040516103869190614e59565b3480156103bd57600080fd5b506103d16103cc366004614e6c565b610d28565b6040516001600160a01b039091168152602001610386565b3480156103f557600080fd5b50610409610404366004614e9a565b610d51565b005b34801561041757600080fd5b5061043b610426366004614e6c565b60009081526009602052604090205460a01c90565b604051908152602001610386565b34801561045557600080fd5b5061043b610464366004614f0f565b610d60565b34801561047557600080fd5b50610489610484366004614f6a565b610fc2565b60408051928352602083019190915201610386565b3480156104aa57600080fd5b506104096104b9366004614fae565b6113a5565b3480156104ca57600080fd5b506104096104d9366004614fae565b611449565b3480156104ea57600080fd5b5061043b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b34801561051e57600080fd5b5061043b611459565b34801561053357600080fd5b5061043b610542366004614fef565b611468565b34801561055357600080fd5b5061037a610562366004615022565b60106020526000908152604090205460ff1681565b34801561058357600080fd5b5061048961059236600461503f565b61184b565b3480156105a357600080fd5b5061043b6105b2366004615066565b601160209081526000928352604080842090915290825290205481565b3480156105db57600080fd5b506105ef6105ea3660046150c8565b611b33565b60405167ffffffffffffffff9091168152602001610386565b34801561061457600080fd5b50610409610623366004614fae565b611b55565b34801561063457600080fd5b50600080516020615e8d83398151915254604080516001600160801b03600019840116815260809290921c602083015201610386565b34801561067657600080fd5b506103d1610685366004614e6c565b611b70565b61043b610698366004615022565b611b7b565b3480156106a957600080fd5b506104096106b8366004615022565b611be4565b3480156106c957600080fd5b506103a4611c35565b3480156106de57600080fd5b5061043b6106ed366004615022565b611cc3565b3480156106fe57600080fd5b50610409611d24565b34801561071357600080fd5b50610409611d38565b34801561072857600080fd5b506104096107373660046150fb565b611d7c565b34801561074857600080fd5b5061075c61075736600461515d565b611fe1565b60405160029190910b8152602001610386565b34801561077b57600080fd5b50610784612002565b6040516103869796959493929190615178565b3480156107a357600080fd5b506005546001600160a01b03166103d1565b3480156107c157600080fd5b5061075c6107d03660046150c8565b612064565b3480156107e157600080fd5b5061043b6107f0366004615022565b600e6020526000908152604090205481565b34801561080e57600080fd5b506103a4612086565b34801561082357600080fd5b50610409610832366004615022565b612095565b34801561084357600080fd5b5061090a61085236600461515d565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506001600160c01b03166000908152600f6020908152604091829020825160c08101845281546001600160a01b03808216835267ffffffffffffffff600160a01b92839004169483019490945260018301548085169583019590955262ffffff94819004851660608301526002909201549283166080820152910490911660a082015290565b604051610386919061522d565b34801561092357600080fd5b506103a4610932366004615294565b6120e9565b34801561094357600080fd5b50610409610952366004615066565b612234565b34801561096357600080fd5b506104096109723660046152d0565b61230d565b34801561098357600080fd5b5061043b610992366004615066565b600d60209081526000928352604080842090915290825290205481565b3480156109bb57600080fd5b506104096109ca366004615372565b612318565b3480156109db57600080fd5b506103a46109ea366004614e6c565b61232f565b3480156109fb57600080fd5b50610a0f610a0a366004614e6c565b612396565b6040805182516001600160a01b0316815260208084015167ffffffffffffffff908116918301919091529282015190921690820152606001610386565b348015610a5857600080fd5b50610ab7610a67366004614e6c565b6002027f722b431450ce53c44434ec138439e45a0639fe031b803ee019b776fae5cfa2b08101547f722b431450ce53c44434ec138439e45a0639fe031b803ee019b776fae5cfa2b1909101549091565b604080516001600160a01b03938416815292909116602083015201610386565b348015610ae357600080fd5b50600c546103d1906001600160a01b031681565b348015610b0357600080fd5b50610409610b12366004614fae565b6124d3565b348015610b2357600080fd5b50610409610b32366004615022565b612531565b348015610b4357600080fd5b506006546001600160a01b03166103d1565b348015610b6157600080fd5b506103a461258b565b348015610b7657600080fd5b5061037a610b85366004615066565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b348015610bbf57600080fd5b5061043b610bce366004614e6c565b5490565b348015610bde57600080fd5b50610409610bed366004615022565b612598565b348015610bfe57600080fd5b506103a4610c0d366004615421565b612609565b348015610c1e57600080fd5b5061037a610c2d36600461515d565b612686565b348015610c3e57600080fd5b50610409610c4d366004615443565b6126a7565b60006001600160e01b031982167f6831a4fd000000000000000000000000000000000000000000000000000000001480610c905750610c9082612aa5565b92915050565b606060008054610ca590615485565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd190615485565b8015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b5050505050905090565b6000610d3382612b40565b506000828152600360205260409020546001600160a01b0316610c90565b610d5c828233612b79565b5050565b6000610d6b33612b86565b610d8d610d85853560009081526009602052604090205490565b338635612c40565b8335604090811c6000908152600f602090815290829020825160c08101845281546001600160a01b03808216835267ffffffffffffffff600160a01b92839004169483019490945260018301548085169583019590955262ffffff9481900485166060830152600283015493841660808301819052930490931660a08401529190610e1a90878787612cbd565b610e2957600092505050610fbb565b60008073__$5a2ea6afd4f7634e810a44a1cab25e81c7$__633ac502c1858a35610e5960408d0160208e016154cf565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915267ffffffffffffffff1660448201526064016040805180830381865af4158015610eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecf91906154ec565b91509150826020015167ffffffffffffffff168267ffffffffffffffff16029450610f03836060015162ffffff1660171c90565b15610f28576060830151600090610f219062ffffff16876001612d42565b9590950194505b8067ffffffffffffffff16600003610f4457610f448835612dc5565b610f5b836040015186610f5690615531565b612e00565b6080830151610f76906001600160a01b031689848a8a612ef6565b60405167ffffffffffffffff831681528835907f0c6ba7ef5064094c17cce013aa4c617a23e2582f867774d07a5931de43b85d729060200160405180910390a2505050505b9392505050565b600080610fce33612b86565b6000610fe261012087016101008801615022565b6001600160a01b03161415801561102957506010600061100a61012088016101008901615022565b6001600160a01b0316815260208101919091526040016000205460ff16155b156110835761104061012086016101008701615022565b6040517f962715990000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b61109e61109660e0870160c0880161554d565b60020b612f7f565b60006110b76110b236889003880188615625565b612fdb565b6001600160c01b0381166000908152600f602052604090209091506110db8161300e565b6111106110ed36899003890189615641565b87876110ff60a08c0160808d01615022565b6001600160a01b0316929190613057565b6111225760008093509350505061139d565b600073__$5a2ea6afd4f7634e810a44a1cab25e81c7$__63ffa0afb58361114f60e08c0160c08d0161554d565b6111606101008d0160e08e016154cf565b6111726101208e016101008f01615022565b6040516001600160e01b031960e087901b168152600481019490945260029290920b602484015267ffffffffffffffff1660448301526001600160a01b03166064820152608401602060405180830381865af41580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa91906156c5565b905061122c8361121060e08b0160c08c0161554d565b60409190911b60289190911b67ffffff00000000001601820190565b9450600061124060408a0160208b016154cf565b67ffffffffffffffff1661125b6101008b0160e08c016154cf565b67ffffffffffffffff1602945084905061128961127e60808b0160608c016156ec565b62ffffff1660171c90565b156112b5576112b08560006112a460808d0160608e016156ec565b62ffffff169190612d42565b019350835b6112ce6112c860608b0160408c01615022565b82612e00565b6112d83387613087565b6113156112ea368b90038b018b615641565b878a8a8d60000160800160208101906113039190615022565b6001600160a01b031693929190613105565b336001600160c01b0385167f4b4e05fe5b3ea8a827cc25af0e5e91296810dcdd8a15094f6c1cd92290e5262261135160e08d0160c08e0161554d565b858d60e001602081019061136591906154cf565b6040805160029490940b845264ffffffffff909216602084015267ffffffffffffffff169082015260600160405180910390a3505050505b935093915050565b6001600160a01b0382166113cf57604051633250574960e11b81526000600482015260240161107a565b60006113dc838333613145565b9050836001600160a01b0316816001600160a01b031614611443576040517f64283d7b0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152602482018490528216604482015260640161107a565b50505050565b611454838383612c40565b505050565b600061146361324b565b905090565b600061147333612b86565b60008481526009602052604090205461148d903386612c40565b604084811c6000908152600f602090815290829020825160c08101845281546001600160a01b03808216835267ffffffffffffffff600160a01b92839004169483019490945260018301548085169583019590955262ffffff9481900485166060830152600283015493841660808301819052930490931660a0840152602887901c92879261151e90848989613376565b61152f576000945050505050610fbb565b6040517fc49d262100000000000000000000000000000000000000000000000000000000815260048101839052600285900b602482015264ffffffffff8416604482015260009073__$5a2ea6afd4f7634e810a44a1cab25e81c7$__9063c49d262190606401602060405180830381865af41580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190615707565b6020830151909150600090819067ffffffffffffffff808516911602611601600289900b82846133b5565b606086015160a0870151919a509061161e62ffffff821660171c90565b1561163b5761163462ffffff8216846001612d42565b945061164f565b61164c62ffffff82168c6001612d42565b93505b61165e8262ffffff1660171c90565b156116855761167462ffffff8316846001612d42565b61167e9086615724565b94506116d3565b600061169762ffffff84168d83612d42565b90506116a38186615724565b9450600081136116c5576116b681615531565b6116c0908d615744565b6116cf565b6116cf818d615757565b9b50505b50600091506116e590508689896133d8565b80519091506001600160a01b0381166117065750600c546001600160a01b03165b6000841315611759576117188461342d565b6001600160a01b0380831660009081526011602090815260408083208b82015190941683529290529081208054909190611753908490615744565b90915550505b60008313156117aa5761176b8361342d565b6001600160a01b0380831660009081526011602090815260408083208b51909416835292905290812080549091906117a4908490615744565b90915550505b816020015167ffffffffffffffff166000036117c9576117c98d612dc5565b85516117e1906117d88c613470565b610f5690615531565b60808601516117fc906001600160a01b03168e878f8f6134cf565b60405167ffffffffffffffff861681528d907ffc7df80a30ee916cc040221cf6fcfb3c6dc994b3fa4c4ab23e8a0f134de5c0c09060200160405180910390a25050505050505050509392505050565b60008061185733612b86565b61186a61109660e0870160c0880161554d565b600061187e6110b236889003880188615625565b6001600160c01b0381166000908152600f602052604090209091506118a28161300e565b6118d76118b43689900389018961576a565b87876118c660a08c0160808d01615022565b6001600160a01b031692919061350e565b6118e95760008093509350505061139d565b600073__$5a2ea6afd4f7634e810a44a1cab25e81c7$__63a151a7e18361191660e08c0160c08d0161554d565b6119276101008d0160e08e016154cf565b6040516001600160e01b031960e086901b168152600481019390935260029190910b602483015267ffffffffffffffff166044820152606401602060405180830381865af415801561197d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a19190615707565b90506119b36040890160208a016154cf565b67ffffffffffffffff82811691160294506119e48560016119da60e08c0160c08d0161554d565b60020b91906133b5565b93508460006119f286613470565b9050611a0761127e60c08c0160a08d016156ec565b15611a3657611a228760006112a460c08e0160a08f016156ec565b611a2c90836157da565b9150819650611a5c565b611a4c8660006112a460c08e0160a08f016156ec565b611a569082615724565b90508095505b611a78611a6f60608c0160408d01615022565b610f5684615531565b611a886112c860208c018c615022565b611ac5611a9a368c90038c018c61576a565b848b8b8e6000016080016020810190611ab39190615022565b6001600160a01b03169392919061353e565b336001600160c01b0386167fc4c20b9c4a5ada3b01b7a391a08dd81a1be01dd8ef63170dd9da44ecee3db11b611b0160e08e0160c08f0161554d565b6040805160029290920b825267ffffffffffffffff881660208301520160405180910390a35050505050935093915050565b6001600160c01b0382166000908152600f60205260408120610fbb908361357e565b61145483838360405180602001604052806000815250612318565b6000610c9082612b40565b6000611b8633612b86565b6001600160a01b0382166000818152600e602052604090205490611ba9906135b5565b6001600160a01b0384166000908152600e60205260409020819055611bcf908290615757565b9150611bde836117d884613470565b50919050565b611bec613652565b6001600160a01b038116600081815260106020526040808220805460ff19169055517f88f58aa68e1f754fecfec41a6758d18d4a53fa15d4e206fd54bbdfe7a9e98da79190a250565b600a8054611c4290615485565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6e90615485565b8015611cbb5780601f10611c9057610100808354040283529160200191611cbb565b820191906000526020600020905b815481529060010190602001808311611c9e57829003601f168201915b505050505081565b60006001600160a01b038216611d08576040517f89c62b640000000000000000000000000000000000000000000000000000000081526000600482015260240161107a565b506001600160a01b031660009081526002602052604090205490565b611d2c613652565b611d36600061367f565b565b60065433906001600160a01b03168114611d705760405163118cdaa760e01b81526001600160a01b038216600482015260240161107a565b611d798161367f565b50565b83421115611db6576040517f1a15a3cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e347f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad8888611de781613698565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a0810187905260c001604051602081830303815290604052805190602001206136d3565b90506000611e4187611b70565b9050806001600160a01b0316886001600160a01b031603611e7557604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381163b15611f8d57604080516020810186905280820185905260f887901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260618201928390527f1626ba7e000000000000000000000000000000000000000000000000000000009092526001600160a01b03831691631626ba7e91611f179186916065016157fa565b602060405180830381865afa158015611f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f589190615813565b6001600160e01b031916631626ba7e60e01b14611f8857604051638baa579f60e01b815260040160405180910390fd5b611fca565b806001600160a01b0316611fa38387878761371b565b6001600160a01b031614611fca57604051638baa579f60e01b815260040160405180910390fd5b611fd78888836001613749565b5050505050505050565b6001600160c01b0381166000908152600f60205260408120610c9090613887565b6000606080600080600060606120166138a6565b61201e6138d3565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6001600160c01b0382166000908152600f60205260408120610fbb9083613900565b606060018054610ca590615485565b61209d613652565b6001600160a01b038116600081815260106020526040808220805460ff19166001179055517feb73900b98b6a3e2b8b01708fe544760cf570d21e7fbe5225f24e48b5b2b432e9190a250565b60606120f58433613921565b6040517f15c7afb40000000000000000000000000000000000000000000000000000000081526001600160a01b038516906315c7afb49061213e90339087908790600401615859565b6000604051808303816000875af115801561215d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612185919081019061587c565b600080516020615e8d8339815191525490915060001981019060801c6001600160801b03821660010361220f576001600160801b038116156121f3576040517f5212cba100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61220a6001600080516020615e8d83398151915255565b61222b565b61222b600080516020615e8d8339815191528054600019019055565b50509392505050565b6001600160a01b038083166000908152601160209081526040808320938516835292905220548015611454576001600160a01b0380841660009081526011602090815260408083209386168352928152828220829055600e905290812080548392906122a1908490615757565b909155506122bb90506001600160a01b03831684836139b1565b816001600160a01b0316836001600160a01b03167f1314fd112a381beea61539dbd21ec04afcff2662ac7d1b83273aade1f53d1b978360405161230091815260200190565b60405180910390a3505050565b610d5c338383613a99565b6123238484846113a5565b61144384848484613b49565b606061233a82612b40565b506000612345613c6b565b905060008151116123655760405180602001604052806000815250610fbb565b8061236f84613c7a565b6040516020016123809291906158ea565b6040516020818303038152906040529392505050565b604080516060810182526000808252602080830182905282840182905284841c808352600f909152928120919291602885901c918591906123d88285856133d8565b6040517f59d84f5b00000000000000000000000000000000000000000000000000000000815260048101849052600286900b602482015264ffffffffff8516604482015290915060009073__$5a2ea6afd4f7634e810a44a1cab25e81c7$__906359d84f5b90606401602060405180830381865af415801561245e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124829190615707565b9050604051806060016040528083600001516001600160a01b031681526020018284602001510367ffffffffffffffff1681526020018267ffffffffffffffff168152509650505050505050919050565b6124dc33612b86565b8015611454576124ef83610f5683613470565b6001600160a01b0383166000908152600e602052604081208054839290612517908490615757565b9091555061145490506001600160a01b03841683836139b1565b612539613652565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f32faddbcf33c8560cff79ba1ddc6b995adbeefe08acc9d6c3cc64fe0c2158eef90600090a35050565b600b8054611c4290615485565b6125a0613652565b600680546001600160a01b0383166001600160a01b031990911681179091556125d16005546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6060612616826020615919565b67ffffffffffffffff81111561262e5761262e615303565b6040519080825280601f01601f191660200182016040528015612658576020820181803683370190505b50905060005b8281101561267f57808401546020600183010283015260018101905061265e565b5092915050565b6001600160c01b0381166000908152600f60205260408120610c9090613d1a565b6126b033612b86565b6126c060408401602085016154cf565b67ffffffffffffffff16600003612703576040517f997c4ef400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61272061271660808501606086016156ec565b62ffffff16613d52565b801561273a575061273a61271660c0850160a086016156ec565b61275757604051637a34030f60e01b815260040160405180910390fd5b600061277a61276c60c0860160a087016156ec565b627fffff166207a11f190190565b61278d61276c60808701606088016156ec565b0160020b12156127b057604051637a34030f60e01b815260040160405180910390fd5b60006127c561276c60808601606087016156ec565b60020b12806127e9575060006127e461276c60c0860160a087016156ec565b60020b125b156128365761280161127e60c0850160a086016156ec565b151561281661127e60808601606087016156ec565b15151461283657604051637a34030f60e01b815260040160405180910390fd5b61285761284960a0850160808601615022565b6001600160a01b0316613d83565b6128a95761286b60a0840160808501615022565b6040517fe65af6a00000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260240161107a565b6128de6128bb36859003850185615625565b83836128cd60a0880160808901615022565b6001600160a01b0316929190613e2f565b60006128f26110b236869003860186615625565b6001600160c01b0381166000908152600f60205260409081902090517fab8a7e3f00000000000000000000000000000000000000000000000000000000815291925073__$5a2ea6afd4f7634e810a44a1cab25e81c7$__9163ab8a7e3f9161295e918890600401615930565b60006040518083038186803b15801561297657600080fd5b505af415801561298a573d6000803e3d6000fd5b505050506129c5848036038101906129a29190615625565b84846129b460a0890160808a01615022565b6001600160a01b0316929190613eaf565b6129d56060850160408601615022565b6001600160a01b03166129eb6020860186615022565b6001600160a01b03166001600160c01b0383167f803427d75ce3214f82dc7aa4910635170a6655e2c1663dc03429dd04100cba5a612a2f6040890160208a016154cf565b612a3f60808a0160608b016156ec565b612a4f60c08b0160a08c016156ec565b612a5f60a08c0160808d01615022565b6040805167ffffffffffffffff95909516855262ffffff938416602086015291909216908301526001600160a01b0316606082015260800160405180910390a450505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480612b0857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610c9057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610c90565b6000818152600960205260408120546001600160a01b038116610c9057604051637e27328960e01b81526004810184905260240161107a565b6114548383836001613749565b6000612b90613eed565b90506000612b9c613f5f565b9050816001600160a01b0316836001600160a01b031603612bbc57505050565b806001600160a01b0316836001600160a01b0316148015612bf157507210000000000000000000000000000000000000811615155b15612bfb57505050565b6040517f74d863650000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301528216602482015260440161107a565b612c4b838383613fad565b611454576001600160a01b038316612c7957604051637e27328960e01b81526004810182905260240161107a565b6040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024810182905260440161107a565b6000600160991b851615612d3657612d2f63295b52c560e01b33868686604051602401612ced9493929190615a00565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b03871690614030565b9050612d3a565b5060015b949350505050565b60006207a11f19627fffff851601600281900b82128281612d665782600003612d68565b825b62ffffff1690506000612da2612d7e8389615919565b620f424088612d94578581830615151691040190565b808206151586151691040190565b905082612db757612db281615531565b612db9565b805b98975050505050505050565b6000612dd46000836000613145565b90506001600160a01b038116610d5c57604051637e27328960e01b81526004810183905260240161107a565b80600003612e0c575050565b6000612e16613eed565b6001600160a01b038082166000908152600d60209081526040808320938816835292905290812054919250612e4b8483615724565b905080600003612e9457612e8f600080516020615e8d83398151915280547fffffffffffffffffffffffffffffffff00000000000000000000000000000000019055565b612ec7565b81600003612ec757612ec7600080516020615e8d8339815191528054700100000000000000000000000000000000019055565b6001600160a01b039283166000908152600d602090815260408083209790951682529590955291909320555050565b730100000000000000000000000000000000000000851615612f7857612f78635125ce9c60e01b3386868686604051602401612f36959493929190615a3a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b0387169061410e565b5050505050565b6207ffff600282900b1380612fa45750612f9b6207ffff615a85565b60020b8160020b125b15611d79576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008082604051602001612fef919061522d565b60408051601f1981840301815291905280516020909101209392505050565b8054600160a01b900467ffffffffffffffff16611d79576040517f1e3636e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001609d1b851615612d3657612d2f633fda46bb60e01b33868686604051602401612ced9493929190615b42565b6001600160a01b0382166130b157604051633250574960e11b81526000600482015260240161107a565b60006130bf83836000613145565b90506001600160a01b03811615611454576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526000600482015260240161107a565b731000000000000000000000000000000000000000851615612f7857612f7863eba8155960e01b3386868686604051602401612f36959493929190615b74565b6000828152600960205260408120546001600160a01b0383161561316e5761316e818486612c40565b6001600160a01b038116156131ac5761318b600085600080613749565b6001600160a01b038116600090815260026020526040902080546000190190555b6001600160a01b038516156131db576001600160a01b0385166000908152600260205260409020805460010190555b600084815260096020526040902080546001600160a01b0319166001600160a01b03871617905583856001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4949350505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156132a457507f000000000000000000000000000000000000000000000000000000000000000046145b156132ce57507f000000000000000000000000000000000000000000000000000000000000000090565b611463604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60007280000000000000000000000000000000000000851615612d3657612d2f63827e0eb260e01b33868686604051602401612ced9493929190615bad565b6000612d3a608084901b6133cb8660020b614153565b8082061515851691040190565b60408051808201909152600080825260208201526133f7848484614457565b6040805180820190915290546001600160a01b0381168252600160a01b900467ffffffffffffffff166020820152949350505050565b60008082121561346c576040517fa8ce44320000000000000000000000000000000000000000000000000000000081526004810183905260240161107a565b5090565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82111561346c576040517f24775e060000000000000000000000000000000000000000000000000000000081526004810183905260240161107a565b7240000000000000000000000000000000000000851615612f7857612f786348042cf460e01b3386868686604051602401612f36959493929190615bd6565b60006001609b1b851615612d3657612d2f63fab3c75660e01b33868686604051602401612ced9493929190615c96565b730400000000000000000000000000000000000000851615612f7857612f78639eb477b260e01b3386868686604051602401612f36959493929190615cc8565b600061358d600584018361449b565b600283900b600090815260038501602052604090206135ab906144e4565b610fbb9190615d0b565b60006001600160a01b0382166135cc575047919050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015613629573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190615d2c565b919050565b6005546001600160a01b03163314611d365760405163118cdaa760e01b815233600482015260240161107a565b600680546001600160a01b0319169055611d7981614525565b60008181526009602052604090205460a081901c906136bb81600160a01b615744565b60009384526009602052604090932092909255919050565b6000610c906136e061324b565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060008061372d88888888614577565b92509250925061373d8282614646565b50909695505050505050565b808061375d57506001600160a01b03821615155b1561385757600061376d84612b40565b90506001600160a01b038316158015906137995750826001600160a01b0316816001600160a01b031614155b80156137cb57506001600160a01b0380821660009081526004602090815260408083209387168352929052205460ff16155b1561380d576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161107a565b81156138555783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260036020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610c906138988360040161474a565b62ffffff16627fffff190190565b60606114637f0000000000000000000000000000000000000000000000000000000000000000600761484a565b60606114637f0000000000000000000000000000000000000000000000000000000000000000600861484a565b6000610fbb6138986139178460020b628000000190565b60048601906148f5565b600061393d600080516020615e8d833981519152546000190190565b7f722b431450ce53c44434ec138439e45a0639fe031b803ee019b776fae5cfa2b06001600160801b0390911660020290810193909355507f722b431450ce53c44434ec138439e45a0639fe031b803ee019b776fae5cfa2b190910155600080516020615e8d83398151915280546001019055565b60006001600160a01b038416613a095760008060008085875af1905080613a04576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611443565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080611443576040517ff27f64e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216613ae4576040517f5b08ba180000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240161107a565b6001600160a01b03838116600081815260046020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101612300565b6001600160a01b0383163b1561144357604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290613b8b903390889087908790600401615d45565b6020604051808303816000875af1925050508015613bc6575060408051601f3d908101601f19168201909252613bc391810190615813565b60015b613c2f573d808015613bf4576040519150601f19603f3d011682016040523d82523d6000602084013e613bf9565b606091505b508051600003613c2757604051633250574960e11b81526001600160a01b038516600482015260240161107a565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14612f7857604051633250574960e11b81526001600160a01b038516600482015260240161107a565b6060600a8054610ca590615485565b60606000613c8783614a02565b600101905060008167ffffffffffffffff811115613ca757613ca7615303565b6040519080825280601f01601f191660200182016040528015613cd1576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613cdb57509392505050565b7f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b954600090815260048201602052604081205415610c90565b60006207a11f19627fffff8316016207a120600282900b1380613d7b57506207a11f198160020b125b159392505050565b60007220000000000000000000000000000000000000821615158015613dad57506001609d1b8216155b8015613dbd57506001609b1b8216155b8015613dcd5750600160991b8216155b8015613dec575072800000000000000000000000000000000000008216155b15613df957506000919050565b6001600160a01b0382161580610c9057505072100000000000000000000000000000000000006001600160a01b03909116101590565b73800000000000000000000000000000000000000084161561144357611443635df4d91860e01b33858585604051602401613e6d9493929190615d77565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b0386169061410e565b734000000000000000000000000000000000000000841615611443576114436371ded94360e01b33858585604051602401613e6d9493929190615d77565b600080613f0a600080516020615e8d833981519152546000190190565b90506000816001600160801b031611613f24576000613f59565b60026001600160801b03600019830116027f722b431450ce53c44434ec138439e45a0639fe031b803ee019b776fae5cfa2b001545b91505090565b6000611463613f7e600080516020615e8d833981519152546000190190565b6001600160801b03167ffcac7593714b88fec0c578a53e9f3f6e4b47eb26c9dcaa7eff23a3ac156be421015490565b60006001600160a01b03831615801590612d3a5750826001600160a01b0316846001600160a01b0316148061400757506001600160a01b0380851660009081526004602090815260408083209387168352929052205460ff165b80612d3a5750506000908152600360205260409020546001600160a01b03908116911614919050565b600080600061403f8585614ae4565b91509150816001600160e01b031916816001600160e01b031916036140675760019250614106565b6040517f4e6f4f70000000000000000000000000000000000000000000000000000000006020820152602401604051602081830303815290604052805190602001206001600160e01b031916816001600160e01b0319161480156140df57507220000000000000000000000000000000000000851615155b156140ed5760009250614106565b604051631e048e1d60e01b815260040160405180910390fd5b505092915050565b60008061411b8484614ae4565b91509150816001600160e01b031916816001600160e01b0319161461144357604051631e048e1d60e01b815260040160405180910390fd5b600061415e82612f7f565b816000600282900b8113614172578161417b565b61417b82615a85565b62ffffff81169150600116156141a3576ffff97272373d413259a46990580e213992506141b8565b70010000000000000000000000000000000092505b60028116156141db5760806ffff2e50f5f656932ef12357cf3c7fdcb8402901c92505b60048116156141fe5760806fffe5caca7e10e4e61c3624eaa0941ccf8402901c92505b60088116156142215760806fffcb9843d60f6159c9db58835c9266438402901c92505b60108116156142445760806fff973b41fa98c081472e6896dfb254bf8402901c92505b60208116156142675760806fff2ea16466c96a3843ec78b326b528608402901c92505b604081161561428a5760806ffe5dee046a99a2a811c461f1969c30528402901c92505b60808116156142ad5760806ffcbe86c7900a88aedcffc83b479aa3a38402901c92505b6101008116156142d15760806ff987a7253ac413176f2b074cf7815e538402901c92505b6102008116156142f55760806ff3392b0822b70005940c7a398e4b70f28402901c92505b6104008116156143195760806fe7159475a2c29b7443b29c7fa6e889d88402901c92505b61080081161561433d5760806fd097f3bdfd2022b8845ad8f792aa58258402901c92505b6110008116156143615760806fa9f746462d870fdf8a65dc1f90e061e48402901c92505b6120008116156143855760806f70d869a156d2a1b890bb3df62baf32f68402901c92505b6140008116156143a95760806f31be135f97d08fd981231505542fcfa58402901c92505b6180008116156143cd5760806f09aa508b5b7a84e1c677de54f3e99bc88402901c92505b620100008116156143f15760806e5d6af8dedb81196699c329225ee6048402901c92505b620200008116156144145760806d2216e584f5fa1ea926041bedfe978402901c92505b620400008116156144355760806b048a170391f7dc42444e8fa28402901c92505b60008260020b13156144505761444d83600019615e01565b92505b5050919050565b600282900b60009081526003840160205260408120600401805464ffffffffff841690811061448857614488615e23565b9060005260206000200190509392505050565b623fffff600282901c1660008181526020849052604081205490919060038416906144db9060c0600687901b161c67ffffffffffffffff16801515900390565b95945050505050565b600160009081526020829052604081205461450190826004614b99565b60008080526020849052604081205461451b916004614b99565b610c909190615e39565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156145b2575060009150600390508261463c565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015614606573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166146325750600092506001915082905061463c565b9250600091508190505b9450945094915050565b600082600381111561465a5761465a615e5a565b03614663575050565b600182600381111561467757614677615e5a565b036146ae576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028260038111156146c2576146c2615e5a565b036146fc576040517ffce698f70000000000000000000000000000000000000000000000000000000081526004810182905260240161107a565b600382600381111561471057614710615e5a565b03610d5c576040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004810182905260240161107a565b7f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b9546000908152602082905260408120546147b0576040517f4f3d7def00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b9546000908152602083905260408120546147e990614bda565b60ff169050600061480c8460008419815260200190815260200160002054614bda565b60ff16600883901b179050600061483485600084815260200190815260200160002054614bda565b60ff16905080600883901b179350505050919050565b606060ff83146148645761485d83614c53565b9050610c90565b81805461487090615485565b80601f016020809104026020016040519081016040528092919081815260200182805461489c90615485565b80156148e95780601f106148be576101008083540402835291602001916148e9565b820191906000526020600020905b8154815290600101906020018083116148cc57829003601f168201915b50505050509050610c90565b600881901c60008181526020849052604081205490919060ff841690600119821b168084036149e257600883901c801960009081526020889052604081205460011960ff87161b16908190036149b6577f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b954600090815260208990526040812054600119841b16908190036149925760009650505050505050610c90565b61499b81614bda565b60ff168019600090815260208b905260409020549093509150505b6149bf81614bda565b60ff16600883901b17945087600086815260200190815260200160002054925050505b6149eb81614bda565b60ff16915081600884901b17935050505092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310614a4b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310614a77576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614a9557662386f26fc10000830492506010015b6305f5e1008310614aad576305f5e100830492506008015b6127108310614ac157612710830492506004015b60648310614ad3576064830492506002015b600a8310610c905760010192915050565b6000806000614af285614c92565b905060208401519250600080866001600160a01b031686604051614b169190615e70565b6000604051808303816000865af19150503d8060008114614b53576040519150601f19603f3d011682016040523d82523d6000602084013e614b58565b606091505b509150915081614b6b57614b6b81614cfe565b80806020019051810190614b7f9190615813565b93508215614b8f57614b8f614d3f565b5050509250929050565b600682901b9290921c916000825b82811015614bcf57604085901c9467ffffffffffffffff168015019190910190600101614ba7565b509190039003919050565b6000808211614be857600080fd5b60007e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff600184190184160260f81c90506040518061012001604052806101008152602001615ead61010091398181518110614c4457614c44615e23565b016020015160f81c9392505050565b60606000614c6083614d95565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080614c9d613f5f565b6001600160a01b03160361364d576000614cc7600080516020615e8d833981519152546000190190565b6001600160801b03167ffcac7593714b88fec0c578a53e9f3f6e4b47eb26c9dcaa7eff23a3ac156be4210192909255506001919050565b805115614d0d57805181602001fd5b6040517f36bc48c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000614d5b600080516020615e8d833981519152546000190190565b6001600160801b03167ffcac7593714b88fec0c578a53e9f3f6e4b47eb26c9dcaa7eff23a3ac156be42160001c019050600160ff1b815550565b600060ff8216601f811115610c90576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160e01b031981168114611d7957600080fd5b600060208284031215614dfe57600080fd5b8135610fbb81614dd6565b60005b83811015614e24578181015183820152602001614e0c565b50506000910152565b60008151808452614e45816020860160208601614e09565b601f01601f19169290920160200192915050565b602081526000610fbb6020830184614e2d565b600060208284031215614e7e57600080fd5b5035919050565b6001600160a01b0381168114611d7957600080fd5b60008060408385031215614ead57600080fd5b8235614eb881614e85565b946020939093013593505050565b60008083601f840112614ed857600080fd5b50813567ffffffffffffffff811115614ef057600080fd5b602083019150836020828501011115614f0857600080fd5b9250929050565b60008060008385036060811215614f2557600080fd5b6040811215614f3357600080fd5b50839250604084013567ffffffffffffffff811115614f5157600080fd5b614f5d86828701614ec6565b9497909650939450505050565b6000806000838503610140811215614f8157600080fd5b61012080821215614f9157600080fd5b859450840135905067ffffffffffffffff811115614f5157600080fd5b600080600060608486031215614fc357600080fd5b8335614fce81614e85565b92506020840135614fde81614e85565b929592945050506040919091013590565b60008060006040848603121561500457600080fd5b83359250602084013567ffffffffffffffff811115614f5157600080fd5b60006020828403121561503457600080fd5b8135610fbb81614e85565b600080600083850361012081121561505657600080fd5b61010080821215614f9157600080fd5b6000806040838503121561507957600080fd5b823561508481614e85565b9150602083013561509481614e85565b809150509250929050565b80356001600160c01b038116811461364d57600080fd5b8035600281900b811461364d57600080fd5b600080604083850312156150db57600080fd5b6150e48361509f565b91506150f2602084016150b6565b90509250929050565b60008060008060008060c0878903121561511457600080fd5b863561511f81614e85565b95506020870135945060408701359350606087013560ff8116811461514357600080fd5b9598949750929560808101359460a0909101359350915050565b60006020828403121561516f57600080fd5b610fbb8261509f565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e060208401526151b560e084018a614e2d565b83810360408501526151c7818a614e2d565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b8181101561521b578351835292840192918401916001016151ff565b50909c9b505050505050505050505050565b60c08101610c9082846001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b6000806000604084860312156152a957600080fd5b83356152b481614e85565b9250602084013567ffffffffffffffff811115614f5157600080fd5b600080604083850312156152e357600080fd5b82356152ee81614e85565b91506020830135801515811461509457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561534257615342615303565b604052919050565b600067ffffffffffffffff82111561536457615364615303565b50601f01601f191660200190565b6000806000806080858703121561538857600080fd5b843561539381614e85565b935060208501356153a381614e85565b925060408501359150606085013567ffffffffffffffff8111156153c657600080fd5b8501601f810187136153d757600080fd5b80356153ea6153e58261534a565b615319565b8181528860208385010111156153ff57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561543457600080fd5b50508035926020909101359150565b600080600083850360e081121561545957600080fd5b60c081121561546757600080fd5b5083925060c084013567ffffffffffffffff811115614f5157600080fd5b600181811c9082168061549957607f821691505b602082108103611bde57634e487b7160e01b600052602260045260246000fd5b67ffffffffffffffff81168114611d7957600080fd5b6000602082840312156154e157600080fd5b8135610fbb816154b9565b600080604083850312156154ff57600080fd5b825161550a816154b9565b6020840151909250615094816154b9565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82036155465761554661551b565b5060000390565b60006020828403121561555f57600080fd5b610fbb826150b6565b803562ffffff8116811461364d57600080fd5b600060c0828403121561558d57600080fd5b60405160c0810181811067ffffffffffffffff821117156155b0576155b0615303565b60405290508082356155c181614e85565b815260208301356155d1816154b9565b602082015260408301356155e481614e85565b60408201526155f560608401615568565b6060820152608083013561560881614e85565b608082015261561960a08401615568565b60a08201525092915050565b600060c0828403121561563757600080fd5b610fbb838361557b565b6000610120828403121561565457600080fd5b6040516080810181811067ffffffffffffffff8211171561567757615677615303565b604052615684848461557b565b815261569260c084016150b6565b602082015260e08301356156a5816154b9565b60408201526101008301356156b981614e85565b60608201529392505050565b6000602082840312156156d757600080fd5b815164ffffffffff81168114610fbb57600080fd5b6000602082840312156156fe57600080fd5b610fbb82615568565b60006020828403121561571957600080fd5b8151610fbb816154b9565b80820182811260008312801582168215821617156141065761410661551b565b80820180821115610c9057610c9061551b565b81810381811115610c9057610c9061551b565b6000610100828403121561577d57600080fd5b6040516060810181811067ffffffffffffffff821117156157a0576157a0615303565b6040526157ad848461557b565b81526157bb60c084016150b6565b602082015260e08301356157ce816154b9565b60408201529392505050565b818103600083128015838313168383128216171561267f5761267f61551b565b828152604060208201526000612d3a6040830184614e2d565b60006020828403121561582557600080fd5b8151610fbb81614dd6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082015260006144db604083018486615830565b60006020828403121561588e57600080fd5b815167ffffffffffffffff8111156158a557600080fd5b8201601f810184136158b657600080fd5b80516158c46153e58261534a565b8181528560208385010111156158d957600080fd5b6144db826020830160208601614e09565b600083516158fc818460208801614e09565b835190830190615910818360208801614e09565b01949350505050565b8082028115828204841417610c9057610c9061551b565b82815260e08101823561594281614e85565b6001600160a01b03808216602085015260208501359150615962826154b9565b67ffffffffffffffff821660408501526040850135915061598282614e85565b808216606085015261599660608601615568565b915062ffffff8083166080860152608086013592506159b483614e85565b81831660a0860152806159c960a08801615568565b1660c08601525050509392505050565b8035825260208101356159eb816154b9565b67ffffffffffffffff81166020840152505050565b6001600160a01b0385168152615a1960208201856159d9565b608060608201526000615a30608083018486615830565b9695505050505050565b6001600160a01b0386168152615a5360208201866159d9565b67ffffffffffffffff8416606082015260a060808201526000615a7a60a083018486615830565b979650505050505050565b60008160020b627fffff198103615a9e57615a9e61551b565b60000392915050565b615b0b8282516001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602081015160020b60c0830152604081015167ffffffffffffffff1660e0830152606001516001600160a01b031661010090910152565b60006101606001600160a01b0387168352615b606020840187615aa7565b80610140840152615a7a8184018587615830565b60006101806001600160a01b0388168352615b926020840188615aa7565b8561014084015280610160840152612db98184018587615830565b6001600160a01b0385168152836020820152606060408201526000615a30606083018486615830565b6001600160a01b038616815284602082015267ffffffffffffffff84166040820152608060608201526000615a7a608083018486615830565b615c738282516001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602081015160020b60c08301526040015167ffffffffffffffff1660e090910152565b60006101406001600160a01b0387168352615cb46020840187615c0f565b80610120840152615a7a8184018587615830565b60006101606001600160a01b0388168352615ce66020840188615c0f565b67ffffffffffffffff861661012084015280610140840152612db98184018587615830565b67ffffffffffffffff82811682821603908082111561267f5761267f61551b565b600060208284031215615d3e57600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152615a306080830184614e2d565b60006101006001600160a01b0387168352615dee60208401876001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b8060e0840152615a7a8184018587615830565b600082615e1e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff81811683821601908082111561267f5761267f61551b565b634e487b7160e01b600052602160045260246000fd5b60008251615e82818460208701614e09565b919091019291505056fe760a9a962ae3d184e99c0483cf5684fb3170f47116ca4f445c50209da4f4f9060001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8a264697066735822122085344426bf63b21259000ef94f749d9392578f84d8499f03b0f4f21c9130dd4764736f6c63430008180033",
  "libraries": {
    "Book": "0x18C2B4C4669277565b977F174796699656dE4175"
  },
  "devdoc": {
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "HookAddressNotValid(address)": [
        {
          "params": {
            "hooks": "The address of the hooks contract"
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedIntToUint(int256)": [
        {
          "details": "An int value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeCastOverflowedUintToInt(uint256)": [
        {
          "details": "An uint value doesn't fit in an int of `bits` size."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Cancel(uint256,uint64)": {
        "params": {
          "canceledAmount": "The canceled amount",
          "orderId": "The order id"
        }
      },
      "Claim(uint256,uint64)": {
        "params": {
          "orderId": "The order id",
          "rawAmount": "The claimed amount"
        }
      },
      "Collect(address,address,uint256)": {
        "params": {
          "amount": "The collected amount",
          "currency": "The currency",
          "provider": "The provider address"
        }
      },
      "Delist(address)": {
        "params": {
          "provider": "The provider address"
        }
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Make(uint192,address,int24,uint256,uint64)": {
        "params": {
          "amount": "The order amount",
          "bookId": "The book id",
          "orderIndex": "The order index",
          "tick": "The order tick",
          "user": "The user address"
        }
      },
      "Open(uint192,address,address,uint64,uint24,uint24,address)": {
        "params": {
          "base": "The base currency",
          "hooks": "The hooks contract",
          "id": "The book id",
          "makerPolicy": "The maker fee policy",
          "quote": "The quote currency",
          "takerPolicy": "The taker fee policy",
          "unit": "The unit of the book"
        }
      },
      "SetDefaultProvider(address,address)": {
        "params": {
          "newDefaultProvider": "The new default provider address",
          "oldDefaultProvider": "The old default provider address"
        }
      },
      "Take(uint192,address,int24,uint64)": {
        "params": {
          "amount": "The order amount",
          "bookId": "The book id",
          "tick": "The order tick",
          "user": "The user address"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Whitelist(address)": {
        "params": {
          "provider": "The provider address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "cancel((uint256,uint64),bytes)": {
        "params": {
          "hookData": "The hook data",
          "params": "The order parameters"
        },
        "returns": {
          "canceledAmount": "The amount of quote currency canceled"
        }
      },
      "checkAuthorized(address,address,uint256)": {
        "params": {
          "owner": "The address of the token owner",
          "spender": "The address of the spender",
          "tokenId": "The token ID"
        }
      },
      "claim(uint256,bytes)": {
        "params": {
          "hookData": "The hook data",
          "id": "The order ID"
        },
        "returns": {
          "claimedAmount": "The amount claimed"
        }
      },
      "collect(address,address)": {
        "params": {
          "currency": "The currency",
          "provider": "The provider address"
        }
      },
      "delist(address)": {
        "params": {
          "provider": "The provider address"
        }
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getBookKey(uint192)": {
        "params": {
          "id": "The book ID"
        },
        "returns": {
          "_0": "The book key"
        }
      },
      "getDepth(uint192,int24)": {
        "params": {
          "id": "The book ID",
          "tick": "The tick"
        },
        "returns": {
          "_0": "The depth of the tick"
        }
      },
      "getLock(uint256)": {
        "params": {
          "i": "The index of the lock"
        },
        "returns": {
          "_0": "The locker's address",
          "_1": "The caller's address"
        }
      },
      "getLockData()": {
        "returns": {
          "_0": "The lock data including necessary numeric values"
        }
      },
      "getLowest(uint192)": {
        "params": {
          "id": "The book ID"
        },
        "returns": {
          "_0": "The lowest tick"
        }
      },
      "getOrder(uint256)": {
        "params": {
          "id": "The order ID"
        },
        "returns": {
          "_0": "Order information including provider, open status, and claimable amount"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isEmpty(uint192)": {
        "params": {
          "id": "The book ID"
        },
        "returns": {
          "_0": "True if the book is empty, false otherwise"
        }
      },
      "load(bytes32)": {
        "params": {
          "slot": "The storage slot"
        },
        "returns": {
          "value": "The value in the slot"
        }
      },
      "load(bytes32,uint256)": {
        "params": {
          "nSlot": "The number of slots to load",
          "startSlot": "The starting slot"
        },
        "returns": {
          "value": "The sequence of values"
        }
      },
      "lock(address,bytes)": {
        "params": {
          "data": "The lock data",
          "locker": "The locker address"
        },
        "returns": {
          "result": "The lock return data"
        }
      },
      "make(((address,uint64,address,uint24,address,uint24),int24,uint64,address),bytes)": {
        "params": {
          "hookData": "The hook data",
          "params": "The order parameters"
        },
        "returns": {
          "id": "The order id. Returns 0 if the order is not settled",
          "quoteAmount": "The amount of quote currency to be paid"
        }
      },
      "minGreaterThan(uint192,int24)": {
        "details": "Returns `Tick.wrap(type(int24).min)` if the specified tick is the highest",
        "params": {
          "id": "The book ID",
          "tick": "The specified tick"
        },
        "returns": {
          "_0": "The next higher tick"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "open((address,uint64,address,uint24,address,uint24),bytes)": {
        "params": {
          "hookData": "The hook data",
          "key": "The book key"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The deadline for the signature",
          "r": "The r value of the signature",
          "s": "The s value of the signature",
          "spender": "The address to approve",
          "tokenId": "The tokenId to approve",
          "v": "The recovery id of the signature"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setDefaultProvider(address)": {
        "params": {
          "newDefaultProvider": "The new default provider address"
        }
      },
      "settle(address)": {
        "params": {
          "currency": "The currency"
        },
        "returns": {
          "paid": "The settled amount"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "take(((address,uint64,address,uint24,address,uint24),int24,uint64),bytes)": {
        "params": {
          "hookData": "The hook data",
          "params": "The order parameters"
        },
        "returns": {
          "baseAmount": "The amount of base currency to be paid",
          "quoteAmount": "The amount of quote currency to be received"
        }
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "whitelist(address)": {
        "params": {
          "provider": "The provider address"
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "amount": "The amount",
          "currency": "The currency",
          "to": "The recipient address"
        }
      }
    },
    "stateVariables": {
      "baseURI": {
        "return": "The base URI",
        "returns": {
          "_0": "The base URI"
        }
      },
      "contractURI": {
        "return": "The contract URI",
        "returns": {
          "_0": "The contract URI"
        }
      },
      "currencyDelta": {
        "params": {
          "currency": "The currency in question",
          "locker": "The address of the locker"
        },
        "return": "currencyDelta The net change in currency balance",
        "returns": {
          "currencyDelta": "The net change in currency balance"
        }
      },
      "defaultProvider": {
        "return": "The default provider",
        "returns": {
          "_0": "The default provider"
        }
      },
      "isWhitelisted": {
        "params": {
          "provider": "The address of the provider"
        },
        "return": "True if the provider is whitelisted, false otherwise",
        "returns": {
          "_0": "True if the provider is whitelisted, false otherwise"
        }
      },
      "reservesOf": {
        "params": {
          "currency": "The currency in question"
        },
        "return": "The total reserves amount",
        "returns": {
          "_0": "The total reserves amount"
        }
      },
      "tokenOwed": {
        "params": {
          "currency": "The currency in question",
          "provider": "The provider's address"
        },
        "return": "amount The owed amount",
        "returns": {
          "amount": "The owed amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20TransferFailed()": [
        {
          "notice": "Thrown when an ERC20 transfer fails"
        }
      ],
      "FailedHookCall()": [
        {
          "notice": "thrown when a hook call fails"
        }
      ],
      "HookAddressNotValid(address)": [
        {
          "notice": "Thrown if the address will not lead to the specified hook calls being called"
        }
      ],
      "InvalidHookResponse()": [
        {
          "notice": "Hook did not return its selector"
        }
      ],
      "NativeTransferFailed()": [
        {
          "notice": "Thrown when a native transfer fails"
        }
      ]
    },
    "events": {
      "Cancel(uint256,uint64)": {
        "notice": "Event emitted when an order is canceled"
      },
      "Claim(uint256,uint64)": {
        "notice": "Event emitted when an order is claimed"
      },
      "Collect(address,address,uint256)": {
        "notice": "Event emitted when a provider collects fees"
      },
      "Delist(address)": {
        "notice": "Event emitted when a provider is delisted"
      },
      "Make(uint192,address,int24,uint256,uint64)": {
        "notice": "Event emitted when a new order is made"
      },
      "Open(uint192,address,address,uint64,uint24,uint24,address)": {
        "notice": "Event emitted when a new book is opened"
      },
      "SetDefaultProvider(address,address)": {
        "notice": "Event emitted when new default provider is set"
      },
      "Take(uint192,address,int24,uint64)": {
        "notice": "Event emitted when an order is taken"
      },
      "Whitelist(address)": {
        "notice": "Event emitted when a provider is whitelisted"
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "The EIP-712 domain separator for this contract"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the permit struct used by the contract"
      },
      "baseURI()": {
        "notice": "Returns the base URI"
      },
      "cancel((uint256,uint64),bytes)": {
        "notice": "Cancel a limit order"
      },
      "checkAuthorized(address,address,uint256)": {
        "notice": "Verifies if an owner has authorized a spender for a token"
      },
      "claim(uint256,bytes)": {
        "notice": "Claims an order"
      },
      "collect(address,address)": {
        "notice": "Collects fees from a provider"
      },
      "contractURI()": {
        "notice": "Returns the contract URI"
      },
      "currencyDelta(address,address)": {
        "notice": "Calculates the currency balance changes for a given locker"
      },
      "defaultProvider()": {
        "notice": "Returns the default provider"
      },
      "delist(address)": {
        "notice": "Delists a provider"
      },
      "getBookKey(uint192)": {
        "notice": "Retrieves the book key for a given book ID"
      },
      "getDepth(uint192,int24)": {
        "notice": "Returns the depth of a given book ID and tick"
      },
      "getLock(uint256)": {
        "notice": "Retrieves the locker and caller addresses for a given lock"
      },
      "getLockData()": {
        "notice": "Provides the lock data"
      },
      "getLowest(uint192)": {
        "notice": "Retrieves the lowest tick for a given book ID"
      },
      "getOrder(uint256)": {
        "notice": "Provides information about an order"
      },
      "isEmpty(uint192)": {
        "notice": "Checks if a book is empty"
      },
      "isWhitelisted(address)": {
        "notice": "Checks if a provider is whitelisted"
      },
      "load(bytes32)": {
        "notice": "Loads a value from a specific storage slot"
      },
      "load(bytes32,uint256)": {
        "notice": "Loads a sequence of values starting from a specific slot"
      },
      "lock(address,bytes)": {
        "notice": "Locks a book manager function"
      },
      "make(((address,uint64,address,uint24,address,uint24),int24,uint64,address),bytes)": {
        "notice": "Make a limit order"
      },
      "minGreaterThan(uint192,int24)": {
        "notice": "Finds the minimum tick greater than a specified tick in a book"
      },
      "open((address,uint64,address,uint24,address,uint24),bytes)": {
        "notice": "Opens a new book"
      },
      "permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Approve the spender to transfer the given tokenId"
      },
      "reservesOf(address)": {
        "notice": "Returns the total reserves of a given currency"
      },
      "setDefaultProvider(address)": {
        "notice": "Sets the default provider"
      },
      "settle(address)": {
        "notice": "Settles a currency"
      },
      "take(((address,uint64,address,uint24,address,uint24),int24,uint64),bytes)": {
        "notice": "Take a limit order at specific tick"
      },
      "tokenOwed(address,address)": {
        "notice": "Calculates the amount owed to a provider in a given currency"
      },
      "whitelist(address)": {
        "notice": "Whitelists a provider"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraws a currency"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14959,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 14961,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 14965,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14969,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14975,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2194,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2342,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4481,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 4483,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 15969,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_nonceAndOwner",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7745,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 7748,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "contractURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 7751,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "defaultProvider",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 7759,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "currencyDelta",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_userDefinedValueType(Currency)14760,t_int256))"
      },
      {
        "astId": 7765,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "reservesOf",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_userDefinedValueType(Currency)14760,t_uint256)"
      },
      {
        "astId": 7771,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "_books",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_userDefinedValueType(BookId)14733,t_struct(State)14054_storage)"
      },
      {
        "astId": 7776,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7784,
        "contract": "contracts/BookManager.sol:BookManager",
        "label": "tokenOwed",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_userDefinedValueType(Currency)14760,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_mapping(t_uint256,t_uint256))4_storage": {
        "base": "t_mapping(t_uint256,t_uint256)",
        "encoding": "inplace",
        "label": "mapping(uint256 => uint256)[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_struct(Order)14028_storage)dyn_storage": {
        "base": "t_struct(Order)14028_storage",
        "encoding": "dynamic_array",
        "label": "struct Book.Order[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHooks)13948": {
        "encoding": "inplace",
        "label": "contract IHooks",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_userDefinedValueType(Currency)14760,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(Currency => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(Currency)14760,t_int256)"
      },
      "t_mapping(t_address,t_mapping(t_userDefinedValueType(Currency)14760,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(Currency => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(Currency)14760,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint24,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(BookId)14733,t_struct(State)14054_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(BookId)14733",
        "label": "mapping(BookId => struct Book.State)",
        "numberOfBytes": "32",
        "value": "t_struct(State)14054_storage"
      },
      "t_mapping(t_userDefinedValueType(Currency)14760,t_int256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Currency)14760",
        "label": "mapping(Currency => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_userDefinedValueType(Currency)14760,t_uint256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Currency)14760",
        "label": "mapping(Currency => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(Tick)17880,t_struct(Queue)14036_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Tick)17880",
        "label": "mapping(Tick => struct Book.Queue)",
        "numberOfBytes": "32",
        "value": "t_struct(Queue)14036_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BookKey)13009_storage": {
        "encoding": "inplace",
        "label": "struct IBookManager.BookKey",
        "members": [
          {
            "astId": 12994,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(Currency)14760"
          },
          {
            "astId": 12996,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "unit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 12999,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(Currency)14760"
          },
          {
            "astId": 13002,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "makerPolicy",
            "offset": 20,
            "slot": "1",
            "type": "t_userDefinedValueType(FeePolicy)16220"
          },
          {
            "astId": 13005,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "hooks",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IHooks)13948"
          },
          {
            "astId": 13008,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "takerPolicy",
            "offset": 20,
            "slot": "2",
            "type": "t_userDefinedValueType(FeePolicy)16220"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Core)1364_storage": {
        "encoding": "inplace",
        "label": "struct SegmentedSegmentTree.Core",
        "members": [
          {
            "astId": 1363,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "layers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_mapping(t_uint256,t_uint256))4_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Order)14028_storage": {
        "encoding": "inplace",
        "label": "struct Book.Order",
        "members": [
          {
            "astId": 14025,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14027,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "pending",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Queue)14036_storage": {
        "encoding": "inplace",
        "label": "struct Book.Queue",
        "members": [
          {
            "astId": 14031,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "tree",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Core)1364_storage"
          },
          {
            "astId": 14035,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "orders",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(Order)14028_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(State)14054_storage": {
        "encoding": "inplace",
        "label": "struct Book.State",
        "members": [
          {
            "astId": 14039,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(BookKey)13009_storage"
          },
          {
            "astId": 14045,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "queues",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_userDefinedValueType(Tick)17880,t_struct(Queue)14036_storage)"
          },
          {
            "astId": 14049,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "tickBitmap",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 14053,
            "contract": "contracts/BookManager.sol:BookManager",
            "label": "totalClaimableOf",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint24,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_userDefinedValueType(BookId)14733": {
        "encoding": "inplace",
        "label": "BookId",
        "numberOfBytes": "24"
      },
      "t_userDefinedValueType(Currency)14760": {
        "encoding": "inplace",
        "label": "Currency",
        "numberOfBytes": "20"
      },
      "t_userDefinedValueType(FeePolicy)16220": {
        "encoding": "inplace",
        "label": "FeePolicy",
        "numberOfBytes": "3"
      },
      "t_userDefinedValueType(Tick)17880": {
        "encoding": "inplace",
        "label": "Tick",
        "numberOfBytes": "3"
      }
    }
  }
}