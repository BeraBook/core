{
  "language": "Solidity",
  "sources": {
    "@clober/library/contracts/DirtyUint64.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.clober.io/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nlibrary DirtyUint64 {\n    error DirtyUint64Error(uint256 errorCode);\n    uint256 private constant _OVERFLOW_ERROR = 0;\n    uint256 private constant _UNDERFLOW_ERROR = 1;\n\n    function toDirtyUnsafe(uint64 cleanUint) internal pure returns (uint64 dirtyUint) {\n        assembly {\n            dirtyUint := add(cleanUint, 1)\n        }\n    }\n\n    function toDirty(uint64 cleanUint) internal pure returns (uint64 dirtyUint) {\n        assembly {\n            dirtyUint := add(cleanUint, 1)\n        }\n        if (dirtyUint == 0) {\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\n        }\n    }\n\n    function toClean(uint64 dirtyUint) internal pure returns (uint64 cleanUint) {\n        assembly {\n            cleanUint := sub(dirtyUint, gt(dirtyUint, 0))\n        }\n    }\n\n    function addClean(uint64 current, uint64 cleanUint) internal pure returns (uint64) {\n        assembly {\n            current := add(add(current, iszero(current)), cleanUint)\n        }\n        if (current < cleanUint) {\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\n        }\n        return current;\n    }\n\n    function addDirty(uint64 current, uint64 dirtyUint) internal pure returns (uint64) {\n        assembly {\n            current := sub(add(add(current, iszero(current)), add(dirtyUint, iszero(dirtyUint))), 1)\n        }\n        if (current < dirtyUint) {\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\n        }\n        return current;\n    }\n\n    function subClean(uint64 current, uint64 cleanUint) internal pure returns (uint64 ret) {\n        assembly {\n            current := add(current, iszero(current))\n            ret := sub(current, cleanUint)\n        }\n        if (current < ret || ret == 0) {\n            revert DirtyUint64Error(_UNDERFLOW_ERROR);\n        }\n    }\n\n    function subDirty(uint64 current, uint64 dirtyUint) internal pure returns (uint64 ret) {\n        assembly {\n            current := add(current, iszero(current))\n            ret := sub(add(current, 1), add(dirtyUint, iszero(dirtyUint)))\n        }\n        if (current < ret || ret == 0) {\n            revert DirtyUint64Error(_UNDERFLOW_ERROR);\n        }\n    }\n\n    function sumPackedUnsafe(\n        uint256 packed,\n        uint256 from,\n        uint256 to\n    ) internal pure returns (uint64 ret) {\n        packed = packed >> (from << 6);\n        unchecked {\n            for (uint256 i = from; i < to; ++i) {\n                assembly {\n                    let element := and(packed, 0xffffffffffffffff)\n                    ret := add(ret, add(element, iszero(element)))\n                    packed := shr(64, packed)\n                }\n            }\n        }\n        assembly {\n            ret := sub(ret, sub(to, from))\n        }\n    }\n}\n"
    },
    "@clober/library/contracts/PackedUint256.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.clober.io/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nlibrary PackedUint256 {\n    error PackedUint256Error(uint256 errorCode);\n    uint256 private constant _UINT8_INDEX_ERROR = 0;\n    uint256 private constant _UINT16_INDEX_ERROR = 1;\n    uint256 private constant _UINT32_INDEX_ERROR = 2;\n    uint256 private constant _UINT64_INDEX_ERROR = 3;\n\n    uint256 private constant _MAX_UINT64 = type(uint64).max;\n    uint256 private constant _MAX_UINT32 = type(uint32).max;\n    uint256 private constant _MAX_UINT16 = type(uint16).max;\n    uint256 private constant _MAX_UINT8 = type(uint8).max;\n\n    function get8Unsafe(uint256 packed, uint256 index) internal pure returns (uint8 ret) {\n        assembly {\n            ret := shr(shl(3, index), packed)\n        }\n    }\n\n    function get8(uint256 packed, uint256 index) internal pure returns (uint8 ret) {\n        if (index > 31) {\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\n        }\n        assembly {\n            ret := shr(shl(3, index), packed)\n        }\n    }\n\n    function get16Unsafe(uint256 packed, uint256 index) internal pure returns (uint16 ret) {\n        assembly {\n            ret := shr(shl(4, index), packed)\n        }\n    }\n\n    function get16(uint256 packed, uint256 index) internal pure returns (uint16 ret) {\n        if (index > 15) {\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\n        }\n        assembly {\n            ret := shr(shl(4, index), packed)\n        }\n    }\n\n    function get32Unsafe(uint256 packed, uint256 index) internal pure returns (uint32 ret) {\n        assembly {\n            ret := shr(shl(5, index), packed)\n        }\n    }\n\n    function get32(uint256 packed, uint256 index) internal pure returns (uint32 ret) {\n        if (index > 7) {\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\n        }\n        assembly {\n            ret := shr(shl(5, index), packed)\n        }\n    }\n\n    function get64Unsafe(uint256 packed, uint256 index) internal pure returns (uint64 ret) {\n        assembly {\n            ret := shr(shl(6, index), packed)\n        }\n    }\n\n    function get64(uint256 packed, uint256 index) internal pure returns (uint64 ret) {\n        if (index > 3) {\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\n        }\n        assembly {\n            ret := shr(shl(6, index), packed)\n        }\n    }\n\n    function add8Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint8 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(shl(3, index), casted))\n        }\n    }\n\n    function add8(\n        uint256 packed,\n        uint256 index,\n        uint8 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 31) {\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\n        }\n        uint8 current = get8Unsafe(packed, index);\n        current += value;\n        ret = update8Unsafe(packed, index, current);\n    }\n\n    function add16Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint16 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(shl(4, index), casted))\n        }\n    }\n\n    function add16(\n        uint256 packed,\n        uint256 index,\n        uint16 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 15) {\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\n        }\n        uint16 current = get16Unsafe(packed, index);\n        current += value;\n        ret = update16Unsafe(packed, index, current);\n    }\n\n    function add32Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint32 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(shl(5, index), casted))\n        }\n    }\n\n    function add32(\n        uint256 packed,\n        uint256 index,\n        uint32 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 7) {\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\n        }\n        uint32 current = get32Unsafe(packed, index);\n        current += value;\n        ret = update32Unsafe(packed, index, current);\n    }\n\n    function add64Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint64 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(shl(6, index), casted))\n        }\n    }\n\n    function add64(\n        uint256 packed,\n        uint256 index,\n        uint64 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 3) {\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\n        }\n        uint64 current = get64Unsafe(packed, index);\n        current += value;\n        ret = update64Unsafe(packed, index, current);\n    }\n\n    function sub8Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint8 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := sub(packed, shl(shl(3, index), casted))\n        }\n    }\n\n    function sub8(\n        uint256 packed,\n        uint256 index,\n        uint8 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 31) {\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\n        }\n        uint8 current = get8Unsafe(packed, index);\n        current -= value;\n        ret = update8Unsafe(packed, index, current);\n    }\n\n    function sub16Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint16 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := sub(packed, shl(shl(4, index), casted))\n        }\n    }\n\n    function sub16(\n        uint256 packed,\n        uint256 index,\n        uint16 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 15) {\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\n        }\n        uint16 current = get16Unsafe(packed, index);\n        current -= value;\n        ret = update16Unsafe(packed, index, current);\n    }\n\n    function sub32Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint32 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := sub(packed, shl(shl(5, index), casted))\n        }\n    }\n\n    function sub32(\n        uint256 packed,\n        uint256 index,\n        uint32 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 7) {\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\n        }\n        uint32 current = get32Unsafe(packed, index);\n        current -= value;\n        ret = update32Unsafe(packed, index, current);\n    }\n\n    function sub64Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint64 value\n    ) internal pure returns (uint256 ret) {\n        uint256 casted = value;\n        assembly {\n            ret := sub(packed, shl(shl(6, index), casted))\n        }\n    }\n\n    function sub64(\n        uint256 packed,\n        uint256 index,\n        uint64 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 3) {\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\n        }\n        uint64 current = get64Unsafe(packed, index);\n        current -= value;\n        ret = update64Unsafe(packed, index, current);\n    }\n\n    function update8Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint8 value\n    ) internal pure returns (uint256 ret) {\n        unchecked {\n            index = index << 3;\n            packed = packed - (packed & (_MAX_UINT8 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function update8(\n        uint256 packed,\n        uint256 index,\n        uint8 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 31) {\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\n        }\n        unchecked {\n            index = index << 3;\n            packed = packed - (packed & (_MAX_UINT8 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function update16Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint16 value\n    ) internal pure returns (uint256 ret) {\n        unchecked {\n            index = index << 4;\n            packed = packed - (packed & (_MAX_UINT16 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function update16(\n        uint256 packed,\n        uint256 index,\n        uint16 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 15) {\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\n        }\n        unchecked {\n            index = index << 4;\n            packed = packed - (packed & (_MAX_UINT16 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function update32Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint32 value\n    ) internal pure returns (uint256 ret) {\n        unchecked {\n            index = index << 5;\n            packed = packed - (packed & (_MAX_UINT32 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function update32(\n        uint256 packed,\n        uint256 index,\n        uint32 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 7) {\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\n        }\n        unchecked {\n            index = index << 5;\n            packed = packed - (packed & (_MAX_UINT32 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function update64Unsafe(\n        uint256 packed,\n        uint256 index,\n        uint64 value\n    ) internal pure returns (uint256 ret) {\n        unchecked {\n            index = index << 6;\n            packed = packed - (packed & (_MAX_UINT64 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function update64(\n        uint256 packed,\n        uint256 index,\n        uint64 value\n    ) internal pure returns (uint256 ret) {\n        if (index > 3) {\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\n        }\n        unchecked {\n            index = index << 6;\n            packed = packed - (packed & (_MAX_UINT64 << index));\n        }\n        uint256 casted = value;\n        assembly {\n            ret := add(packed, shl(index, casted))\n        }\n    }\n\n    function total32(uint256 packed) internal pure returns (uint256) {\n        unchecked {\n            uint256 ret = _MAX_UINT32 & packed;\n            for (uint256 i = 0; i < 7; ++i) {\n                packed = packed >> 32;\n                ret += _MAX_UINT32 & packed;\n            }\n            return ret;\n        }\n    }\n\n    function total64(uint256 packed) internal pure returns (uint256) {\n        unchecked {\n            uint256 ret = _MAX_UINT64 & packed;\n            for (uint256 i = 0; i < 3; ++i) {\n                packed = packed >> 64;\n                ret += _MAX_UINT64 & packed;\n            }\n            return ret;\n        }\n    }\n\n    function sum32(\n        uint256 packed,\n        uint256 from,\n        uint256 to\n    ) internal pure returns (uint256) {\n        unchecked {\n            packed = packed >> (from << 5);\n            uint256 ret = 0;\n            for (uint256 i = from; i < to; ++i) {\n                ret += _MAX_UINT32 & packed;\n                packed = packed >> 32;\n            }\n            return ret;\n        }\n    }\n\n    function sum64(\n        uint256 packed,\n        uint256 from,\n        uint256 to\n    ) internal pure returns (uint256) {\n        unchecked {\n            packed = packed >> (from << 6);\n            uint256 ret = 0;\n            for (uint256 i = from; i < to; ++i) {\n                ret += _MAX_UINT64 & packed;\n                packed = packed >> 64;\n            }\n            return ret;\n        }\n    }\n}\n"
    },
    "@clober/library/contracts/SegmentedSegmentTree.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.clober.io/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport \"./PackedUint256.sol\";\nimport \"./DirtyUint64.sol\";\n\n/**\n🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲\n\n                  Segmented Segment Tree\n                               by Clober\n\n____________/\\\\\\_______________/\\\\\\\\\\____________/\\\\\\____\n __________/\\\\\\\\\\___________/\\\\\\\\////___________/\\\\\\\\\\____\n  ________/\\\\\\/\\\\\\________/\\\\\\///______________/\\\\\\/\\\\\\____\n   ______/\\\\\\/\\/\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\/\\/\\\\\\____\n    ____/\\\\\\/__\\/\\\\\\_____/\\\\\\\\///////\\\\\\_____/\\\\\\/__\\/\\\\\\____\n     __/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\______\\//\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\n      _\\///////////\\\\\\//__\\//\\\\\\______/\\\\\\__\\///////////\\\\\\//__\n       ___________\\/\\\\\\_____\\///\\\\\\\\\\\\\\\\\\/_____________\\/\\\\\\____\n        ___________\\///________\\/////////_______________\\///_____\n\n          4 Layers of 64-bit nodes, hence 464\n\n🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲\n*/\n\nlibrary SegmentedSegmentTree {\n    using PackedUint256 for uint256;\n    using DirtyUint64 for uint64;\n\n    error SegmentedSegmentTreeError(uint256 errorCode);\n    uint256 private constant _INDEX_ERROR = 0;\n    uint256 private constant _OVERFLOW_ERROR = 1;\n\n    //    uint8 private constant _R = 2; // There are `2` root node groups\n    //    uint8 private constant _C = 4; // There are `4` children (each child is a node group of its own) for each node\n    uint8 private constant _L = 4; // There are `4` layers of node groups\n    uint256 private constant _P = 4; // uint256 / uint64 = `4`\n    uint256 private constant _P_M = 3; // % 4 = & `3`\n    uint256 private constant _P_P = 2; // 2 ** `2` = 4\n    uint256 private constant _N_P = 4; // C * P = 2 ** `4`\n    uint256 private constant _MAX_NODES = 2**15; // (R * P) * ((C * P) ** (L - 1)) = `32768`\n    uint256 private constant _MAX_NODES_P_MINUS_ONE = 14; // MAX_NODES / R = 2 ** `14`\n\n    struct Core {\n        mapping(uint256 => uint256)[_L] layers;\n    }\n\n    struct LayerIndex {\n        uint256 group;\n        uint256 node;\n    }\n\n    function get(Core storage core, uint256 index) internal view returns (uint64 ret) {\n        if (index >= _MAX_NODES) {\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\n        }\n        unchecked {\n            ret = core.layers[_L - 1][index >> _P_P].get64(index & _P_M).toClean();\n        }\n    }\n\n    function total(Core storage core) internal view returns (uint64) {\n        return\n            DirtyUint64.sumPackedUnsafe(core.layers[0][0], 0, _P) +\n            DirtyUint64.sumPackedUnsafe(core.layers[0][1], 0, _P);\n    }\n\n    function query(\n        Core storage core,\n        uint256 left,\n        uint256 right\n    ) internal view returns (uint64 sum) {\n        if (left == right) {\n            return 0;\n        }\n        // right should be greater than left\n        if (left >= right) {\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\n        }\n        if (right > _MAX_NODES) {\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\n        }\n\n        LayerIndex[] memory leftIndices = _getLayerIndices(left);\n        LayerIndex[] memory rightIndices = _getLayerIndices(right);\n        uint256 ret;\n        uint256 deficit;\n\n        unchecked {\n            uint256 leftNodeIndex;\n            uint256 rightNodeIndex;\n            for (uint256 l = _L - 1; ; --l) {\n                LayerIndex memory leftIndex = leftIndices[l];\n                LayerIndex memory rightIndex = rightIndices[l];\n                leftNodeIndex += leftIndex.node;\n                rightNodeIndex += rightIndex.node;\n\n                if (rightIndex.group == leftIndex.group) {\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, rightNodeIndex);\n                    break;\n                }\n\n                if (rightIndex.group - leftIndex.group < 4) {\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\n\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\n\n                    for (uint256 group = leftIndex.group + 1; group < rightIndex.group; group++) {\n                        ret += DirtyUint64.sumPackedUnsafe(core.layers[l][group], 0, _P);\n                    }\n                    break;\n                }\n\n                if (leftIndex.group % 4 == 0) {\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], 0, leftNodeIndex);\n                    leftNodeIndex = 0;\n                } else if (leftIndex.group % 4 == 1) {\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group - 1], 0, _P);\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], 0, leftNodeIndex);\n                    leftNodeIndex = 0;\n                } else if (leftIndex.group % 4 == 2) {\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group + 1], 0, _P);\n                    leftNodeIndex = 1;\n                } else {\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\n                    leftNodeIndex = 1;\n                }\n\n                if (rightIndex.group % 4 == 0) {\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\n                    rightNodeIndex = 0;\n                } else if (rightIndex.group % 4 == 1) {\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group - 1], 0, _P);\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\n                    rightNodeIndex = 0;\n                } else if (rightIndex.group % 4 == 2) {\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], rightNodeIndex, _P);\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group + 1], 0, _P);\n                    rightNodeIndex = 1;\n                } else {\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], rightNodeIndex, _P);\n                    rightNodeIndex = 1;\n                }\n            }\n            ret -= deficit;\n        }\n        sum = uint64(ret);\n    }\n\n    function update(\n        Core storage core,\n        uint256 index,\n        uint64 value\n    ) internal returns (uint64 replaced) {\n        if (index >= _MAX_NODES) {\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\n        }\n        LayerIndex[] memory indices = _getLayerIndices(index);\n        unchecked {\n            LayerIndex memory bottomIndex = indices[_L - 1];\n            replaced = core.layers[_L - 1][bottomIndex.group].get64Unsafe(bottomIndex.node).toClean();\n            if (replaced >= value) {\n                uint64 diff = replaced - value;\n                for (uint256 l = 0; l < _L; ++l) {\n                    LayerIndex memory layerIndex = indices[l];\n                    uint256 node = core.layers[l][layerIndex.group];\n                    core.layers[l][layerIndex.group] = node.update64(\n                        layerIndex.node,\n                        node.get64(layerIndex.node).subClean(diff)\n                    );\n                }\n            } else {\n                uint64 diff = value - replaced;\n                if (total(core) > type(uint64).max - diff) revert SegmentedSegmentTreeError(_OVERFLOW_ERROR);\n                for (uint256 l = 0; l < _L; ++l) {\n                    LayerIndex memory layerIndex = indices[l];\n                    uint256 node = core.layers[l][layerIndex.group];\n                    core.layers[l][layerIndex.group] = node.update64(\n                        layerIndex.node,\n                        node.get64(layerIndex.node).addClean(diff)\n                    );\n                }\n            }\n        }\n    }\n\n    function _getLayerIndices(uint256 index) private pure returns (LayerIndex[] memory) {\n        unchecked {\n            LayerIndex[] memory indices = new LayerIndex[](_L);\n            uint256 shifter = _MAX_NODES_P_MINUS_ONE;\n            for (uint256 l = 0; l < _L; ++l) {\n                indices[l] = LayerIndex({group: index >> shifter, node: (index >> (shifter - _P_P)) & _P_M});\n                shifter = shifter - _N_P;\n            }\n            return indices;\n        }\n    }\n}\n\n/*\n * Segmented Segment Tree is a Segment Tree\n * that has been compressed so that `C` nodes\n * are compressed into a single uint256.\n *\n * Each node in a non-leaf node group is the sum of the\n * total sum of each child node group that it represents.\n * Each non-leaf node represents `E` node groups.\n *\n * A node group consists of `S` uint256.\n *\n * By expressing the index in `N` notation,\n * we can find the index in each respective layer\n *\n * S: Size of each node group\n * C: Compression Coefficient\n * E: Expansion Coefficient\n * L: Number of Layers\n * N: Notation, S * C * E\n *\n * `E` will not be considered for this version of the implementation. (E = 2)\n */\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/BookManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"./libraries/BookId.sol\";\nimport \"./libraries/Book.sol\";\nimport \"./libraries/OrderId.sol\";\nimport \"./libraries/Lockers.sol\";\nimport \"./interfaces/ILocker.sol\";\nimport \"./libraries/ERC721Permit.sol\";\nimport \"./libraries/Hooks.sol\";\n\ncontract BookManager is IBookManager, Ownable2Step, ERC721Permit {\n    using SafeCast for *;\n    using BookIdLibrary for IBookManager.BookKey;\n    using TickLibrary for Tick;\n    using Book for Book.State;\n    using OrderIdLibrary for OrderId;\n    using CurrencyLibrary for Currency;\n    using FeePolicyLibrary for FeePolicy;\n    using Hooks for IHooks;\n\n    string public override baseURI; // slot 10\n    string public override contractURI;\n    address public override defaultProvider;\n\n    mapping(address locker => mapping(Currency currency => int256 currencyDelta)) public override currencyDelta;\n    mapping(Currency currency => uint256) public override reservesOf;\n    mapping(BookId id => Book.State) internal _books;\n    mapping(address provider => bool) public override isWhitelisted;\n    mapping(address provider => mapping(Currency currency => uint256 amount)) public override tokenOwed;\n\n    constructor(\n        address owner_,\n        address defaultProvider_,\n        string memory baseURI_,\n        string memory contractURI_,\n        string memory name_,\n        string memory symbol_\n    ) Ownable(owner_) ERC721Permit(name_, symbol_, \"2\") {\n        setDefaultProvider(defaultProvider_);\n        baseURI = baseURI_;\n        contractURI = contractURI_;\n        Lockers.initialize();\n    }\n\n    modifier onlyByLocker() {\n        _checkLocker(msg.sender);\n        _;\n    }\n\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view {\n        _checkAuthorized(owner, spender, tokenId);\n    }\n\n    function _checkLocker(address caller) internal view {\n        address locker = Lockers.getCurrentLocker();\n        IHooks hook = Lockers.getCurrentHook();\n        if (caller == locker) return;\n        if (caller == address(hook) && hook.hasPermission(Hooks.ACCESS_LOCK_FLAG)) return;\n        revert LockedBy(locker, address(hook));\n    }\n\n    function getBookKey(BookId id) external view returns (BookKey memory) {\n        return _books[id].key;\n    }\n\n    function getOrder(OrderId id) external view returns (OrderInfo memory) {\n        (BookId bookId, Tick tick, uint40 orderIndex) = id.decode();\n        Book.State storage book = _books[bookId];\n        Book.Order memory order = book.getOrder(tick, orderIndex);\n        uint64 claimable = book.calculateClaimableRawAmount(tick, orderIndex);\n        unchecked {\n            return OrderInfo({provider: order.provider, open: order.pending - claimable, claimable: claimable});\n        }\n    }\n\n    function open(BookKey calldata key, bytes calldata hookData) external onlyByLocker {\n        // @dev Also, the book opener should set unit at least circulatingTotalSupply / type(uint64).max to avoid overflow.\n        //      But it is not checked here because it is not possible to check it without knowing circulatingTotalSupply.\n        if (key.unit == 0) revert InvalidUnit();\n\n        if (!(key.makerPolicy.isValid() && key.takerPolicy.isValid())) revert InvalidFeePolicy();\n        unchecked {\n            if (key.makerPolicy.rate() + key.takerPolicy.rate() < 0) revert InvalidFeePolicy();\n        }\n        if (key.makerPolicy.rate() < 0 || key.takerPolicy.rate() < 0) {\n            if (key.makerPolicy.usesQuote() != key.takerPolicy.usesQuote()) revert InvalidFeePolicy();\n        }\n        if (!key.hooks.isValidHookAddress()) revert Hooks.HookAddressNotValid(address(key.hooks));\n\n        key.hooks.beforeOpen(key, hookData);\n\n        BookId id = key.toId();\n        _books[id].open(key);\n\n        key.hooks.afterOpen(key, hookData);\n\n        emit Open(id, key.base, key.quote, key.unit, key.makerPolicy, key.takerPolicy, key.hooks);\n    }\n\n    function lock(address locker, bytes calldata data) external returns (bytes memory result) {\n        Lockers.push(locker, msg.sender);\n\n        // the locker does everything in this callback, including paying what they owe via calls to settle\n        result = ILocker(locker).lockAcquired(msg.sender, data);\n\n        (uint128 length, uint128 nonzeroDeltaCount) = Lockers.lockData();\n        if (length == 1) {\n            if (nonzeroDeltaCount != 0) revert CurrencyNotSettled();\n            Lockers.clear();\n        } else {\n            Lockers.pop();\n        }\n    }\n\n    function getLock(uint256 i) external view returns (address, address) {\n        return (Lockers.getLocker(i), Lockers.getLockCaller(i));\n    }\n\n    function getLockData() external view returns (uint128, uint128) {\n        return Lockers.lockData();\n    }\n\n    function getDepth(BookId id, Tick tick) external view returns (uint64) {\n        return _books[id].depth(tick);\n    }\n\n    function getLowest(BookId id) external view returns (Tick) {\n        return _books[id].lowest();\n    }\n\n    function minGreaterThan(BookId id, Tick tick) external view returns (Tick) {\n        return _books[id].minGreaterThan(tick);\n    }\n\n    function isEmpty(BookId id) external view returns (bool) {\n        return _books[id].isEmpty();\n    }\n\n    function make(MakeParams calldata params, bytes calldata hookData)\n        external\n        onlyByLocker\n        returns (OrderId id, uint256 quoteAmount)\n    {\n        if (params.provider != address(0) && !isWhitelisted[params.provider]) revert InvalidProvider(params.provider);\n        params.tick.validateTick();\n        BookId bookId = params.key.toId();\n        Book.State storage book = _books[bookId];\n        book.checkOpened();\n\n        if (!params.key.hooks.beforeMake(params, hookData)) return (OrderId.wrap(0), 0);\n\n        uint40 orderIndex = book.make(params.tick, params.amount, params.provider);\n        id = OrderIdLibrary.encode(bookId, params.tick, orderIndex);\n        int256 quoteDelta;\n        unchecked {\n            // @dev uint64 * uint64 < type(uint256).max\n            quoteAmount = uint256(params.amount) * params.key.unit;\n\n            // @dev 0 < uint64 * uint64 + rate * uint64 * uint64 < type(int256).max\n            quoteDelta = int256(quoteAmount);\n            if (params.key.makerPolicy.usesQuote()) {\n                quoteDelta += params.key.makerPolicy.calculateFee(quoteAmount, false);\n                quoteAmount = uint256(quoteDelta);\n            }\n        }\n\n        _accountDelta(params.key.quote, quoteDelta);\n\n        _mint(msg.sender, OrderId.unwrap(id));\n\n        params.key.hooks.afterMake(params, id, hookData);\n\n        emit Make(bookId, msg.sender, params.tick, orderIndex, params.amount);\n    }\n\n    function take(TakeParams calldata params, bytes calldata hookData)\n        external\n        onlyByLocker\n        returns (uint256 quoteAmount, uint256 baseAmount)\n    {\n        params.tick.validateTick();\n        BookId bookId = params.key.toId();\n        Book.State storage book = _books[bookId];\n        book.checkOpened();\n\n        if (!params.key.hooks.beforeTake(params, hookData)) return (0, 0);\n\n        uint64 takenAmount = book.take(params.tick, params.maxAmount);\n        unchecked {\n            quoteAmount = uint256(takenAmount) * params.key.unit;\n        }\n        baseAmount = params.tick.quoteToBase(quoteAmount, true);\n\n        int256 quoteDelta = int256(quoteAmount);\n        int256 baseDelta = baseAmount.toInt256();\n        if (params.key.takerPolicy.usesQuote()) {\n            quoteDelta -= params.key.takerPolicy.calculateFee(quoteAmount, false);\n            quoteAmount = uint256(quoteDelta);\n        } else {\n            baseDelta += params.key.takerPolicy.calculateFee(baseAmount, false);\n            baseAmount = uint256(baseDelta);\n        }\n        _accountDelta(params.key.quote, -quoteDelta);\n        _accountDelta(params.key.base, baseDelta);\n\n        params.key.hooks.afterTake(params, takenAmount, hookData);\n\n        emit Take(bookId, msg.sender, params.tick, takenAmount);\n    }\n\n    function cancel(CancelParams calldata params, bytes calldata hookData)\n        external\n        onlyByLocker\n        returns (uint256 canceledAmount)\n    {\n        _checkAuthorized(_ownerOf(OrderId.unwrap(params.id)), msg.sender, OrderId.unwrap(params.id));\n\n        Book.State storage book = _books[params.id.getBookId()];\n        BookKey memory key = book.key;\n\n        if (!key.hooks.beforeCancel(params, hookData)) return 0;\n\n        (uint64 canceled, uint64 pending) = book.cancel(params.id, params.to);\n\n        unchecked {\n            canceledAmount = uint256(canceled) * key.unit;\n            if (key.makerPolicy.usesQuote()) {\n                int256 quoteFee = key.makerPolicy.calculateFee(canceledAmount, true);\n                canceledAmount = uint256(int256(canceledAmount) + quoteFee);\n            }\n        }\n\n        if (pending == 0) _burn(OrderId.unwrap(params.id));\n\n        _accountDelta(key.quote, -int256(canceledAmount));\n\n        key.hooks.afterCancel(params, canceled, hookData);\n\n        emit Cancel(params.id, canceled);\n    }\n\n    function claim(OrderId id, bytes calldata hookData) external onlyByLocker returns (uint256 claimedAmount) {\n        _checkAuthorized(_ownerOf(OrderId.unwrap(id)), msg.sender, OrderId.unwrap(id));\n\n        Tick tick;\n        uint40 orderIndex;\n        Book.State storage book;\n        {\n            BookId bookId;\n            (bookId, tick, orderIndex) = id.decode();\n            book = _books[bookId];\n        }\n        IBookManager.BookKey memory key = book.key;\n\n        if (!key.hooks.beforeClaim(id, hookData)) return 0;\n\n        uint64 claimedRaw = book.claim(tick, orderIndex);\n\n        int256 quoteFee;\n        int256 baseFee;\n        {\n            uint256 claimedInQuote;\n            unchecked {\n                claimedInQuote = uint256(claimedRaw) * key.unit;\n            }\n            claimedAmount = tick.quoteToBase(claimedInQuote, false);\n\n            FeePolicy makerPolicy = key.makerPolicy;\n            FeePolicy takerPolicy = key.takerPolicy;\n            if (takerPolicy.usesQuote()) {\n                quoteFee = takerPolicy.calculateFee(claimedInQuote, true);\n            } else {\n                baseFee = takerPolicy.calculateFee(claimedAmount, true);\n            }\n\n            if (makerPolicy.usesQuote()) {\n                quoteFee += makerPolicy.calculateFee(claimedInQuote, true);\n            } else {\n                int256 makeFee = makerPolicy.calculateFee(claimedAmount, false);\n                baseFee += makeFee;\n                claimedAmount = makeFee > 0 ? claimedAmount - uint256(makeFee) : claimedAmount + uint256(-makeFee);\n            }\n        }\n\n        Book.Order memory order = book.getOrder(tick, orderIndex);\n        address provider = order.provider;\n        if (provider == address(0)) provider = defaultProvider;\n        if (quoteFee > 0) tokenOwed[provider][key.quote] += quoteFee.toUint256();\n        if (baseFee > 0) tokenOwed[provider][key.base] += baseFee.toUint256();\n\n        if (order.pending == 0) _burn(OrderId.unwrap(id));\n\n        _accountDelta(key.base, -claimedAmount.toInt256());\n\n        key.hooks.afterClaim(id, claimedRaw, hookData);\n\n        emit Claim(id, claimedRaw);\n    }\n\n    function collect(address provider, Currency currency) external {\n        uint256 amount = tokenOwed[provider][currency];\n        if (amount > 0) {\n            tokenOwed[provider][currency] = 0;\n            reservesOf[currency] -= amount;\n            currency.transfer(provider, amount);\n            emit Collect(provider, currency, amount);\n        }\n    }\n\n    function withdraw(Currency currency, address to, uint256 amount) external onlyByLocker {\n        if (amount > 0) {\n            _accountDelta(currency, amount.toInt256());\n            reservesOf[currency] -= amount;\n            currency.transfer(to, amount);\n        }\n    }\n\n    function settle(Currency currency) external payable onlyByLocker returns (uint256 paid) {\n        uint256 reservesBefore = reservesOf[currency];\n        reservesOf[currency] = currency.balanceOfSelf();\n        paid = reservesOf[currency] - reservesBefore;\n        // subtraction must be safe\n        _accountDelta(currency, -(paid.toInt256()));\n    }\n\n    function whitelist(address provider) external onlyOwner {\n        isWhitelisted[provider] = true;\n        emit Whitelist(provider);\n    }\n\n    function delist(address provider) external onlyOwner {\n        isWhitelisted[provider] = false;\n        emit Delist(provider);\n    }\n\n    function setDefaultProvider(address newDefaultProvider) public onlyOwner {\n        address oldDefaultProvider = defaultProvider;\n        defaultProvider = newDefaultProvider;\n        emit SetDefaultProvider(oldDefaultProvider, newDefaultProvider);\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    function _accountDelta(Currency currency, int256 delta) internal {\n        if (delta == 0) return;\n\n        address locker = Lockers.getCurrentLocker();\n        int256 current = currencyDelta[locker][currency];\n        int256 next = current + delta;\n\n        unchecked {\n            if (next == 0) Lockers.decrementNonzeroDeltaCount();\n            else if (current == 0) Lockers.incrementNonzeroDeltaCount();\n        }\n\n        currencyDelta[locker][currency] = next;\n    }\n\n    function load(bytes32 slot) external view returns (bytes32 value) {\n        assembly {\n            value := sload(slot)\n        }\n    }\n\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory value) {\n        value = new bytes(32 * nSlot);\n\n        assembly {\n            for { let i := 0 } lt(i, nSlot) { i := add(i, 1) } {\n                mstore(add(value, mul(add(i, 1), 32)), sload(add(startSlot, i)))\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/BookViewer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\nimport \"./interfaces/IBookViewer.sol\";\nimport \"./libraries/Lockers.sol\";\nimport \"./interfaces/IController.sol\";\n\ncontract BookViewer is IBookViewer {\n    using SafeCast for *;\n    using TickLibrary for *;\n    using Math for uint256;\n    using SignificantBit for uint256;\n    using FeePolicyLibrary for FeePolicy;\n\n    IBookManager public immutable bookManager;\n\n    constructor(IBookManager bookManager_) {\n        bookManager = bookManager_;\n    }\n\n    function getLiquidity(BookId id, Tick tick, uint256 n) external view returns (Liquidity[] memory liquidity) {\n        liquidity = new Liquidity[](n);\n        if (bookManager.getDepth(id, tick) == 0) tick = bookManager.minGreaterThan(id, tick);\n        for (uint256 i = 0; i < n; ++i) {\n            if (Tick.unwrap(tick) == type(int24).min) break;\n            liquidity[i] = Liquidity({tick: tick, depth: bookManager.getDepth(id, tick)});\n            tick = bookManager.minGreaterThan(id, tick);\n        }\n    }\n\n    function getExpectedInput(IController.TakeOrderParams memory params)\n        external\n        view\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\n    {\n        IBookManager.BookKey memory key = bookManager.getBookKey(params.id);\n\n        if (bookManager.isEmpty(params.id)) return (0, 0);\n\n        Tick tick = bookManager.getLowest(params.id);\n\n        while (Tick.unwrap(tick) > type(int24).min) {\n            unchecked {\n                if (params.limitPrice < tick.toPrice()) break;\n                uint256 maxAmount;\n                if (key.takerPolicy.usesQuote()) {\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.quoteAmount - takenQuoteAmount, true);\n                } else {\n                    maxAmount = params.quoteAmount - takenQuoteAmount;\n                }\n                maxAmount = maxAmount.divide(key.unit, true);\n\n                if (maxAmount == 0) break;\n                uint256 currentDepth = bookManager.getDepth(params.id, tick);\n                uint256 quoteAmount = (currentDepth > maxAmount ? maxAmount : currentDepth) * key.unit;\n                uint256 baseAmount = tick.quoteToBase(quoteAmount, true);\n                if (key.takerPolicy.usesQuote()) {\n                    quoteAmount = uint256(int256(quoteAmount) - key.takerPolicy.calculateFee(quoteAmount, false));\n                } else {\n                    baseAmount = uint256(baseAmount.toInt256() + key.takerPolicy.calculateFee(baseAmount, false));\n                }\n                if (quoteAmount == 0) break;\n\n                takenQuoteAmount += quoteAmount;\n                spendBaseAmount += baseAmount;\n                if (params.quoteAmount <= takenQuoteAmount) break;\n                tick = bookManager.minGreaterThan(params.id, tick);\n            }\n        }\n    }\n\n    function getExpectedOutput(IController.SpendOrderParams memory params)\n        external\n        view\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\n    {\n        IBookManager.BookKey memory key = bookManager.getBookKey(params.id);\n\n        if (bookManager.isEmpty(params.id)) return (0, 0);\n\n        Tick tick = bookManager.getLowest(params.id);\n\n        unchecked {\n            while (spendBaseAmount <= params.baseAmount && Tick.unwrap(tick) > type(int24).min) {\n                if (params.limitPrice < tick.toPrice()) break;\n                uint256 maxAmount;\n                if (key.takerPolicy.usesQuote()) {\n                    maxAmount = params.baseAmount - spendBaseAmount;\n                } else {\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.baseAmount - spendBaseAmount, false);\n                }\n                maxAmount = tick.baseToQuote(maxAmount, false) / key.unit;\n\n                if (maxAmount == 0) break;\n                uint256 currentDepth = bookManager.getDepth(params.id, tick);\n                uint256 quoteAmount = (currentDepth > maxAmount ? maxAmount : currentDepth) * key.unit;\n                uint256 baseAmount = tick.quoteToBase(quoteAmount, true);\n                if (key.takerPolicy.usesQuote()) {\n                    quoteAmount = uint256(int256(quoteAmount) - key.takerPolicy.calculateFee(quoteAmount, false));\n                } else {\n                    baseAmount = uint256(baseAmount.toInt256() + key.takerPolicy.calculateFee(baseAmount, false));\n                }\n                if (baseAmount == 0) break;\n\n                takenQuoteAmount += quoteAmount;\n                spendBaseAmount += baseAmount;\n                tick = bookManager.minGreaterThan(params.id, tick);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Controller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./interfaces/IController.sol\";\nimport \"./interfaces/ILocker.sol\";\nimport \"./interfaces/IBookManager.sol\";\nimport \"./libraries/OrderId.sol\";\n\ncontract Controller is IController, ILocker, ReentrancyGuard {\n    using TickLibrary for *;\n    using OrderIdLibrary for OrderId;\n    using BookIdLibrary for IBookManager.BookKey;\n    using SafeERC20 for IERC20;\n    using SafeCast for uint256;\n    using Math for uint256;\n    using CurrencyLibrary for Currency;\n    using FeePolicyLibrary for FeePolicy;\n\n    IBookManager private immutable _bookManager;\n\n    constructor(address bookManager) {\n        _bookManager = IBookManager(bookManager);\n    }\n\n    modifier checkDeadline(uint64 deadline) {\n        if (block.timestamp > deadline) revert Deadline();\n        _;\n    }\n\n    modifier permitERC20(ERC20PermitParams[] calldata permitParamsList) {\n        _permitERC20(permitParamsList);\n        _;\n    }\n\n    function getDepth(BookId id, Tick tick) external view returns (uint256) {\n        return uint256(_bookManager.getDepth(id, tick)) * _bookManager.getBookKey(id).unit;\n    }\n\n    function getLowestPrice(BookId id) external view returns (uint256) {\n        return _bookManager.getLowest(id).toPrice();\n    }\n\n    function getOrder(OrderId orderId)\n        external\n        view\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount)\n    {\n        (BookId bookId, Tick tick,) = orderId.decode();\n        IBookManager.BookKey memory key = _bookManager.getBookKey(bookId);\n        uint256 unit = key.unit;\n        price = tick.toPrice();\n        IBookManager.OrderInfo memory orderInfo = _bookManager.getOrder(orderId);\n        provider = orderInfo.provider;\n        openAmount = unit * orderInfo.open;\n        FeePolicy makerPolicy = key.makerPolicy;\n        claimableAmount = tick.quoteToBase(unit * orderInfo.claimable, false);\n        if (!makerPolicy.usesQuote()) {\n            int256 fee = makerPolicy.calculateFee(claimableAmount, false);\n            claimableAmount = fee > 0 ? claimableAmount - uint256(fee) : claimableAmount + uint256(-fee);\n        }\n    }\n\n    function fromPrice(uint256 price) external pure returns (Tick) {\n        return price.fromPrice();\n    }\n\n    function toPrice(Tick tick) external pure returns (uint256) {\n        return tick.toPrice();\n    }\n\n    function lockAcquired(address sender, bytes memory data) external nonReentrant returns (bytes memory returnData) {\n        if (msg.sender != address(_bookManager) || sender != address(this)) revert InvalidAccess();\n        (address user, Action[] memory actionList, bytes[] memory orderParamsList, address[] memory tokensToSettle) =\n            abi.decode(data, (address, Action[], bytes[], address[]));\n\n        uint256 length = actionList.length;\n        OrderId[] memory ids = new OrderId[](length);\n        uint256 orderIdIndex;\n\n        for (uint256 i = 0; i < length; ++i) {\n            Action action = actionList[i];\n            if (action == Action.OPEN) {\n                _open(abi.decode(orderParamsList[i], (OpenBookParams)));\n            } else if (action == Action.MAKE) {\n                OrderId id = _make(abi.decode(orderParamsList[i], (MakeOrderParams)));\n                if (OrderId.unwrap(id) != 0) {\n                    _bookManager.transferFrom(address(this), user, OrderId.unwrap(id));\n                    ids[orderIdIndex++] = id;\n                }\n            } else if (action == Action.LIMIT) {\n                OrderId id = _limit(abi.decode(orderParamsList[i], (LimitOrderParams)));\n                if (OrderId.unwrap(id) != 0) {\n                    _bookManager.transferFrom(address(this), user, OrderId.unwrap(id));\n                    ids[orderIdIndex++] = id;\n                }\n            } else if (action == Action.TAKE) {\n                _take(abi.decode(orderParamsList[i], (TakeOrderParams)));\n            } else if (action == Action.SPEND) {\n                _spend(abi.decode(orderParamsList[i], (SpendOrderParams)));\n            } else if (action == Action.CLAIM) {\n                ClaimOrderParams memory claimOrderParams = abi.decode(orderParamsList[i], (ClaimOrderParams));\n                uint256 orderId = OrderId.unwrap(claimOrderParams.id);\n                _bookManager.checkAuthorized(_bookManager.ownerOf(orderId), user, orderId);\n                _claim(claimOrderParams);\n            } else if (action == Action.CANCEL) {\n                CancelOrderParams memory cancelOrderParams = abi.decode(orderParamsList[i], (CancelOrderParams));\n                uint256 orderId = OrderId.unwrap(cancelOrderParams.id);\n                _bookManager.checkAuthorized(_bookManager.ownerOf(orderId), user, orderId);\n                _cancel(cancelOrderParams);\n            } else {\n                revert InvalidAction();\n            }\n        }\n\n        _settleTokens(user, tokensToSettle);\n\n        assembly {\n            mstore(ids, orderIdIndex)\n        }\n        returnData = abi.encode(ids);\n    }\n\n    function execute(\n        Action[] calldata actionList,\n        bytes[] calldata paramsDataList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata erc20PermitParamsList,\n        ERC721PermitParams[] calldata erc721PermitParamsList,\n        uint64 deadline\n    ) external payable checkDeadline(deadline) returns (OrderId[] memory ids) {\n        if (actionList.length != paramsDataList.length) revert InvalidLength();\n        _permitERC20(erc20PermitParamsList);\n        _permitERC721(erc721PermitParamsList);\n\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        bytes memory result = _bookManager.lock(address(this), lockData);\n\n        if (result.length != 0) {\n            (ids) = abi.decode(result, (OrderId[]));\n        }\n        return ids;\n    }\n\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external checkDeadline(deadline) {\n        uint256 length = openBookParamsList.length;\n        Action[] memory actionList = new Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = Action.OPEN;\n            paramsDataList[i] = abi.encode(openBookParamsList[i]);\n        }\n        address[] memory tokensToSettle;\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        _bookManager.lock(address(this), lockData);\n    }\n\n    function limit(\n        LimitOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) returns (OrderId[] memory ids) {\n        uint256 length = orderParamsList.length;\n        Action[] memory actionList = new Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = Action.LIMIT;\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\n        }\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        bytes memory result = _bookManager.lock(address(this), lockData);\n        (ids) = abi.decode(result, (OrderId[]));\n    }\n\n    function make(\n        MakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) returns (OrderId[] memory ids) {\n        uint256 length = orderParamsList.length;\n        Action[] memory actionList = new Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = Action.MAKE;\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\n        }\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        bytes memory result = _bookManager.lock(address(this), lockData);\n        (ids) = abi.decode(result, (OrderId[]));\n    }\n\n    function take(\n        TakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) {\n        uint256 length = orderParamsList.length;\n        Action[] memory actionList = new Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = Action.TAKE;\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\n        }\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        _bookManager.lock(address(this), lockData);\n    }\n\n    function spend(\n        SpendOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) {\n        uint256 length = orderParamsList.length;\n        Action[] memory actionList = new Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = Action.SPEND;\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\n        }\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        _bookManager.lock(address(this), lockData);\n    }\n\n    function claim(\n        ClaimOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external checkDeadline(deadline) {\n        _permitERC721(permitParamsList);\n        uint256 length = orderParamsList.length;\n        Action[] memory actionList = new Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = Action.CLAIM;\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\n        }\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        _bookManager.lock(address(this), lockData);\n    }\n\n    function cancel(\n        CancelOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external checkDeadline(deadline) {\n        _permitERC721(permitParamsList);\n        uint256 length = orderParamsList.length;\n        Action[] memory actionList = new Action[](length);\n        bytes[] memory paramsDataList = new bytes[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            actionList[i] = Action.CANCEL;\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\n        }\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\n        _bookManager.lock(address(this), lockData);\n    }\n\n    function _open(OpenBookParams memory params) internal {\n        _bookManager.open(params.key, params.hookData);\n    }\n\n    function _make(MakeOrderParams memory params) internal returns (OrderId id) {\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id);\n\n        uint256 quoteAmount = params.quoteAmount;\n        if (key.makerPolicy.usesQuote()) {\n            quoteAmount = key.makerPolicy.calculateOriginalAmount(quoteAmount, false);\n        }\n        uint64 rawAmount = (quoteAmount / key.unit).toUint64();\n        if (rawAmount > 0) {\n            (id,) = _bookManager.make(\n                IBookManager.MakeParams({key: key, tick: params.tick, amount: rawAmount, provider: address(0)}),\n                params.hookData\n            );\n        }\n        return id;\n    }\n\n    function _limit(LimitOrderParams memory params) internal returns (OrderId id) {\n        (, uint256 spendBaseAmount) = _spend(\n            SpendOrderParams({\n                id: params.takeBookId,\n                limitPrice: params.limitPrice,\n                baseAmount: params.quoteAmount,\n                hookData: params.takeHookData\n            })\n        );\n        params.quoteAmount -= spendBaseAmount;\n        if (params.quoteAmount > 0) {\n            id = _make(\n                MakeOrderParams({\n                    id: params.makeBookId,\n                    quoteAmount: params.quoteAmount,\n                    tick: params.tick,\n                    hookData: params.makeHookData\n                })\n            );\n        }\n    }\n\n    function _take(TakeOrderParams memory params)\n        internal\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\n    {\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id);\n\n        while (params.quoteAmount > takenQuoteAmount && !_bookManager.isEmpty(params.id)) {\n            Tick tick = _bookManager.getLowest(params.id);\n            if (params.limitPrice < tick.toPrice()) break;\n            uint256 maxAmount;\n            unchecked {\n                if (key.takerPolicy.usesQuote()) {\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.quoteAmount - takenQuoteAmount, true);\n                } else {\n                    maxAmount = params.quoteAmount - takenQuoteAmount;\n                }\n            }\n            maxAmount = maxAmount.divide(key.unit, true);\n\n            if (maxAmount == 0) break;\n            (uint256 quoteAmount, uint256 baseAmount) = _bookManager.take(\n                IBookManager.TakeParams({key: key, tick: tick, maxAmount: maxAmount.toUint64()}), params.hookData\n            );\n            if (quoteAmount == 0) break;\n\n            takenQuoteAmount += quoteAmount;\n            spendBaseAmount += baseAmount;\n        }\n    }\n\n    function _spend(SpendOrderParams memory params)\n        internal\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\n    {\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id);\n\n        while (spendBaseAmount < params.baseAmount && !_bookManager.isEmpty(params.id)) {\n            Tick tick = _bookManager.getLowest(params.id);\n            if (params.limitPrice < tick.toPrice()) break;\n            uint256 maxAmount;\n            unchecked {\n                if (key.takerPolicy.usesQuote()) {\n                    maxAmount = params.baseAmount - spendBaseAmount;\n                } else {\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.baseAmount - spendBaseAmount, false);\n                }\n            }\n            maxAmount = tick.baseToQuote(maxAmount, false) / key.unit;\n            if (maxAmount == 0) break;\n            (uint256 quoteAmount, uint256 baseAmount) = _bookManager.take(\n                IBookManager.TakeParams({key: key, tick: tick, maxAmount: maxAmount.toUint64()}), params.hookData\n            );\n            if (baseAmount == 0) break;\n            takenQuoteAmount += quoteAmount;\n            spendBaseAmount += baseAmount;\n        }\n    }\n\n    function _claim(ClaimOrderParams memory params) internal {\n        _bookManager.claim(params.id, params.hookData);\n    }\n\n    function _cancel(CancelOrderParams memory params) internal {\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id.getBookId());\n        try _bookManager.cancel(\n            IBookManager.CancelParams({id: params.id, to: (params.leftQuoteAmount / key.unit).toUint64()}),\n            params.hookData\n        ) {} catch {}\n    }\n\n    function _settleTokens(address user, address[] memory tokensToSettle) internal {\n        Currency native = CurrencyLibrary.NATIVE;\n        int256 currencyDelta = _bookManager.currencyDelta(address(this), native);\n        if (currencyDelta > 0) {\n            native.transfer(address(_bookManager), uint256(currencyDelta));\n            _bookManager.settle(native);\n        }\n        currencyDelta = _bookManager.currencyDelta(address(this), native);\n        if (currencyDelta < 0) {\n            _bookManager.withdraw(native, user, uint256(-currencyDelta));\n        }\n\n        uint256 length = tokensToSettle.length;\n        for (uint256 i = 0; i < length; ++i) {\n            Currency currency = Currency.wrap(tokensToSettle[i]);\n            currencyDelta = _bookManager.currencyDelta(address(this), currency);\n            if (currencyDelta > 0) {\n                IERC20(tokensToSettle[i]).safeTransferFrom(user, address(_bookManager), uint256(currencyDelta));\n                _bookManager.settle(currency);\n            }\n            currencyDelta = _bookManager.currencyDelta(address(this), currency);\n            if (currencyDelta < 0) {\n                _bookManager.withdraw(Currency.wrap(tokensToSettle[i]), user, uint256(-currencyDelta));\n            }\n            uint256 balance = IERC20(tokensToSettle[i]).balanceOf(address(this));\n            if (balance > 0) {\n                IERC20(tokensToSettle[i]).transfer(user, balance);\n            }\n        }\n        if (address(this).balance > 0) native.transfer(user, address(this).balance);\n    }\n\n    function _permitERC20(ERC20PermitParams[] calldata permitParamsList) internal {\n        for (uint256 i = 0; i < permitParamsList.length; ++i) {\n            ERC20PermitParams memory permitParams = permitParamsList[i];\n            if (permitParams.signature.deadline > 0) {\n                try IERC20Permit(permitParams.token).permit(\n                    msg.sender,\n                    address(this),\n                    permitParams.permitAmount,\n                    permitParams.signature.deadline,\n                    permitParams.signature.v,\n                    permitParams.signature.r,\n                    permitParams.signature.s\n                ) {} catch {}\n            }\n        }\n    }\n\n    function _permitERC721(ERC721PermitParams[] calldata permitParamsList) internal {\n        for (uint256 i = 0; i < permitParamsList.length; ++i) {\n            PermitSignature memory signature = permitParamsList[i].signature;\n            if (signature.deadline > 0) {\n                try IERC721Permit(address(_bookManager)).permit(\n                    address(this),\n                    permitParamsList[i].tokenId,\n                    signature.deadline,\n                    signature.v,\n                    signature.r,\n                    signature.s\n                ) {} catch {}\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/hooks/BaseHook.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.19;\n\nimport \"../interfaces/IHooks.sol\";\nimport \"../libraries/Hooks.sol\";\n\n/// @author Clober\n/// @author Modified from https://github.com/Uniswap/v4-periphery/blob/63d64fcd82bff9ec0bad89730ce28d7ffa8e4225/contracts/BaseHook.sol\n\nabstract contract BaseHook is IHooks {\n    error InvalidAccess();\n    error HookNotImplemented();\n\n    IBookManager public immutable bookManager;\n\n    constructor(IBookManager _bookManager) {\n        bookManager = _bookManager;\n        validateHookAddress(this);\n    }\n\n    modifier onlyBookManager() {\n        if (msg.sender != address(bookManager)) revert InvalidAccess();\n        _;\n    }\n\n    function getHooksCalls() public pure virtual returns (Hooks.Permissions memory);\n\n    // this function is virtual so that we can override it during testing,\n    // which allows us to deploy an implementation to any address\n    // and then etch the bytecode into the correct address\n    function validateHookAddress(BaseHook _this) internal pure virtual {\n        Hooks.validateHookPermissions(_this, getHooksCalls());\n    }\n\n    function beforeOpen(address, IBookManager.BookKey calldata, bytes calldata) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterOpen(address, IBookManager.BookKey calldata, bytes calldata) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function beforeMake(address, IBookManager.MakeParams calldata, bytes calldata) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterMake(address, IBookManager.MakeParams calldata, OrderId, bytes calldata)\n        external\n        virtual\n        returns (bytes4)\n    {\n        revert HookNotImplemented();\n    }\n\n    function beforeTake(address, IBookManager.TakeParams calldata, bytes calldata) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterTake(address, IBookManager.TakeParams calldata, uint64, bytes calldata)\n        external\n        virtual\n        returns (bytes4)\n    {\n        revert HookNotImplemented();\n    }\n\n    function beforeCancel(address, IBookManager.CancelParams calldata, bytes calldata)\n        external\n        virtual\n        returns (bytes4)\n    {\n        revert HookNotImplemented();\n    }\n\n    function afterCancel(address, IBookManager.CancelParams calldata, uint64, bytes calldata)\n        external\n        virtual\n        returns (bytes4)\n    {\n        revert HookNotImplemented();\n    }\n\n    function beforeClaim(address, OrderId, bytes calldata) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterClaim(address, OrderId, uint64, bytes calldata) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n}\n"
    },
    "contracts/hooks/BountyPlatform.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\nimport \"../interfaces/IBountyPlatform.sol\";\nimport \"./BaseHook.sol\";\n\ncontract BountyPlatform is BaseHook, Ownable2Step, IBountyPlatform {\n    using CurrencyLibrary for Currency;\n    using OrderIdLibrary for OrderId;\n    using BookIdLibrary for IBookManager.BookKey;\n\n    address public override defaultClaimer;\n\n    mapping(Currency => uint256) public override balance;\n    mapping(OrderId => Bounty) private _bountyMap;\n\n    constructor(IBookManager bookManager_, address owner_, address defaultClaimer_)\n        BaseHook(bookManager_)\n        Ownable(owner_)\n    {\n        defaultClaimer = defaultClaimer_;\n        emit SetDefaultClaimer(defaultClaimer_);\n    }\n\n    function getHooksCalls() public pure override returns (Hooks.Permissions memory) {\n        Hooks.Permissions memory permissions;\n        permissions.afterMake = true;\n        permissions.afterCancel = true;\n        permissions.afterClaim = true;\n        return permissions;\n    }\n\n    function afterMake(address, IBookManager.MakeParams calldata, OrderId id, bytes calldata hookData)\n        external\n        override\n        onlyBookManager\n        returns (bytes4)\n    {\n        if (hookData.length > 0) {\n            Bounty memory bounty = abi.decode(hookData, (Bounty));\n            uint256 amount = _getAmount(bounty);\n            if (amount > 0) {\n                uint256 currentBalance = balance[bounty.currency];\n                if (bounty.currency.balanceOfSelf() - currentBalance < amount) revert NotEnoughBalance();\n                balance[bounty.currency] = currentBalance + amount;\n                _bountyMap[id] = bounty;\n                emit BountyOffered(id, bounty.currency, amount);\n            }\n        }\n\n        return BaseHook.afterMake.selector;\n    }\n\n    function afterClaim(address, OrderId id, uint64 claimedAmount, bytes calldata hookData)\n        external\n        override\n        onlyBookManager\n        returns (bytes4)\n    {\n        address claimer = hookData.length > 0 ? abi.decode(hookData, (address)) : defaultClaimer;\n        if (claimedAmount > 0 && bookManager.getOrder(id).open == 0) {\n            Bounty memory bounty = _bountyMap[id];\n            uint256 amount = _getAmount(bounty);\n            if (amount > 0) {\n                unchecked {\n                    balance[bounty.currency] -= amount;\n                }\n                delete _bountyMap[id];\n                bounty.currency.transfer(claimer, amount);\n                emit BountyClaimed(id, claimer);\n            }\n        }\n        return BaseHook.afterClaim.selector;\n    }\n\n    function afterCancel(address, IBookManager.CancelParams calldata params, uint64, bytes calldata hookData)\n        external\n        override\n        onlyBookManager\n        returns (bytes4)\n    {\n        address receiver = hookData.length > 0 ? abi.decode(hookData, (address)) : defaultClaimer;\n        IBookManager.OrderInfo memory orderInfo = bookManager.getOrder(params.id);\n        if (orderInfo.open == 0 && orderInfo.claimable == 0) {\n            Bounty memory bounty = _bountyMap[params.id];\n            uint256 amount = _getAmount(bounty);\n            if (amount > 0) {\n                unchecked {\n                    balance[bounty.currency] -= amount;\n                }\n                delete _bountyMap[params.id];\n                bounty.currency.transfer(receiver, amount);\n                emit BountyCanceled(params.id);\n            }\n        }\n        return BaseHook.afterCancel.selector;\n    }\n\n    function _getAmount(Bounty memory bounty) internal pure returns (uint256) {\n        return uint256(bounty.amount) << bounty.shifter;\n    }\n\n    function getBounty(OrderId orderId) external view returns (Currency, uint256) {\n        Bounty memory bounty = _bountyMap[orderId];\n        return (bounty.currency, _getAmount(bounty));\n    }\n\n    function setDefaultClaimer(address claimer) external onlyOwner {\n        defaultClaimer = claimer;\n        emit SetDefaultClaimer(claimer);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/interfaces/IBookManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport \"../libraries/Book.sol\";\nimport \"../libraries/Currency.sol\";\nimport \"../libraries/OrderId.sol\";\nimport \"../libraries/Tick.sol\";\nimport \"../libraries/FeePolicy.sol\";\nimport \"./IERC721Permit.sol\";\nimport \"./IHooks.sol\";\n\n/**\n * @title IBookManager\n * @notice The interface for the BookManager contract\n */\ninterface IBookManager is IERC721Metadata, IERC721Permit {\n    error InvalidUnit();\n    error InvalidFeePolicy();\n    error InvalidProvider(address provider);\n    error LockedBy(address locker, address hook);\n    error CurrencyNotSettled();\n\n    /**\n     * @notice Event emitted when a new book is opened\n     * @param id The book id\n     * @param base The base currency\n     * @param quote The quote currency\n     * @param unit The unit of the book\n     * @param makerPolicy The maker fee policy\n     * @param takerPolicy The taker fee policy\n     * @param hooks The hooks contract\n     */\n    event Open(\n        BookId indexed id,\n        Currency indexed base,\n        Currency indexed quote,\n        uint64 unit,\n        FeePolicy makerPolicy,\n        FeePolicy takerPolicy,\n        IHooks hooks\n    );\n\n    /**\n     * @notice Event emitted when a new order is made\n     * @param bookId The book id\n     * @param user The user address\n     * @param tick The order tick\n     * @param orderIndex The order index\n     * @param amount The order amount\n     */\n    event Make(BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount);\n\n    /**\n     * @notice Event emitted when an order is taken\n     * @param bookId The book id\n     * @param user The user address\n     * @param tick The order tick\n     * @param amount The order amount\n     */\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\n\n    /**\n     * @notice Event emitted when an order is canceled\n     * @param orderId The order id\n     * @param canceledAmount The canceled amount\n     */\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\n\n    /**\n     * @notice Event emitted when an order is claimed\n     * @param orderId The order id\n     * @param rawAmount The claimed amount\n     */\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\n\n    /**\n     * @notice Event emitted when a provider is whitelisted\n     * @param provider The provider address\n     */\n    event Whitelist(address indexed provider);\n\n    /**\n     * @notice Event emitted when a provider is delisted\n     * @param provider The provider address\n     */\n    event Delist(address indexed provider);\n\n    /**\n     * @notice Event emitted when a provider collects fees\n     * @param provider The provider address\n     * @param currency The currency\n     * @param amount The collected amount\n     */\n    event Collect(address indexed provider, Currency indexed currency, uint256 amount);\n\n    /**\n     * @notice Event emitted when new default provider is set\n     * @param oldDefaultProvider The old default provider address\n     * @param newDefaultProvider The new default provider address\n     */\n    event SetDefaultProvider(address indexed oldDefaultProvider, address indexed newDefaultProvider);\n\n    struct BookKey {\n        Currency base;\n        uint64 unit;\n        Currency quote;\n        FeePolicy makerPolicy;\n        IHooks hooks;\n        FeePolicy takerPolicy;\n    }\n\n    /**\n     * @notice Returns the base URI\n     * @return The base URI\n     */\n    function baseURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the contract URI\n     * @return The contract URI\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the default provider\n     * @return The default provider\n     */\n    function defaultProvider() external view returns (address);\n\n    /**\n     * @notice Calculates the currency balance changes for a given locker\n     * @param locker The address of the locker\n     * @param currency The currency in question\n     * @return The net change in currency balance\n     */\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\n\n    /**\n     * @notice Returns the total reserves of a given currency\n     * @param currency The currency in question\n     * @return The total reserves amount\n     */\n    function reservesOf(Currency currency) external view returns (uint256);\n\n    /**\n     * @notice Checks if a provider is whitelisted\n     * @param provider The address of the provider\n     * @return True if the provider is whitelisted, false otherwise\n     */\n    function isWhitelisted(address provider) external view returns (bool);\n\n    /**\n     * @notice Verifies if an owner has authorized a spender for a token\n     * @param owner The address of the token owner\n     * @param spender The address of the spender\n     * @param tokenId The token ID\n     */\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\n\n    /**\n     * @notice Calculates the amount owed to a provider in a given currency\n     * @param provider The provider's address\n     * @param currency The currency in question\n     * @return The owed amount\n     */\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\n\n    /**\n     * @notice Retrieves the book key for a given book ID\n     * @param id The book ID\n     * @return The book key\n     */\n    function getBookKey(BookId id) external view returns (BookKey memory);\n\n    struct OrderInfo {\n        address provider;\n        uint64 open;\n        uint64 claimable;\n    }\n\n    /**\n     * @notice Provides information about an order\n     * @param id The order ID\n     * @return Order information including provider, open status, and claimable amount\n     */\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\n\n    /**\n     * @notice Retrieves the locker and caller addresses for a given lock\n     * @param i The index of the lock\n     * @return locker The locker's address\n     * @return lockCaller The caller's address\n     */\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\n\n    /**\n     * @notice Provides the lock data\n     * @return The lock data including necessary numeric values\n     */\n    function getLockData() external view returns (uint128, uint128);\n\n    /**\n     * @notice Returns the depth of a given book ID and tick\n     * @param id The book ID\n     * @param tick The tick\n     * @return The depth of the tick\n     */\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\n\n    /**\n     * @notice Retrieves the lowest tick for a given book ID\n     * @param id The book ID\n     * @return tick The lowest tick\n     */\n    function getLowest(BookId id) external view returns (Tick tick);\n\n    /**\n     * @notice Finds the minimum tick greater than a specified tick in a book\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the highest\n     * @param id The book ID\n     * @param tick The specified tick\n     * @return The next higher tick\n     */\n    function minGreaterThan(BookId id, Tick tick) external view returns (Tick);\n\n    /**\n     * @notice Checks if a book is empty\n     * @param id The book ID\n     * @return True if the book is empty, false otherwise\n     */\n    function isEmpty(BookId id) external view returns (bool);\n\n    /**\n     * @notice Loads a value from a specific storage slot\n     * @param slot The storage slot\n     * @return The value in the slot\n     */\n    function load(bytes32 slot) external view returns (bytes32);\n\n    /**\n     * @notice Loads a sequence of values starting from a specific slot\n     * @param startSlot The starting slot\n     * @param nSlot The number of slots to load\n     * @return The sequence of values\n     */\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\n\n    /**\n     * @notice Opens a new book\n     * @param key The book key\n     * @param hookData The hook data\n     */\n    function open(BookKey calldata key, bytes calldata hookData) external;\n\n    /**\n     * @notice Locks a book manager function\n     * @param locker The locker address\n     * @param data The lock data\n     * @return The lock return data\n     */\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\n\n    struct MakeParams {\n        BookKey key;\n        Tick tick;\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\n        /// @notice The limit order service provider address to collect fees\n        address provider;\n    }\n\n    /**\n     * @notice Make a limit order\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return id The order id. Returns 0 if the order is not settled\n     * @return quoteAmount The amount of quote currency to be paid\n     */\n    function make(MakeParams calldata params, bytes calldata hookData)\n        external\n        returns (OrderId id, uint256 quoteAmount);\n\n    struct TakeParams {\n        BookKey key;\n        Tick tick;\n        uint64 maxAmount;\n    }\n\n    /**\n     * @notice Take a limit order at specific tick\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return quoteAmount The amount of quote currency to be received\n     * @return baseAmount The amount of base currency to be paid\n     */\n    function take(TakeParams calldata params, bytes calldata hookData)\n        external\n        returns (uint256 quoteAmount, uint256 baseAmount);\n\n    struct CancelParams {\n        OrderId id;\n        uint64 to;\n    }\n\n    /**\n     * @notice Cancel a limit order\n     * @param params The order parameters\n     * @param hookData The hook data\n     * @return canceledAmount The amount of quote currency canceled\n     */\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\n\n    /**\n     * @notice Claims an order\n     * @param id The order ID\n     * @param hookData The hook data\n     * @return claimedAmount The amount claimed\n     */\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\n\n    /**\n     * @notice Collects fees from a provider\n     * @param provider The provider address\n     * @param currency The currency\n     */\n    function collect(address provider, Currency currency) external;\n\n    /**\n     * @notice Withdraws a currency\n     * @param currency The currency\n     * @param to The recipient address\n     * @param amount The amount\n     */\n    function withdraw(Currency currency, address to, uint256 amount) external;\n\n    /**\n     * @notice Settles a currency\n     * @param currency The currency\n     * @return The settled amount\n     */\n    function settle(Currency currency) external payable returns (uint256);\n\n    /**\n     * @notice Whitelists a provider\n     * @param provider The provider address\n     */\n    function whitelist(address provider) external;\n\n    /**\n     * @notice Delists a provider\n     * @param provider The provider address\n     */\n    function delist(address provider) external;\n\n    /**\n     * @notice Sets the default provider\n     * @param newDefaultProvider The new default provider address\n     */\n    function setDefaultProvider(address newDefaultProvider) external;\n}\n"
    },
    "contracts/interfaces/IBookViewer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"../libraries/Currency.sol\";\nimport \"../libraries/BookId.sol\";\nimport \"./IBookManager.sol\";\nimport \"./IController.sol\";\n\n/**\n * @title IBookViewer\n * @notice Interface for the book viewer contract\n */\ninterface IBookViewer {\n    /**\n     * @notice Returns the book manager\n     * @return The instance of the book manager\n     */\n    function bookManager() external view returns (IBookManager);\n\n    struct Liquidity {\n        Tick tick;\n        uint64 depth;\n    }\n\n    /**\n     * @notice Returns the liquidity for a specific book\n     * @param id The id of the book\n     * @param from The starting tick\n     * @param n The number of ticks to return\n     * @return liquidity An array of liquidity data\n     */\n    function getLiquidity(BookId id, Tick from, uint256 n) external view returns (Liquidity[] memory liquidity);\n\n    /**\n     * @notice Returns the expected input for a take order\n     * @param params The parameters of the take order\n     * @return takenQuoteAmount The expected taken quote amount\n     * @return spendBaseAmount The expected spend base amount\n     */\n    function getExpectedInput(IController.TakeOrderParams memory params)\n        external\n        view\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount);\n\n    /**\n     * @notice Returns the expected output for a spend order\n     * @param params The parameters of the spend order\n     * @return takenQuoteAmount The expected taken quote amount\n     * @return spendBaseAmount The expected spend base amount\n     */\n    function getExpectedOutput(IController.SpendOrderParams memory params)\n        external\n        view\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount);\n}\n"
    },
    "contracts/interfaces/IBountyPlatform.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"./IHooks.sol\";\nimport \"../libraries/Currency.sol\";\n\n/**\n * @title IBountyPlatform\n * @notice Interface for the bounty platform contract\n */\ninterface IBountyPlatform {\n    error NotEnoughBalance();\n\n    /**\n     * @notice Event emitted when a bounty is offered\n     * @param orderId The id of the order to offer the bounty for\n     * @param currency The currency of the bounty\n     * @param amount The amount of the bounty\n     */\n    event BountyOffered(OrderId indexed orderId, Currency indexed currency, uint256 amount);\n\n    /**\n     * @notice Event emitted when a bounty is claimed\n     * @param orderId The id of the order that the bounty was claimed for\n     * @param claimer The address of the claimer\n     */\n    event BountyClaimed(OrderId indexed orderId, address indexed claimer);\n\n    /**\n     * @notice Event emitted when a bounty is canceled\n     * @param orderId The id of the order that the bounty was canceled for\n     */\n    event BountyCanceled(OrderId indexed orderId);\n\n    /**\n     * @notice Event emitted when the default claimer is set\n     * @param claimer The address of the default claimer\n     */\n    event SetDefaultClaimer(address indexed claimer);\n\n    struct Bounty {\n        Currency currency;\n        uint88 amount;\n        uint8 shifter;\n    }\n\n    /**\n     * @notice Returns the default claimer\n     * @return The address of the default claimer\n     */\n    function defaultClaimer() external view returns (address);\n\n    /**\n     * @notice Returns the balance of a specific currency\n     * @param currency The currency to check the balance for\n     * @return The balance of the specified currency\n     */\n    function balance(Currency currency) external view returns (uint256);\n\n    /**\n     * @notice Returns the bounty for a specific order\n     * @param orderId The id of the order to get the bounty for\n     * @return The currency and amount of the bounty\n     */\n    function getBounty(OrderId orderId) external view returns (Currency, uint256);\n\n    /**\n     * @notice Sets the default claimer\n     * @param claimer The address to set as the default claimer\n     */\n    function setDefaultClaimer(address claimer) external;\n}\n"
    },
    "contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\n\nimport \"../libraries/OrderId.sol\";\nimport \"../libraries/Currency.sol\";\nimport \"./IBookManager.sol\";\n\ninterface IController {\n    error InvalidAccess();\n    error InvalidLength();\n    error Deadline();\n    error InvalidMarket();\n    error ControllerSlippage();\n    error ValueTransferFailed();\n    error InvalidAction();\n\n    enum Action {\n        OPEN,\n        MAKE,\n        LIMIT,\n        TAKE,\n        SPEND,\n        CLAIM,\n        CANCEL\n    }\n\n    struct ERC20PermitParams {\n        address token;\n        uint256 permitAmount;\n        PermitSignature signature;\n    }\n\n    struct ERC721PermitParams {\n        uint256 tokenId;\n        PermitSignature signature;\n    }\n\n    struct PermitSignature {\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct OpenBookParams {\n        IBookManager.BookKey key;\n        bytes hookData;\n    }\n\n    struct MakeOrderParams {\n        BookId id;\n        Tick tick;\n        uint256 quoteAmount;\n        bytes hookData;\n    }\n\n    struct LimitOrderParams {\n        BookId takeBookId;\n        BookId makeBookId;\n        uint256 limitPrice;\n        Tick tick;\n        uint256 quoteAmount;\n        bytes takeHookData;\n        bytes makeHookData;\n    }\n\n    struct TakeOrderParams {\n        BookId id;\n        uint256 limitPrice;\n        uint256 quoteAmount;\n        bytes hookData;\n    }\n\n    struct SpendOrderParams {\n        BookId id;\n        uint256 limitPrice;\n        uint256 baseAmount;\n        bytes hookData;\n    }\n\n    struct ClaimOrderParams {\n        OrderId id;\n        bytes hookData;\n    }\n\n    struct CancelOrderParams {\n        OrderId id;\n        uint256 leftQuoteAmount;\n        bytes hookData;\n    }\n\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external;\n\n    function getDepth(BookId id, Tick tick) external view returns (uint256);\n\n    function getLowestPrice(BookId id) external view returns (uint256);\n\n    function getOrder(OrderId orderId)\n        external\n        view\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount);\n\n    function fromPrice(uint256 price) external pure returns (Tick);\n\n    function toPrice(Tick tick) external pure returns (uint256);\n\n    function execute(\n        Action[] calldata actionList,\n        bytes[] calldata paramsDataList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata erc20PermitParamsList,\n        ERC721PermitParams[] calldata erc721PermitParamsList,\n        uint64 deadline\n    ) external payable returns (OrderId[] memory ids);\n\n    function make(\n        MakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable returns (OrderId[] memory ids);\n\n    function take(\n        TakeOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable;\n\n    function spend(\n        SpendOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC20PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external payable;\n\n    function claim(\n        ClaimOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external;\n\n    function cancel(\n        CancelOrderParams[] calldata orderParamsList,\n        address[] calldata tokensToSettle,\n        ERC721PermitParams[] calldata permitParamsList,\n        uint64 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IERC721Permit\n * @notice An interface for the ERC721 permit extension\n */\ninterface IERC721Permit is IERC721 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    /**\n     * @notice The EIP-712 typehash for the permit struct used by the contract\n     */\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /**\n     * @notice The EIP-712 domain separator for this contract\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /**\n     * @notice Approve the spender to transfer the given tokenId\n     * @param spender The address to approve\n     * @param tokenId The tokenId to approve\n     * @param deadline The deadline for the signature\n     * @param v The recovery id of the signature\n     * @param r The r value of the signature\n     * @param s The s value of the signature\n     */\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @notice Get the current nonce for a token\n     * @param tokenId The tokenId to get the nonce for\n     * @return The current nonce\n     */\n    function nonces(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IHooks.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.20;\n\nimport \"./IBookManager.sol\";\nimport \"../libraries/OrderId.sol\";\nimport \"../libraries/Tick.sol\";\n\n/**\n * @title IHooks\n * @notice Interface for the hooks contract\n */\ninterface IHooks {\n    /**\n     * @notice Hook called before opening a new book\n     * @param sender The sender of the open transaction\n     * @param key The key of the book being opened\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after opening a new book\n     * @param sender The sender of the open transaction\n     * @param key The key of the book being opened\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called before making a new order\n     * @param sender The sender of the make transaction\n     * @param params The parameters of the make transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after making a new order\n     * @param sender The sender of the make transaction\n     * @param params The parameters of the make transaction\n     * @param orderId The id of the order that was made\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterMake(\n        address sender,\n        IBookManager.MakeParams calldata params,\n        OrderId orderId,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before taking an order\n     * @param sender The sender of the take transaction\n     * @param params The parameters of the take transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after taking an order\n     * @param sender The sender of the take transaction\n     * @param params The parameters of the take transaction\n     * @param takenAmount The amount that was taken\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterTake(\n        address sender,\n        IBookManager.TakeParams calldata params,\n        uint64 takenAmount,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before canceling an order\n     * @param sender The sender of the cancel transaction\n     * @param params The parameters of the cancel transaction\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /**\n     * @notice Hook called after canceling an order\n     * @param sender The sender of the cancel transaction\n     * @param params The parameters of the cancel transaction\n     * @param canceledAmount The amount that was canceled\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterCancel(\n        address sender,\n        IBookManager.CancelParams calldata params,\n        uint64 canceledAmount,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /**\n     * @notice Hook called before claiming an order\n     * @param sender The sender of the claim transaction\n     * @param orderId The id of the order being claimed\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\n\n    /**\n     * @notice Hook called after claiming an order\n     * @param sender The sender of the claim transaction\n     * @param orderId The id of the order being claimed\n     * @param claimedAmount The amount that was claimed\n     * @param hookData The data passed to the hook\n     * @return Returns the function selector if the hook is successful\n     */\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\n        external\n        returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ILocker.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\n/**\n * @title ILocker\n * @notice Interface for the locker contract\n */\ninterface ILocker {\n    /**\n     * @notice Called by the book manager on `msg.sender` when a lock is acquired\n     * @param data The data that was passed to the call to lock\n     * @return Any data that you want to be returned from the lock call\n     */\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory);\n}\n"
    },
    "contracts/libraries/Book.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@clober/library/contracts/SegmentedSegmentTree.sol\";\n\nimport \"../interfaces/IBookManager.sol\";\nimport \"./Tick.sol\";\nimport \"./OrderId.sol\";\nimport \"./TotalClaimableMap.sol\";\nimport \"./TickBitmap.sol\";\n\nlibrary Book {\n    using Book for State;\n    using TickBitmap for mapping(uint256 => uint256);\n    using SegmentedSegmentTree for SegmentedSegmentTree.Core;\n    using TotalClaimableMap for mapping(uint24 => uint256);\n    using TickLibrary for *;\n    using OrderIdLibrary for OrderId;\n\n    error ZeroAmount();\n    error BookAlreadyOpened();\n    error BookNotOpened();\n    error OrdersOutOfRange();\n    error QueueReplaceFailed();\n    error TooLargeTakeAmount();\n    error CancelFailed(uint64 maxCancelableAmount);\n\n    // @dev Due to the segment tree implementation, the maximum order size is 2 ** 15.\n    uint40 internal constant MAX_ORDER = 2 ** 15; // 32768\n    uint256 internal constant MAX_ORDER_M = 2 ** 15 - 1; // % 32768\n\n    struct Order {\n        address provider;\n        uint64 pending; // @dev unfilled amount + filled(claimable) amount\n    }\n\n    struct Queue {\n        SegmentedSegmentTree.Core tree;\n        Order[] orders;\n    }\n\n    struct State {\n        IBookManager.BookKey key;\n        mapping(Tick tick => Queue) queues;\n        mapping(uint256 => uint256) tickBitmap;\n        // @dev Four values of totalClaimable are stored in one uint256\n        mapping(uint24 groupIndex => uint256) totalClaimableOf;\n    }\n\n    function open(State storage self, IBookManager.BookKey calldata key) external {\n        if (self.isOpened()) revert BookAlreadyOpened();\n        self.key = key;\n    }\n\n    function isOpened(State storage self) internal view returns (bool) {\n        return self.key.unit != 0;\n    }\n\n    function checkOpened(State storage self) internal view {\n        if (!self.isOpened()) revert BookNotOpened();\n    }\n\n    function depth(State storage self, Tick tick) internal view returns (uint64) {\n        return self.queues[tick].tree.total() - self.totalClaimableOf.get(tick);\n    }\n\n    function lowest(State storage self) internal view returns (Tick) {\n        return self.tickBitmap.lowest().toTick();\n    }\n\n    function minGreaterThan(State storage self, Tick tick) internal view returns (Tick) {\n        return self.tickBitmap.minGreaterThan(tick.toUint24()).toTick();\n    }\n\n    function isEmpty(State storage self) internal view returns (bool) {\n        return self.tickBitmap.isEmpty();\n    }\n\n    function _getOrder(State storage self, Tick tick, uint40 index) private view returns (Order storage) {\n        return self.queues[tick].orders[index];\n    }\n\n    function getOrder(State storage self, Tick tick, uint40 index) internal view returns (Order memory) {\n        return _getOrder(self, tick, index);\n    }\n\n    function make(State storage self, Tick tick, uint64 amount, address provider)\n        external\n        returns (uint40 orderIndex)\n    {\n        if (amount == 0) revert ZeroAmount();\n        uint24 tickIndex = tick.toUint24();\n        if (!self.tickBitmap.has(tickIndex)) self.tickBitmap.set(tickIndex);\n\n        Queue storage queue = self.queues[tick];\n        // @dev Assume that orders.length cannot reach to type(uint40).max + 1.\n        orderIndex = SafeCast.toUint40(queue.orders.length);\n\n        if (orderIndex >= MAX_ORDER) {\n            unchecked {\n                uint40 staleOrderIndex = orderIndex - MAX_ORDER;\n                uint64 stalePendingAmount = queue.orders[staleOrderIndex].pending;\n                if (stalePendingAmount > 0) {\n                    // If the order is not settled completely, we cannot replace it\n                    uint64 claimable = calculateClaimableRawAmount(self, tick, staleOrderIndex);\n                    if (claimable != stalePendingAmount) revert QueueReplaceFailed();\n                }\n            }\n\n            // The stale order is settled completely, so remove it from the totalClaimableOf.\n            // We can determine the stale order is claimable.\n            uint64 staleOrderedAmount = queue.tree.get(orderIndex & MAX_ORDER_M);\n            if (staleOrderedAmount > 0) self.totalClaimableOf.sub(tick, staleOrderedAmount);\n        }\n\n        queue.tree.update(orderIndex & MAX_ORDER_M, amount);\n\n        queue.orders.push(Order({pending: amount, provider: provider}));\n    }\n\n    /**\n     * @notice Take orders from the book\n     * @param self The book state\n     * @param maxTakeAmount The maximum amount to take\n     * @return takenAmount The actual amount to take\n     */\n    function take(State storage self, Tick tick, uint64 maxTakeAmount) external returns (uint64 takenAmount) {\n        uint64 currentDepth = depth(self, tick);\n        if (currentDepth > maxTakeAmount) {\n            takenAmount = maxTakeAmount;\n        } else {\n            takenAmount = currentDepth;\n            self.tickBitmap.clear(tick.toUint24());\n        }\n\n        self.totalClaimableOf.add(tick, takenAmount);\n    }\n\n    function cancel(State storage self, OrderId orderId, uint64 to)\n        external\n        returns (uint64 canceled, uint64 afterPending)\n    {\n        (, Tick tick, uint40 orderIndex) = orderId.decode();\n        Queue storage queue = self.queues[tick];\n        uint64 pending = queue.orders[orderIndex].pending;\n        uint64 claimableRaw = calculateClaimableRawAmount(self, tick, orderIndex);\n        afterPending = to + claimableRaw;\n        unchecked {\n            if (pending < afterPending) revert CancelFailed(pending - claimableRaw);\n            canceled = pending - afterPending;\n\n            self.queues[tick].tree.update(\n                orderIndex & MAX_ORDER_M, self.queues[tick].tree.get(orderIndex & MAX_ORDER_M) - canceled\n            );\n        }\n        queue.orders[orderIndex].pending = afterPending;\n\n        if (depth(self, tick) == 0) {\n            // clear() won't revert so we can cancel with to=0 even if the depth() is already zero\n            // works even if bitmap is empty\n            self.tickBitmap.clear(tick.toUint24());\n        }\n    }\n\n    function claim(State storage self, Tick tick, uint40 index) external returns (uint64 claimedRaw) {\n        Order storage order = _getOrder(self, tick, index);\n\n        claimedRaw = calculateClaimableRawAmount(self, tick, index);\n        unchecked {\n            order.pending -= claimedRaw;\n        }\n    }\n\n    function calculateClaimableRawAmount(State storage self, Tick tick, uint40 index) public view returns (uint64) {\n        uint64 orderAmount = self.getOrder(tick, index).pending;\n\n        Queue storage queue = self.queues[tick];\n        // @dev Book logic always considers replaced orders as claimable.\n        unchecked {\n            if (uint256(index) + MAX_ORDER < queue.orders.length) return orderAmount;\n            uint64 totalClaimable = self.totalClaimableOf.get(tick);\n            uint64 rangeRight = _getClaimRangeRight(queue, index);\n            if (rangeRight - orderAmount >= totalClaimable) return 0;\n\n            // -------- totalClaimable ---------|---\n            // ------|---- orderAmount ----|--------\n            //   rangeLeft           rangeRight\n            if (rangeRight <= totalClaimable) return orderAmount;\n            // -- totalClaimable --|----------------\n            // ------|---- orderAmount ----|--------\n            //   rangeLeft           rangeRight\n            else return totalClaimable - (rangeRight - orderAmount);\n        }\n    }\n\n    function _getClaimRangeRight(Queue storage queue, uint256 orderIndex) private view returns (uint64 rangeRight) {\n        uint256 l = queue.orders.length & MAX_ORDER_M;\n        uint256 r = (orderIndex + 1) & MAX_ORDER_M;\n        rangeRight = (l < r) ? queue.tree.query(l, r) : queue.tree.total() - queue.tree.query(r, l);\n    }\n}\n"
    },
    "contracts/libraries/BookId.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\nimport \"../interfaces/IBookManager.sol\";\n\ntype BookId is uint192;\n\nlibrary BookIdLibrary {\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\n        bytes32 hash = keccak256(abi.encode(bookKey));\n        assembly {\n            id := hash\n        }\n    }\n}\n"
    },
    "contracts/libraries/Currency.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\npragma solidity ^0.8.20;\n\ntype Currency is address;\n\n/// @title CurrencyLibrary\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\nlibrary CurrencyLibrary {\n    using CurrencyLibrary for Currency;\n\n    /// @notice Thrown when a native transfer fails\n    error NativeTransferFailed();\n\n    /// @notice Thrown when an ERC20 transfer fails\n    error ERC20TransferFailed();\n\n    Currency public constant NATIVE = Currency.wrap(address(0));\n\n    function transfer(Currency currency, address to, uint256 amount) internal {\n        // implementation from\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\n\n        bool success;\n        if (currency.isNative()) {\n            assembly {\n                // Transfer the ETH and store if it succeeded or not.\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n\n            if (!success) revert NativeTransferFailed();\n        } else {\n            assembly {\n                // Get a pointer to some free memory.\n                let freeMemoryPointer := mload(0x40)\n\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n                success :=\n                    and(\n                        // Set success to whether the call reverted, if not we check it either\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                        // Counterintuitively, this call must be positioned second to the or() call in the\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\n                    )\n            }\n\n            if (!success) revert ERC20TransferFailed();\n        }\n    }\n\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\n        if (currency.isNative()) return address(this).balance;\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\n    }\n\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\n        return Currency.unwrap(currency) == Currency.unwrap(other);\n    }\n\n    function isNative(Currency currency) internal pure returns (bool) {\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\n    }\n\n    function toId(Currency currency) internal pure returns (uint256) {\n        return uint160(Currency.unwrap(currency));\n    }\n\n    function fromId(uint256 id) internal pure returns (Currency) {\n        return Currency.wrap(address(uint160(id)));\n    }\n}\n"
    },
    "contracts/libraries/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n// Modified by Clober Team\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {IERC165, ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address);\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return spender != address(0)\n            && (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        // @dev MODIFIED: Define _setOwner\n        _setOwner(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Override this function to set owner\n     */\n    function _setOwner(uint256 tokenId, address owner) internal virtual;\n}\n"
    },
    "contracts/libraries/ERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\n\nimport {ERC721} from \"./ERC721.sol\";\nimport {IERC721Permit} from \"../interfaces/IERC721Permit.sol\";\n\ncontract ERC721Permit is ERC721, IERC721Permit, EIP712 {\n    // keccak256(\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH =\n        0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\n\n    uint256 private constant _NONCE_MASK = uint256(0xffffffffffffffffffffffff) << 160;\n\n    // @dev tokenId => (nonce << 160 | owner)\n    mapping(uint256 => uint256) private _nonceAndOwner;\n\n    constructor(string memory name_, string memory symbol_, string memory version_)\n        ERC721(name_, symbol_)\n        EIP712(name_, version_)\n    {}\n\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        external\n        override\n    {\n        if (block.timestamp > deadline) revert PermitExpired();\n\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, _getAndIncrementNonce(tokenId), deadline))\n        );\n\n        address owner = ownerOf(tokenId);\n        if (spender == owner) revert InvalidSignature();\n\n        if (owner.code.length > 0) {\n            if (IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) != 0x1626ba7e) {\n                revert InvalidSignature();\n            }\n        } else {\n            if (ECDSA.recover(digest, v, r, s) != owner) revert InvalidSignature();\n        }\n\n        _approve(spender, tokenId, owner, true);\n    }\n\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == type(IERC721Permit).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function nonces(uint256 id) external view returns (uint256) {\n        return _nonceAndOwner[id] >> 160;\n    }\n\n    function _getAndIncrementNonce(uint256 tokenId) internal returns (uint256 nonce) {\n        uint256 nonceAndOwner = _nonceAndOwner[tokenId];\n        nonce = nonceAndOwner >> 160;\n        _nonceAndOwner[tokenId] = nonceAndOwner + (1 << 160);\n    }\n\n    function _ownerOf(uint256 tokenId) internal view override returns (address) {\n        return address(uint160(_nonceAndOwner[tokenId]));\n    }\n\n    function _setOwner(uint256 tokenId, address owner) internal override {\n        _nonceAndOwner[tokenId] = (_nonceAndOwner[tokenId] & _NONCE_MASK) | uint256(uint160(owner));\n    }\n}\n"
    },
    "contracts/libraries/FeePolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport \"./Math.sol\";\n\ntype FeePolicy is uint24;\n\nlibrary FeePolicyLibrary {\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\n    int256 internal constant MAX_FEE_RATE = 500000;\n    int256 internal constant MIN_FEE_RATE = -500000;\n\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\n\n    error InvalidFeePolicy();\n\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\n            revert InvalidFeePolicy();\n        }\n\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\n        assembly {\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\n        }\n    }\n\n    function isValid(FeePolicy self) internal pure returns (bool) {\n        int24 r = rate(self);\n\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\n    }\n\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\n        assembly {\n            f := shr(23, self)\n        }\n    }\n\n    function rate(FeePolicy self) internal pure returns (int24 r) {\n        assembly {\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\n        }\n    }\n\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\n        int24 r = rate(self);\n\n        bool positive = r > 0;\n        uint256 absRate;\n        unchecked {\n            absRate = uint256(uint24(positive ? r : -r));\n        }\n        // @dev absFee must be less than type(int256).max\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\n        fee = positive ? int256(absFee) : -int256(absFee);\n    }\n\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\n        internal\n        pure\n        returns (uint256 originalAmount)\n    {\n        int24 r = rate(self);\n\n        bool positive = r > 0;\n        uint256 divider;\n        assembly {\n            if reverseFee { r := sub(0, r) }\n            divider := add(RATE_PRECISION, r)\n        }\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\n    }\n}\n"
    },
    "contracts/libraries/Hooks.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport \"./Lockers.sol\";\nimport \"../interfaces/IBookManager.sol\";\n\n/// @author Clober\n/// @author Modified from Uniswap V4 (https://github.com/Uniswap/v4-core/blob/1f350fa95e862ba8c56c8ff7e146d47c9043465e)\n/// @notice V4 decides whether to invoke specific hooks by inspecting the leading bits of the address that\n/// the hooks contract is deployed to.\n/// For example, a hooks contract deployed to address: 0x9000000000000000000000000000000000000000\n/// has leading bits '1001' which would cause the 'before open' and 'after make' hooks to be used.\nlibrary Hooks {\n    using Hooks for IHooks;\n\n    uint256 internal constant BEFORE_OPEN_FLAG = 1 << 159;\n    uint256 internal constant AFTER_OPEN_FLAG = 1 << 158;\n    uint256 internal constant BEFORE_MAKE_FLAG = 1 << 157;\n    uint256 internal constant AFTER_MAKE_FLAG = 1 << 156;\n    uint256 internal constant BEFORE_TAKE_FLAG = 1 << 155;\n    uint256 internal constant AFTER_TAKE_FLAG = 1 << 154;\n    uint256 internal constant BEFORE_CANCEL_FLAG = 1 << 153;\n    uint256 internal constant AFTER_CANCEL_FLAG = 1 << 152;\n    uint256 internal constant BEFORE_CLAIM_FLAG = 1 << 151;\n    uint256 internal constant AFTER_CLAIM_FLAG = 1 << 150;\n    uint256 internal constant NO_OP_FLAG = 1 << 149;\n    uint256 internal constant ACCESS_LOCK_FLAG = 1 << 148;\n\n    bytes4 public constant NO_OP_SELECTOR = bytes4(keccak256(abi.encodePacked(\"NoOp\")));\n\n    struct Permissions {\n        bool beforeOpen;\n        bool afterOpen;\n        bool beforeMake;\n        bool afterMake;\n        bool beforeTake;\n        bool afterTake;\n        bool beforeCancel;\n        bool afterCancel;\n        bool beforeClaim;\n        bool afterClaim;\n        bool noOp;\n        bool accessLock;\n    }\n\n    /// @notice Thrown if the address will not lead to the specified hook calls being called\n    /// @param hooks The address of the hooks contract\n    error HookAddressNotValid(address hooks);\n\n    /// @notice Hook did not return its selector\n    error InvalidHookResponse();\n\n    /// @notice thrown when a hook call fails\n    error FailedHookCall();\n\n    /// @notice Utility function intended to be used in hook constructors to ensure\n    /// the deployed hooks address causes the intended hooks to be called\n    /// @param permissions The hooks that are intended to be called\n    /// @dev permissions param is memory as the function will be called from constructors\n    function validateHookPermissions(IHooks self, Permissions memory permissions) internal pure {\n        if (\n            permissions.beforeOpen != self.hasPermission(BEFORE_OPEN_FLAG)\n                || permissions.afterOpen != self.hasPermission(AFTER_OPEN_FLAG)\n                || permissions.beforeMake != self.hasPermission(BEFORE_MAKE_FLAG)\n                || permissions.afterMake != self.hasPermission(AFTER_MAKE_FLAG)\n                || permissions.beforeTake != self.hasPermission(BEFORE_TAKE_FLAG)\n                || permissions.afterTake != self.hasPermission(AFTER_TAKE_FLAG)\n                || permissions.beforeCancel != self.hasPermission(BEFORE_CANCEL_FLAG)\n                || permissions.afterCancel != self.hasPermission(AFTER_CANCEL_FLAG)\n                || permissions.beforeClaim != self.hasPermission(BEFORE_CLAIM_FLAG)\n                || permissions.afterClaim != self.hasPermission(AFTER_CLAIM_FLAG)\n                || permissions.noOp != self.hasPermission(NO_OP_FLAG)\n                || permissions.accessLock != self.hasPermission(ACCESS_LOCK_FLAG)\n        ) {\n            revert HookAddressNotValid(address(self));\n        }\n    }\n\n    /// @notice Ensures that the hook address includes at least one hook flag or is the 0 address\n    /// @param hook The hook to verify\n    function isValidHookAddress(IHooks hook) internal pure returns (bool) {\n        // if NoOp is allowed, at least one of beforeMake, beforeTake, beforeCancel and beforeClaim should be allowed\n        if (\n            hook.hasPermission(NO_OP_FLAG) && !hook.hasPermission(BEFORE_MAKE_FLAG)\n                && !hook.hasPermission(BEFORE_TAKE_FLAG) && !hook.hasPermission(BEFORE_CANCEL_FLAG)\n                && !hook.hasPermission(BEFORE_CLAIM_FLAG)\n        ) {\n            return false;\n        }\n        // If a hook contract is set, it must have at least 1 flag set\n        return address(hook) == address(0) || uint160(address(hook)) >= ACCESS_LOCK_FLAG;\n    }\n\n    /// @notice performs a hook call using the given calldata on the given hook\n    /// @return expectedSelector The selector that the hook is expected to return\n    /// @return selector The selector that the hook actually returned\n    function _callHook(IHooks self, bytes memory data) private returns (bytes4 expectedSelector, bytes4 selector) {\n        bool set = Lockers.setCurrentHook(self);\n\n        assembly {\n            expectedSelector := mload(add(data, 0x20))\n        }\n\n        (bool success, bytes memory result) = address(self).call(data);\n        if (!success) _revert(result);\n\n        selector = abi.decode(result, (bytes4));\n\n        // We only want to clear the current hook if it was set in setCurrentHook in this execution frame.\n        if (set) Lockers.clearCurrentHook();\n    }\n\n    /// @notice performs a hook call using the given calldata on the given hook\n    function callHook(IHooks self, bytes memory data) internal {\n        (bytes4 expectedSelector, bytes4 selector) = _callHook(self, data);\n\n        if (selector != expectedSelector) revert InvalidHookResponse();\n    }\n\n    /// @notice performs a hook call using the given calldata on the given hook\n    /// @return shouldExecute Whether the operation should be executed or nooped\n    function callHookNoopable(IHooks self, bytes memory data) internal returns (bool shouldExecute) {\n        (bytes4 expectedSelector, bytes4 selector) = _callHook(self, data);\n\n        if (selector == expectedSelector) shouldExecute = true;\n        else if (selector == NO_OP_SELECTOR && self.hasPermission(NO_OP_FLAG)) shouldExecute = false;\n        else revert InvalidHookResponse();\n    }\n\n    /// @notice calls beforeOpen hook if permissioned and validates return value\n    function beforeOpen(IHooks self, IBookManager.BookKey memory key, bytes calldata hookData) internal {\n        if (self.hasPermission(BEFORE_OPEN_FLAG)) {\n            self.callHook(abi.encodeWithSelector(IHooks.beforeOpen.selector, msg.sender, key, hookData));\n        }\n    }\n\n    /// @notice calls afterOpen hook if permissioned and validates return value\n    function afterOpen(IHooks self, IBookManager.BookKey memory key, bytes calldata hookData) internal {\n        if (self.hasPermission(AFTER_OPEN_FLAG)) {\n            self.callHook(abi.encodeWithSelector(IHooks.afterOpen.selector, msg.sender, key, hookData));\n        }\n    }\n\n    /// @notice calls beforeMake hook if permissioned and validates return value\n    function beforeMake(IHooks self, IBookManager.MakeParams memory params, bytes calldata hookData)\n        internal\n        returns (bool shouldExecute)\n    {\n        if (self.hasPermission(BEFORE_MAKE_FLAG)) {\n            shouldExecute =\n                self.callHookNoopable(abi.encodeWithSelector(IHooks.beforeMake.selector, msg.sender, params, hookData));\n        } else {\n            shouldExecute = true;\n        }\n    }\n\n    /// @notice calls afterMake hook if permissioned and validates return value\n    function afterMake(IHooks self, IBookManager.MakeParams memory params, OrderId orderId, bytes calldata hookData)\n        internal\n    {\n        if (self.hasPermission(AFTER_MAKE_FLAG)) {\n            self.callHook(abi.encodeWithSelector(IHooks.afterMake.selector, msg.sender, params, orderId, hookData));\n        }\n    }\n\n    /// @notice calls beforeTake hook if permissioned and validates return value\n    function beforeTake(IHooks self, IBookManager.TakeParams memory params, bytes calldata hookData)\n        internal\n        returns (bool shouldExecute)\n    {\n        if (self.hasPermission(BEFORE_TAKE_FLAG)) {\n            shouldExecute =\n                self.callHookNoopable(abi.encodeWithSelector(IHooks.beforeTake.selector, msg.sender, params, hookData));\n        } else {\n            shouldExecute = true;\n        }\n    }\n\n    /// @notice calls afterTake hook if permissioned and validates return value\n    function afterTake(IHooks self, IBookManager.TakeParams memory params, uint64 takenAmount, bytes calldata hookData)\n        internal\n    {\n        if (self.hasPermission(AFTER_TAKE_FLAG)) {\n            self.callHook(abi.encodeWithSelector(IHooks.afterTake.selector, msg.sender, params, takenAmount, hookData));\n        }\n    }\n\n    /// @notice calls beforeCancel hook if permissioned and validates return value\n    function beforeCancel(IHooks self, IBookManager.CancelParams calldata params, bytes calldata hookData)\n        internal\n        returns (bool shouldExecute)\n    {\n        if (self.hasPermission(BEFORE_CANCEL_FLAG)) {\n            shouldExecute = self.callHookNoopable(\n                abi.encodeWithSelector(IHooks.beforeCancel.selector, msg.sender, params, hookData)\n            );\n        } else {\n            shouldExecute = true;\n        }\n    }\n\n    /// @notice calls afterCancel hook if permissioned and validates return value\n    function afterCancel(\n        IHooks self,\n        IBookManager.CancelParams calldata params,\n        uint64 canceledAmount,\n        bytes calldata hookData\n    ) internal {\n        if (self.hasPermission(AFTER_CANCEL_FLAG)) {\n            self.callHook(\n                abi.encodeWithSelector(IHooks.afterCancel.selector, msg.sender, params, canceledAmount, hookData)\n            );\n        }\n    }\n\n    /// @notice calls beforeClaim hook if permissioned and validates return value\n    function beforeClaim(IHooks self, OrderId orderId, bytes calldata hookData) internal returns (bool shouldExecute) {\n        if (self.hasPermission(BEFORE_CLAIM_FLAG)) {\n            shouldExecute = self.callHookNoopable(\n                abi.encodeWithSelector(IHooks.beforeClaim.selector, msg.sender, orderId, hookData)\n            );\n        } else {\n            shouldExecute = true;\n        }\n    }\n\n    /// @notice calls afterClaim hook if permissioned and validates return value\n    function afterClaim(IHooks self, OrderId orderId, uint64 claimedAmount, bytes calldata hookData) internal {\n        if (self.hasPermission(AFTER_CLAIM_FLAG)) {\n            self.callHook(\n                abi.encodeWithSelector(IHooks.afterClaim.selector, msg.sender, orderId, claimedAmount, hookData)\n            );\n        }\n    }\n\n    function hasPermission(IHooks self, uint256 flag) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & flag != 0;\n    }\n\n    /// @notice bubble up revert if present. Else throw FailedHookCall\n    function _revert(bytes memory result) private pure {\n        if (result.length > 0) {\n            assembly {\n                revert(add(0x20, result), mload(result))\n            }\n        } else {\n            revert FailedHookCall();\n        }\n    }\n}\n"
    },
    "contracts/libraries/Lockers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.23;\n\nimport \"../interfaces/IHooks.sol\";\n\n/// @author Clober\n/// @author Modified from Uniswap V4 (https://github.com/Uniswap/v4-core/tree/98680ebc1a654120e995d53a5b10ec6fe153066f)\n/// @notice Contains data about pool lockers.\n\n/// @dev This library manages a custom storage implementation for a queue\n///      that tracks current lockers. The \"sentinel\" storage slot for this data structure,\n///      always passed in as IPoolManager.LockData storage self, stores not just the current\n///      length of the queue but also the global count of non-zero deltas across all lockers.\n///      The values of the data structure start at OFFSET, and each value is a locker address.\nlibrary Lockers {\n    /// struct LockData {\n    ///     /// @notice The current number of active lockers\n    ///     /// @dev This value starts with 1 to make dirty slot\n    ///     uint128 nextLength;\n    ///     /// @notice The total number of nonzero deltas over all active + completed lockers\n    ///     uint128 nonzeroDeltaCount;\n    /// }\n    uint256 internal constant LOCK_DATA_SLOT = uint256(keccak256(\"LockData\"));\n\n    uint256 internal constant LOCKERS_SLOT = uint256(keccak256(\"Lockers\"));\n\n    // The number of slots per item in the lockers array\n    uint256 internal constant LOCKER_STRUCT_SIZE = 2;\n\n    uint256 internal constant HOOK_ADDRESS_SLOT = uint256(keccak256(\"HookAddress\"));\n\n    uint256 internal constant NONZERO_DELTA_COUNT_OFFSET = 2 ** 128;\n\n    uint256 internal constant EMPTY_ADDRESS_STORAGE = 1 << 255;\n\n    function initialize() internal {\n        clear();\n        uint256 lockersSlot = LOCKERS_SLOT;\n        // @dev To reduce lock sstore gas, we set 5 lockers storages dirty\n        assembly {\n            for { let i := 0 } lt(i, 5) { i := add(i, 1) } {\n                sstore(lockersSlot, EMPTY_ADDRESS_STORAGE)\n                sstore(add(lockersSlot, 1), EMPTY_ADDRESS_STORAGE)\n                lockersSlot := add(lockersSlot, LOCKER_STRUCT_SIZE)\n            }\n        }\n    }\n\n    /// @dev Pushes a locker onto the end of the queue, and updates the sentinel storage slot.\n    function push(address locker, address lockCaller) internal {\n        // read current value from the sentinel storage slot\n        uint128 l = length();\n        unchecked {\n            // not in assembly because OFFSET is in the library scope\n            uint256 indexToWrite = LOCKERS_SLOT + (l * LOCKER_STRUCT_SIZE);\n            uint256 lockDataSlot = LOCK_DATA_SLOT;\n            /// @solidity memory-safe-assembly\n            assembly {\n                // in the next storage slot, write the locker and lockCaller\n                sstore(indexToWrite, locker)\n                sstore(add(indexToWrite, 1), lockCaller)\n\n                // increase the length\n                sstore(lockDataSlot, add(sload(lockDataSlot), 1))\n            }\n        }\n    }\n\n    function lockData() internal view returns (uint128 l, uint128 nonzeroDeltaCount) {\n        uint256 slot = LOCK_DATA_SLOT;\n        assembly {\n            let data := sload(slot)\n            l := sub(data, 1)\n            nonzeroDeltaCount := shr(128, data)\n        }\n    }\n\n    function length() internal view returns (uint128 l) {\n        uint256 slot = LOCK_DATA_SLOT;\n        assembly {\n            l := sub(sload(slot), 1)\n        }\n    }\n\n    /// @dev Pops a locker off the end of the queue. Note that no storage gets cleared.\n    function pop() internal {\n        uint256 slot = LOCK_DATA_SLOT;\n        assembly {\n            sstore(slot, sub(sload(slot), 1))\n        }\n    }\n\n    function clear() internal {\n        uint256 slot = LOCK_DATA_SLOT;\n        assembly {\n            sstore(slot, 1)\n        }\n    }\n\n    function getLocker(uint256 i) internal view returns (address locker) {\n        unchecked {\n            // not in assembly because OFFSET is in the library scope\n            uint256 position = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE);\n            /// @solidity memory-safe-assembly\n            assembly {\n                locker := sload(position)\n            }\n        }\n    }\n\n    function getLockCaller(uint256 i) internal view returns (address locker) {\n        unchecked {\n            // not in assembly because OFFSET is in the library scope\n            uint256 position = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE + 1);\n            /// @solidity memory-safe-assembly\n            assembly {\n                locker := sload(position)\n            }\n        }\n    }\n\n    function getCurrentLocker() internal view returns (address) {\n        uint128 l = length();\n        unchecked {\n            return l > 0 ? getLocker(l - 1) : address(0);\n        }\n    }\n\n    function getCurrentLockCaller() internal view returns (address) {\n        uint128 l = length();\n        unchecked {\n            return l > 0 ? getLockCaller(l - 1) : address(0);\n        }\n    }\n\n    function incrementNonzeroDeltaCount() internal {\n        uint256 slot = LOCK_DATA_SLOT;\n        assembly {\n            sstore(slot, add(sload(slot), NONZERO_DELTA_COUNT_OFFSET))\n        }\n    }\n\n    function decrementNonzeroDeltaCount() internal {\n        uint256 slot = LOCK_DATA_SLOT;\n        assembly {\n            sstore(slot, sub(sload(slot), NONZERO_DELTA_COUNT_OFFSET))\n        }\n    }\n\n    function getCurrentHook() internal view returns (IHooks currentHook) {\n        return IHooks(getHook(length()));\n    }\n\n    function getHook(uint256 i) internal view returns (address hook) {\n        unchecked {\n            uint256 position = HOOK_ADDRESS_SLOT + i;\n            assembly {\n                hook := sload(position)\n            }\n        }\n    }\n\n    function setCurrentHook(IHooks currentHook) internal returns (bool set) {\n        // Set the hook address for the current locker if the address is 0.\n        // If the address is nonzero, a hook has already been set for this lock, and is not allowed to be updated or cleared at the end of the call.\n        if (address(getCurrentHook()) == address(0)) {\n            unchecked {\n                uint256 indexToWrite = HOOK_ADDRESS_SLOT + length();\n                assembly {\n                    sstore(indexToWrite, currentHook)\n                }\n            }\n            return true;\n        }\n    }\n\n    function clearCurrentHook() internal {\n        unchecked {\n            uint256 indexToWrite = HOOK_ADDRESS_SLOT + length();\n            assembly {\n                sstore(indexToWrite, EMPTY_ADDRESS_STORAGE)\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.clober.io/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport \"./SignificantBit.sol\";\n\nlibrary Math {\n    using SignificantBit for uint256;\n\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\n        // In the OrderBook contract code, b is never zero.\n        assembly {\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\n        }\n    }\n\n    function log2(uint256 x) internal pure returns (int256) {\n        require(x > 0);\n\n        uint8 msb = x.mostSignificantBit();\n\n        if (msb > 128) x >>= msb - 128;\n        else if (msb < 128) x <<= 128 - msb;\n\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\n\n        int256 bit = 0x80000000000000000000000000000000;\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n                result |= bit;\n                x = (x >> 1) - 0x80000000000000000000000000000000;\n            }\n            bit >>= 1;\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/libraries/OrderId.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./Tick.sol\";\nimport \"./BookId.sol\";\n\ntype OrderId is uint256;\n\nlibrary OrderIdLibrary {\n    /**\n     * @dev Encode the order id.\n     * @param bookId The book id.\n     * @param tick The tick.\n     * @param index The index.\n     * @return id The order id.\n     */\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\n        //      Therefore, we have to safely cast tick into uint256 first.\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\n        assembly {\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\n        }\n    }\n\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\n        assembly {\n            bookId := shr(64, id)\n            tick := shr(40, id)\n            index := id\n        }\n    }\n\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\n        assembly {\n            bookId := shr(64, id)\n        }\n    }\n\n    function getTick(OrderId id) internal pure returns (Tick tick) {\n        assembly {\n            tick := shr(40, id)\n        }\n    }\n\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\n        assembly {\n            index := id\n        }\n    }\n}\n"
    },
    "contracts/libraries/SignificantBit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nlibrary SignificantBit {\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\n    bytes internal constant DEBRUIJN_INDEX =\n        hex\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\";\n\n    /**\n     * @notice Finds the index of the least significant bit.\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\n     * @return ret The index of the least significant bit.\n     */\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\n        require(x > 0);\n        uint256 index;\n        assembly {\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\n        }\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\n    }\n\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\n        require(x > 0);\n        uint256 msb;\n        assembly {\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(5, gt(x, 0xFFFFFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(4, gt(x, 0xFFFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(3, gt(x, 0xFF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(2, gt(x, 0xF))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := shl(1, gt(x, 0x3))\n            msb := or(msb, f)\n            x := shr(f, x)\n            f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n        return uint8(msb);\n    }\n}\n"
    },
    "contracts/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\nimport \"./Math.sol\";\n\ntype Tick is int24;\n\nlibrary TickLibrary {\n    using Math for uint256;\n    using TickLibrary for Tick;\n\n    error InvalidTick();\n    error InvalidPrice();\n    error TickOverflow();\n\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\n    int24 internal constant MIN_TICK = -MAX_TICK;\n\n    uint256 internal constant MIN_PRICE = 5800731190957938;\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\n\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\n\n    function validateTick(Tick tick) internal pure {\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\n    }\n\n    modifier validatePrice(uint256 price) {\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\n        _;\n    }\n\n    function toTick(uint24 x) internal pure returns (Tick t) {\n        assembly {\n            t := sub(x, 0x800000)\n        }\n    }\n\n    function toUint24(Tick tick) internal pure returns (uint24 r) {\n        assembly {\n            r := add(tick, 0x800000)\n        }\n    }\n\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\n        int256 log = price.log2();\n        int256 tick = log / 49089913871092318234424474366155889;\n        int256 tickLow = (\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\n        ) / 49089913871092318234424474366155889;\n\n        if (tick == tickLow) return Tick.wrap(int24(tick));\n\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\n\n        return Tick.wrap(int24(tickLow));\n    }\n\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\n        validateTick(tick);\n        int24 tickValue = Tick.unwrap(tick);\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\n\n        unchecked {\n            if (absTick & 0x1 != 0) price = _R0;\n            else price = 1 << 128;\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\n        }\n        if (tickValue > 0) price = type(uint256).max / price;\n    }\n\n    function gt(Tick a, Tick b) internal pure returns (bool) {\n        return Tick.unwrap(a) > Tick.unwrap(b);\n    }\n\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\n    }\n\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\n        //      We don't need to check overflow here\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\n    }\n}\n"
    },
    "contracts/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.clober.io/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport \"./SignificantBit.sol\";\n\nlibrary TickBitmap {\n    using SignificantBit for uint256;\n\n    error EmptyError();\n    error AlreadyExistsError();\n\n    uint256 public constant B0_BITMAP_KEY = uint256(keccak256(\"TickBitmap\"));\n    uint256 public constant MAX_UINT_256_MINUS_1 = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;\n\n    function has(mapping(uint256 => uint256) storage self, uint24 value) internal view returns (bool) {\n        (uint256 b0b1, uint256 b2) = _split(value);\n        uint256 mask = 1 << b2;\n        return self[b0b1] & mask == mask;\n    }\n\n    function isEmpty(mapping(uint256 => uint256) storage self) internal view returns (bool) {\n        return self[B0_BITMAP_KEY] == 0;\n    }\n\n    function _split(uint24 value) private pure returns (uint256 b0b1, uint8 b2) {\n        assembly {\n            b2 := value\n            b0b1 := shr(8, value)\n        }\n    }\n\n    function lowest(mapping(uint256 => uint256) storage self) internal view returns (uint24) {\n        if (isEmpty(self)) revert EmptyError();\n\n        uint256 b0 = self[B0_BITMAP_KEY].leastSignificantBit();\n        uint256 b0b1 = (b0 << 8) | (self[~b0].leastSignificantBit());\n        uint256 b2 = self[b0b1].leastSignificantBit();\n        return uint24((b0b1 << 8) | b2);\n    }\n\n    function set(mapping(uint256 => uint256) storage self, uint24 value) internal {\n        (uint256 b0b1, uint256 b2) = _split(value);\n        uint256 mask = 1 << b2;\n        uint256 b2Bitmap = self[b0b1];\n        if (b2Bitmap & mask > 0) revert AlreadyExistsError();\n\n        self[b0b1] = b2Bitmap | mask;\n        if (b2Bitmap == 0) {\n            mask = 1 << (b0b1 & 0xff);\n            uint256 b1BitmapKey = ~(b0b1 >> 8);\n            uint256 b1Bitmap = self[b1BitmapKey];\n            self[b1BitmapKey] = b1Bitmap | mask;\n\n            if (b1Bitmap == 0) self[B0_BITMAP_KEY] = self[B0_BITMAP_KEY] | (1 << ~b1BitmapKey);\n        }\n    }\n\n    function clear(mapping(uint256 => uint256) storage self, uint24 value) internal {\n        (uint256 b0b1, uint256 b2) = _split(value);\n        uint256 mask = 1 << b2;\n        uint256 b2Bitmap = self[b0b1];\n\n        self[b0b1] = b2Bitmap & (~mask);\n        if (b2Bitmap == mask) {\n            mask = 1 << (b0b1 & 0xff);\n            uint256 b1BitmapKey = ~(b0b1 >> 8);\n            uint256 b1Bitmap = self[b1BitmapKey];\n\n            self[b1BitmapKey] = b1Bitmap & (~mask);\n            if (mask == b1Bitmap) {\n                mask = 1 << (~b1BitmapKey);\n                self[B0_BITMAP_KEY] = self[B0_BITMAP_KEY] & (~mask);\n            }\n        }\n    }\n\n    function minGreaterThan(mapping(uint256 => uint256) storage self, uint24 value) internal view returns (uint24) {\n        (uint256 b0b1, uint256 b2) = _split(value);\n        uint256 b2Bitmap = (MAX_UINT_256_MINUS_1 << b2) & self[b0b1];\n        if (b2Bitmap == 0) {\n            uint256 b0 = b0b1 >> 8;\n            uint256 b1Bitmap = (MAX_UINT_256_MINUS_1 << (b0b1 & 0xff)) & self[~b0];\n            if (b1Bitmap == 0) {\n                uint256 b0Bitmap = (MAX_UINT_256_MINUS_1 << b0) & self[B0_BITMAP_KEY];\n                if (b0Bitmap == 0) return 0;\n                b0 = b0Bitmap.leastSignificantBit();\n                b1Bitmap = self[~b0];\n            }\n            b0b1 = (b0 << 8) | b1Bitmap.leastSignificantBit();\n            b2Bitmap = self[b0b1];\n        }\n        b2 = b2Bitmap.leastSignificantBit();\n        return uint24((b0b1 << 8) | b2);\n    }\n}\n"
    },
    "contracts/libraries/TotalClaimableMap.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\nimport \"@clober/library/contracts/DirtyUint64.sol\";\nimport \"@clober/library/contracts/PackedUint256.sol\";\n\nimport \"./Tick.sol\";\n\nlibrary TotalClaimableMap {\n    using DirtyUint64 for uint64;\n    using PackedUint256 for uint256;\n\n    // @dev n should be less than type(uint64).max due to the dirty storage logic.\n    function add(mapping(uint24 => uint256) storage self, Tick tick, uint64 n) internal {\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\n        uint256 group = self[groupIndex];\n        // @notice Be aware of dirty storage add logic\n        self[groupIndex] = group.update64Unsafe(\n            elementIndex, // elementIndex < 4\n            group.get64Unsafe(elementIndex).addClean(n)\n        );\n    }\n\n    function sub(mapping(uint24 => uint256) storage self, Tick tick, uint64 n) internal {\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\n        self[groupIndex] = self[groupIndex].sub64Unsafe(elementIndex, n);\n    }\n\n    function get(mapping(uint24 => uint256) storage self, Tick tick) internal view returns (uint64) {\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\n        return self[groupIndex].get64Unsafe(elementIndex).toClean();\n    }\n\n    function _splitTick(Tick tick) internal pure returns (uint24 groupIndex, uint8 elementIndex) {\n        uint256 casted = uint24(Tick.unwrap(tick));\n        assembly {\n            groupIndex := shr(2, casted) // div 4\n            elementIndex := and(casted, 3) // mod 4\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}