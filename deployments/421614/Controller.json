{
  "address": "0xcD79DE6Ee6644A225A87D2F40D3E3DeA8f9F7B39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ControllerSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Deadline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMarket",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "OrderId",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leftQuoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.CancelOrderParams[]",
          "name": "orderParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensToSettle",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC721PermitParams[]",
          "name": "permitParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "OrderId",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.ClaimOrderParams[]",
          "name": "orderParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensToSettle",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC721PermitParams[]",
          "name": "permitParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.Action[]",
          "name": "actionList",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "paramsDataList",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensToSettle",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC20PermitParams[]",
          "name": "erc20PermitParamsList",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC721PermitParams[]",
          "name": "erc721PermitParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "OrderId[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "fromPrice",
      "outputs": [
        {
          "internalType": "Tick",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        },
        {
          "internalType": "Tick",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "getDepth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "id",
          "type": "uint192"
        }
      ],
      "name": "getHighestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "OrderId",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "takeBookId",
              "type": "uint192"
            },
            {
              "internalType": "BookId",
              "name": "makeBookId",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "limitPrice",
              "type": "uint256"
            },
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "takeHookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "makeHookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.LimitOrderParams[]",
          "name": "orderParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensToSettle",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC20PermitParams[]",
          "name": "permitParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "limit",
      "outputs": [
        {
          "internalType": "OrderId[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.MakeOrderParams[]",
          "name": "orderParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensToSettle",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC20PermitParams[]",
          "name": "permitParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "make",
      "outputs": [
        {
          "internalType": "OrderId[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "Currency",
                  "name": "base",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "unit",
                  "type": "uint64"
                },
                {
                  "internalType": "Currency",
                  "name": "quote",
                  "type": "address"
                },
                {
                  "internalType": "FeePolicy",
                  "name": "makerPolicy",
                  "type": "uint24"
                },
                {
                  "internalType": "contract IHooks",
                  "name": "hooks",
                  "type": "address"
                },
                {
                  "internalType": "FeePolicy",
                  "name": "takerPolicy",
                  "type": "uint24"
                }
              ],
              "internalType": "struct IBookManager.BookKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.OpenBookParams[]",
          "name": "openBookParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "limitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.SpendOrderParams[]",
          "name": "orderParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensToSettle",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC20PermitParams[]",
          "name": "permitParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "spend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "limitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IController.TakeOrderParams[]",
          "name": "orderParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensToSettle",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC20PermitParams[]",
          "name": "permitParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        }
      ],
      "name": "take",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Tick",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "toPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8a4c9c579f66d6e304b25d262e0377067dbf7faf1d8a2961b290050a00478305",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0xcD79DE6Ee6644A225A87D2F40D3E3DeA8f9F7B39",
    "transactionIndex": 1,
    "gasUsed": "11506980",
    "logsBloom": "0x
    "blockHash": "0xb7814b98f06017137f6452ba1ee475f7a04b339c3c2910a586332c6a2acb7bac",
    "transactionHash": "0x8a4c9c579f66d6e304b25d262e0377067dbf7faf1d8a2961b290050a00478305",
    "logs": [],
    "blockNumber": 25615254,
    "cumulativeGasUsed": "11506980",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe10D92B75Bdb0925f3ABAa2c3E0f93f4ef4b2491"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf756200cf85274b59546285cf1c315d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ControllerSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"OrderId\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftQuoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.CancelOrderParams[]\",\"name\":\"orderParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToSettle\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC721PermitParams[]\",\"name\":\"permitParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"OrderId\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.ClaimOrderParams[]\",\"name\":\"orderParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToSettle\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC721PermitParams[]\",\"name\":\"permitParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IController.Action[]\",\"name\":\"actionList\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"paramsDataList\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToSettle\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC20PermitParams[]\",\"name\":\"erc20PermitParamsList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC721PermitParams[]\",\"name\":\"erc721PermitParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"OrderId[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"fromPrice\",\"outputs\":[{\"internalType\":\"Tick\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"getDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"}],\"name\":\"getHighestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"OrderId\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"takeBookId\",\"type\":\"uint192\"},{\"internalType\":\"BookId\",\"name\":\"makeBookId\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"takeHookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"makeHookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.LimitOrderParams[]\",\"name\":\"orderParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToSettle\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC20PermitParams[]\",\"name\":\"permitParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"OrderId[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.MakeOrderParams[]\",\"name\":\"orderParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToSettle\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC20PermitParams[]\",\"name\":\"permitParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"make\",\"outputs\":[{\"internalType\":\"OrderId[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unit\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.OpenBookParams[]\",\"name\":\"openBookParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.SpendOrderParams[]\",\"name\":\"orderParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToSettle\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC20PermitParams[]\",\"name\":\"permitParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct IController.TakeOrderParams[]\",\"name\":\"orderParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToSettle\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC20PermitParams[]\",\"name\":\"permitParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"toPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"cancel((uint256,uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"details\":\"IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\",\"params\":{\"deadline\":\"The deadline for the actions\",\"orderParamsList\":\"The list of actions to cancel\",\"permitParamsList\":\"The parameters of the permits\",\"tokensToSettle\":\"The tokens to settle\"}},\"claim((uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"details\":\"IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\",\"params\":{\"deadline\":\"The deadline for the actions\",\"orderParamsList\":\"The list of actions to claim\",\"permitParamsList\":\"The parameters of the permits\",\"tokensToSettle\":\"The tokens to settle\"}},\"execute(uint8[],bytes[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"details\":\"IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\",\"params\":{\"actionList\":\"The list of actions to execute\",\"deadline\":\"The deadline for the actions\",\"erc20PermitParamsList\":\"The parameters of the ERC20 permits\",\"erc721PermitParamsList\":\"The parameters of the ERC721 permits\",\"paramsDataList\":\"The parameters of the actions\",\"tokensToSettle\":\"The tokens to settle\"},\"returns\":{\"ids\":\"The ids of the orders\"}},\"fromPrice(uint256)\":{\"params\":{\"price\":\"The price to convert\"},\"returns\":{\"_0\":\"The tick\"}},\"getDepth(uint192,int24)\":{\"params\":{\"id\":\"The id of the book\",\"tick\":\"The tick of the book\"},\"returns\":{\"_0\":\"The depth of the book in quote amount\"}},\"getHighestPrice(uint192)\":{\"params\":{\"id\":\"The id of the book\"},\"returns\":{\"_0\":\"The highest price of the book with 2**128 precision\"}},\"getOrder(uint256)\":{\"params\":{\"orderId\":\"The id of the order\"},\"returns\":{\"claimableAmount\":\"The claimable base amount of the order\",\"openAmount\":\"The open quote amount of the order\",\"price\":\"The price of the order with 2**128 precision\",\"provider\":\"The provider of the order\"}},\"make((uint192,int24,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"details\":\"IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\",\"params\":{\"deadline\":\"The deadline for the actions\",\"orderParamsList\":\"The list of actions to make\",\"permitParamsList\":\"The parameters of the permits\",\"tokensToSettle\":\"The tokens to settle\"},\"returns\":{\"ids\":\"The ids of the orders\"}},\"open(((address,uint64,address,uint24,address,uint24),bytes)[],uint64)\":{\"params\":{\"deadline\":\"The deadline for the action\",\"openBookParamsList\":\"The parameters of the open book action\"}},\"spend((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"details\":\"IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\",\"params\":{\"deadline\":\"The deadline for the actions\",\"orderParamsList\":\"The list of actions to spend\",\"permitParamsList\":\"The parameters of the permits\",\"tokensToSettle\":\"The tokens to settle\"}},\"take((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"details\":\"IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\",\"params\":{\"deadline\":\"The deadline for the actions\",\"orderParamsList\":\"The list of actions to take\",\"permitParamsList\":\"The parameters of the permits\",\"tokensToSettle\":\"The tokens to settle\"}},\"toPrice(int24)\":{\"params\":{\"tick\":\"The tick to convert\"},\"returns\":{\"_0\":\"The price with 2**128 precision\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20TransferFailed()\":[{\"notice\":\"Thrown when an ERC20 transfer fails\"}],\"NativeTransferFailed()\":[{\"notice\":\"Thrown when a native transfer fails\"}]},\"kind\":\"user\",\"methods\":{\"cancel((uint256,uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"notice\":\"Cancels a list of orders\"},\"claim((uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"notice\":\"Claims a list of orders\"},\"execute(uint8[],bytes[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"notice\":\"Executes a list of actions\"},\"fromPrice(uint256)\":{\"notice\":\"Converts a price to a tick\"},\"getDepth(uint192,int24)\":{\"notice\":\"Returns the depth of a book\"},\"getHighestPrice(uint192)\":{\"notice\":\"Returns the highest price of a book\"},\"getOrder(uint256)\":{\"notice\":\"Returns the details of an order\"},\"make((uint192,int24,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"notice\":\"Makes a list of orders\"},\"open(((address,uint64,address,uint24,address,uint24),bytes)[],uint64)\":{\"notice\":\"Opens a book\"},\"spend((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"notice\":\"Spends to take a list of orders\"},\"take((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)\":{\"notice\":\"Takes a list of orders\"},\"toPrice(int24)\":{\"notice\":\"Converts a tick to a price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {IController} from \\\"./interfaces/IController.sol\\\";\\nimport {ILocker} from \\\"./interfaces/ILocker.sol\\\";\\nimport {IBookManager} from \\\"./interfaces/IBookManager.sol\\\";\\nimport {IERC721Permit} from \\\"./interfaces/IERC721Permit.sol\\\";\\nimport {Math} from \\\"./libraries/Math.sol\\\";\\nimport {BookId, BookIdLibrary} from \\\"./libraries/BookId.sol\\\";\\nimport {OrderId, OrderIdLibrary} from \\\"./libraries/OrderId.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"./libraries/Currency.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"./libraries/FeePolicy.sol\\\";\\nimport {Tick, TickLibrary} from \\\"./libraries/Tick.sol\\\";\\nimport {OrderId, OrderIdLibrary} from \\\"./libraries/OrderId.sol\\\";\\n\\ncontract Controller is IController, ILocker, ReentrancyGuard {\\n    using TickLibrary for *;\\n    using OrderIdLibrary for OrderId;\\n    using BookIdLibrary for IBookManager.BookKey;\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using Math for uint256;\\n    using CurrencyLibrary for Currency;\\n    using FeePolicyLibrary for FeePolicy;\\n\\n    IBookManager private immutable _bookManager;\\n\\n    constructor(address bookManager) {\\n        _bookManager = IBookManager(bookManager);\\n    }\\n\\n    modifier checkDeadline(uint64 deadline) {\\n        if (block.timestamp > deadline) revert Deadline();\\n        _;\\n    }\\n\\n    modifier permitERC20(ERC20PermitParams[] calldata permitParamsList) {\\n        _permitERC20(permitParamsList);\\n        _;\\n    }\\n\\n    function getDepth(BookId id, Tick tick) external view returns (uint256) {\\n        return uint256(_bookManager.getDepth(id, tick)) * _bookManager.getBookKey(id).unit;\\n    }\\n\\n    function getHighestPrice(BookId id) external view returns (uint256) {\\n        return _bookManager.getHighest(id).toPrice();\\n    }\\n\\n    function getOrder(OrderId orderId)\\n        external\\n        view\\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount)\\n    {\\n        (BookId bookId, Tick tick,) = orderId.decode();\\n        IBookManager.BookKey memory key = _bookManager.getBookKey(bookId);\\n        uint256 unit = key.unit;\\n        price = tick.toPrice();\\n        IBookManager.OrderInfo memory orderInfo = _bookManager.getOrder(orderId);\\n        provider = orderInfo.provider;\\n        openAmount = unit * orderInfo.open;\\n        FeePolicy makerPolicy = key.makerPolicy;\\n        claimableAmount = tick.quoteToBase(unit * orderInfo.claimable, false);\\n        if (!makerPolicy.usesQuote()) {\\n            int256 fee = makerPolicy.calculateFee(claimableAmount, false);\\n            claimableAmount = fee > 0 ? claimableAmount - uint256(fee) : claimableAmount + uint256(-fee);\\n        }\\n    }\\n\\n    function fromPrice(uint256 price) external pure returns (Tick) {\\n        return price.fromPrice();\\n    }\\n\\n    function toPrice(Tick tick) external pure returns (uint256) {\\n        return tick.toPrice();\\n    }\\n\\n    function lockAcquired(address sender, bytes memory data) external nonReentrant returns (bytes memory returnData) {\\n        if (msg.sender != address(_bookManager) || sender != address(this)) revert InvalidAccess();\\n        (address user, Action[] memory actionList, bytes[] memory orderParamsList, address[] memory tokensToSettle) =\\n            abi.decode(data, (address, Action[], bytes[], address[]));\\n\\n        uint256 length = actionList.length;\\n        OrderId[] memory ids = new OrderId[](length);\\n        uint256 orderIdIndex;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            Action action = actionList[i];\\n            if (action == Action.OPEN) {\\n                _open(abi.decode(orderParamsList[i], (OpenBookParams)));\\n            } else if (action == Action.MAKE) {\\n                OrderId id = _make(abi.decode(orderParamsList[i], (MakeOrderParams)));\\n                if (OrderId.unwrap(id) != 0) {\\n                    _bookManager.transferFrom(address(this), user, OrderId.unwrap(id));\\n                    ids[orderIdIndex++] = id;\\n                }\\n            } else if (action == Action.LIMIT) {\\n                OrderId id = _limit(abi.decode(orderParamsList[i], (LimitOrderParams)));\\n                if (OrderId.unwrap(id) != 0) {\\n                    _bookManager.transferFrom(address(this), user, OrderId.unwrap(id));\\n                    ids[orderIdIndex++] = id;\\n                }\\n            } else if (action == Action.TAKE) {\\n                _take(abi.decode(orderParamsList[i], (TakeOrderParams)));\\n            } else if (action == Action.SPEND) {\\n                _spend(abi.decode(orderParamsList[i], (SpendOrderParams)));\\n            } else if (action == Action.CLAIM) {\\n                ClaimOrderParams memory claimOrderParams = abi.decode(orderParamsList[i], (ClaimOrderParams));\\n                uint256 orderId = OrderId.unwrap(claimOrderParams.id);\\n                _bookManager.checkAuthorized(_bookManager.ownerOf(orderId), user, orderId);\\n                _claim(claimOrderParams);\\n            } else if (action == Action.CANCEL) {\\n                CancelOrderParams memory cancelOrderParams = abi.decode(orderParamsList[i], (CancelOrderParams));\\n                uint256 orderId = OrderId.unwrap(cancelOrderParams.id);\\n                _bookManager.checkAuthorized(_bookManager.ownerOf(orderId), user, orderId);\\n                _cancel(cancelOrderParams);\\n            } else {\\n                revert InvalidAction();\\n            }\\n        }\\n\\n        _settleTokens(user, tokensToSettle);\\n\\n        assembly {\\n            mstore(ids, orderIdIndex)\\n        }\\n        returnData = abi.encode(ids);\\n    }\\n\\n    function execute(\\n        Action[] calldata actionList,\\n        bytes[] calldata paramsDataList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata erc20PermitParamsList,\\n        ERC721PermitParams[] calldata erc721PermitParamsList,\\n        uint64 deadline\\n    ) external payable checkDeadline(deadline) returns (OrderId[] memory ids) {\\n        if (actionList.length != paramsDataList.length) revert InvalidLength();\\n        _permitERC20(erc20PermitParamsList);\\n        _permitERC721(erc721PermitParamsList);\\n\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        bytes memory result = _bookManager.lock(address(this), lockData);\\n\\n        if (result.length != 0) {\\n            (ids) = abi.decode(result, (OrderId[]));\\n        }\\n        return ids;\\n    }\\n\\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external checkDeadline(deadline) {\\n        uint256 length = openBookParamsList.length;\\n        Action[] memory actionList = new Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = Action.OPEN;\\n            paramsDataList[i] = abi.encode(openBookParamsList[i]);\\n        }\\n        address[] memory tokensToSettle;\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        _bookManager.lock(address(this), lockData);\\n    }\\n\\n    function limit(\\n        LimitOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) returns (OrderId[] memory ids) {\\n        uint256 length = orderParamsList.length;\\n        Action[] memory actionList = new Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = Action.LIMIT;\\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\\n        }\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        bytes memory result = _bookManager.lock(address(this), lockData);\\n        (ids) = abi.decode(result, (OrderId[]));\\n    }\\n\\n    function make(\\n        MakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) returns (OrderId[] memory ids) {\\n        uint256 length = orderParamsList.length;\\n        Action[] memory actionList = new Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = Action.MAKE;\\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\\n        }\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        bytes memory result = _bookManager.lock(address(this), lockData);\\n        (ids) = abi.decode(result, (OrderId[]));\\n    }\\n\\n    function take(\\n        TakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) {\\n        uint256 length = orderParamsList.length;\\n        Action[] memory actionList = new Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = Action.TAKE;\\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\\n        }\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        _bookManager.lock(address(this), lockData);\\n    }\\n\\n    function spend(\\n        SpendOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable checkDeadline(deadline) permitERC20(permitParamsList) {\\n        uint256 length = orderParamsList.length;\\n        Action[] memory actionList = new Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = Action.SPEND;\\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\\n        }\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        _bookManager.lock(address(this), lockData);\\n    }\\n\\n    function claim(\\n        ClaimOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external checkDeadline(deadline) {\\n        _permitERC721(permitParamsList);\\n        uint256 length = orderParamsList.length;\\n        Action[] memory actionList = new Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = Action.CLAIM;\\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\\n        }\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        _bookManager.lock(address(this), lockData);\\n    }\\n\\n    function cancel(\\n        CancelOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external checkDeadline(deadline) {\\n        _permitERC721(permitParamsList);\\n        uint256 length = orderParamsList.length;\\n        Action[] memory actionList = new Action[](length);\\n        bytes[] memory paramsDataList = new bytes[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            actionList[i] = Action.CANCEL;\\n            paramsDataList[i] = abi.encode(orderParamsList[i]);\\n        }\\n        bytes memory lockData = abi.encode(msg.sender, actionList, paramsDataList, tokensToSettle);\\n        _bookManager.lock(address(this), lockData);\\n    }\\n\\n    function _open(OpenBookParams memory params) internal {\\n        _bookManager.open(params.key, params.hookData);\\n    }\\n\\n    function _make(MakeOrderParams memory params) internal returns (OrderId id) {\\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id);\\n\\n        uint256 quoteAmount = params.quoteAmount;\\n        if (key.makerPolicy.usesQuote()) {\\n            quoteAmount = key.makerPolicy.calculateOriginalAmount(quoteAmount, false);\\n        }\\n        uint64 rawAmount = (quoteAmount / key.unit).toUint64();\\n        if (rawAmount > 0) {\\n            (id,) = _bookManager.make(\\n                IBookManager.MakeParams({key: key, tick: params.tick, amount: rawAmount, provider: address(0)}),\\n                params.hookData\\n            );\\n        }\\n        return id;\\n    }\\n\\n    function _limit(LimitOrderParams memory params) internal returns (OrderId id) {\\n        (, uint256 spendBaseAmount) = _spend(\\n            SpendOrderParams({\\n                id: params.takeBookId,\\n                limitPrice: params.limitPrice,\\n                baseAmount: params.quoteAmount,\\n                hookData: params.takeHookData\\n            })\\n        );\\n        params.quoteAmount -= spendBaseAmount;\\n        if (params.quoteAmount > 0) {\\n            id = _make(\\n                MakeOrderParams({\\n                    id: params.makeBookId,\\n                    quoteAmount: params.quoteAmount,\\n                    tick: params.tick,\\n                    hookData: params.makeHookData\\n                })\\n            );\\n        }\\n    }\\n\\n    function _take(TakeOrderParams memory params)\\n        internal\\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\\n    {\\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id);\\n\\n        while (params.quoteAmount > takenQuoteAmount && !_bookManager.isEmpty(params.id)) {\\n            Tick tick = _bookManager.getHighest(params.id);\\n            if (params.limitPrice > tick.toPrice()) break;\\n            uint256 maxAmount;\\n            unchecked {\\n                if (key.takerPolicy.usesQuote()) {\\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.quoteAmount - takenQuoteAmount, true);\\n                } else {\\n                    maxAmount = params.quoteAmount - takenQuoteAmount;\\n                }\\n            }\\n            maxAmount = maxAmount.divide(key.unit, true);\\n\\n            if (maxAmount == 0) break;\\n            (uint256 quoteAmount, uint256 baseAmount) = _bookManager.take(\\n                IBookManager.TakeParams({key: key, tick: tick, maxAmount: maxAmount.toUint64()}), params.hookData\\n            );\\n            if (quoteAmount == 0) break;\\n\\n            takenQuoteAmount += quoteAmount;\\n            spendBaseAmount += baseAmount;\\n        }\\n    }\\n\\n    function _spend(SpendOrderParams memory params)\\n        internal\\n        returns (uint256 takenQuoteAmount, uint256 spendBaseAmount)\\n    {\\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id);\\n\\n        while (spendBaseAmount < params.baseAmount && !_bookManager.isEmpty(params.id)) {\\n            Tick tick = _bookManager.getHighest(params.id);\\n            if (params.limitPrice > tick.toPrice()) break;\\n            uint256 maxAmount;\\n            unchecked {\\n                if (key.takerPolicy.usesQuote()) {\\n                    maxAmount = params.baseAmount - spendBaseAmount;\\n                } else {\\n                    maxAmount = key.takerPolicy.calculateOriginalAmount(params.baseAmount - spendBaseAmount, false);\\n                }\\n            }\\n            maxAmount = tick.baseToQuote(maxAmount, false) / key.unit;\\n            if (maxAmount == 0) break;\\n            (uint256 quoteAmount, uint256 baseAmount) = _bookManager.take(\\n                IBookManager.TakeParams({key: key, tick: tick, maxAmount: maxAmount.toUint64()}), params.hookData\\n            );\\n            if (baseAmount == 0) break;\\n            takenQuoteAmount += quoteAmount;\\n            spendBaseAmount += baseAmount;\\n        }\\n    }\\n\\n    function _claim(ClaimOrderParams memory params) internal {\\n        _bookManager.claim(params.id, params.hookData);\\n    }\\n\\n    function _cancel(CancelOrderParams memory params) internal {\\n        IBookManager.BookKey memory key = _bookManager.getBookKey(params.id.getBookId());\\n        try _bookManager.cancel(\\n            IBookManager.CancelParams({id: params.id, to: (params.leftQuoteAmount / key.unit).toUint64()}),\\n            params.hookData\\n        ) {} catch {}\\n    }\\n\\n    function _settleTokens(address user, address[] memory tokensToSettle) internal {\\n        Currency native = CurrencyLibrary.NATIVE;\\n        int256 currencyDelta = _bookManager.currencyDelta(address(this), native);\\n        if (currencyDelta > 0) {\\n            native.transfer(address(_bookManager), uint256(currencyDelta));\\n            _bookManager.settle(native);\\n        }\\n        currencyDelta = _bookManager.currencyDelta(address(this), native);\\n        if (currencyDelta < 0) {\\n            _bookManager.withdraw(native, user, uint256(-currencyDelta));\\n        }\\n\\n        uint256 length = tokensToSettle.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            Currency currency = Currency.wrap(tokensToSettle[i]);\\n            currencyDelta = _bookManager.currencyDelta(address(this), currency);\\n            if (currencyDelta > 0) {\\n                IERC20(tokensToSettle[i]).safeTransferFrom(user, address(_bookManager), uint256(currencyDelta));\\n                _bookManager.settle(currency);\\n            }\\n            currencyDelta = _bookManager.currencyDelta(address(this), currency);\\n            if (currencyDelta < 0) {\\n                _bookManager.withdraw(Currency.wrap(tokensToSettle[i]), user, uint256(-currencyDelta));\\n            }\\n            uint256 balance = IERC20(tokensToSettle[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                IERC20(tokensToSettle[i]).transfer(user, balance);\\n            }\\n        }\\n        if (address(this).balance > 0) native.transfer(user, address(this).balance);\\n    }\\n\\n    function _permitERC20(ERC20PermitParams[] calldata permitParamsList) internal {\\n        for (uint256 i = 0; i < permitParamsList.length; ++i) {\\n            ERC20PermitParams memory permitParams = permitParamsList[i];\\n            if (permitParams.signature.deadline > 0) {\\n                try IERC20Permit(permitParams.token).permit(\\n                    msg.sender,\\n                    address(this),\\n                    permitParams.permitAmount,\\n                    permitParams.signature.deadline,\\n                    permitParams.signature.v,\\n                    permitParams.signature.r,\\n                    permitParams.signature.s\\n                ) {} catch {}\\n            }\\n        }\\n    }\\n\\n    function _permitERC721(ERC721PermitParams[] calldata permitParamsList) internal {\\n        for (uint256 i = 0; i < permitParamsList.length; ++i) {\\n            PermitSignature memory signature = permitParamsList[i].signature;\\n            if (signature.deadline > 0) {\\n                try IERC721Permit(address(_bookManager)).permit(\\n                    address(this),\\n                    permitParamsList[i].tokenId,\\n                    signature.deadline,\\n                    signature.v,\\n                    signature.r,\\n                    signature.s\\n                ) {} catch {}\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xda141f11cb6ef270b54faead5c1deea0602b3d9048f0ba994a2b887c4be0f92b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Currency} from \\\"../libraries/Currency.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {FeePolicy} from \\\"../libraries/FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnit();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unit The unit of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unit,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param amount The order amount\\n     * @param provider The provider address\\n     */\\n    event Make(\\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount, address provider\\n    );\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param amount The order amount\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param canceledAmount The canceled amount\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param rawAmount The claimed amount\\n     */\\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, address indexed recipient, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed newDefaultProvider);\\n\\n    struct BookKey {\\n        Currency base;\\n        uint64 unit;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable amount\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the highest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The highest tick\\n     */\\n    function getHighest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the maximum tick less than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next lower tick\\n     */\\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is opened\\n     * @param id The book ID\\n     * @return True if the book is opened, false otherwise\\n     */\\n    function isOpened(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\\n        /// @notice The limit order service provider address to collect fees\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxAmount;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 to;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @return The collected amount\\n     */\\n    function collect(address recipient, Currency currency) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0xea433e2d9ce22079bf1c8dbf0d4ed1cc5d1b8ea0429c5ed7f0bc4ce5b531e8f6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\n\\n/**\\n * @title IController\\n * @notice Interface for the controller contract\\n */\\ninterface IController {\\n    // Error messages\\n    error InvalidAccess();\\n    error InvalidLength();\\n    error Deadline();\\n    error InvalidMarket();\\n    error ControllerSlippage();\\n    error ValueTransferFailed();\\n    error InvalidAction();\\n\\n    /**\\n     * @notice Enum for the different actions that can be performed\\n     */\\n    enum Action {\\n        OPEN,\\n        MAKE,\\n        LIMIT,\\n        TAKE,\\n        SPEND,\\n        CLAIM,\\n        CANCEL\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the ERC20 permit\\n     */\\n    struct ERC20PermitParams {\\n        address token;\\n        uint256 permitAmount;\\n        PermitSignature signature;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the ERC721 permit\\n     */\\n    struct ERC721PermitParams {\\n        uint256 tokenId;\\n        PermitSignature signature;\\n    }\\n\\n    /**\\n     * @notice Struct for the signature of the permit\\n     */\\n    struct PermitSignature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the open book action\\n     */\\n    struct OpenBookParams {\\n        IBookManager.BookKey key;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the make order action\\n     */\\n    struct MakeOrderParams {\\n        BookId id;\\n        Tick tick;\\n        uint256 quoteAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the limit order action\\n     */\\n    struct LimitOrderParams {\\n        BookId takeBookId;\\n        BookId makeBookId;\\n        uint256 limitPrice;\\n        Tick tick;\\n        uint256 quoteAmount;\\n        bytes takeHookData;\\n        bytes makeHookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the take order action\\n     */\\n    struct TakeOrderParams {\\n        BookId id;\\n        uint256 limitPrice;\\n        uint256 quoteAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the spend order action\\n     */\\n    struct SpendOrderParams {\\n        BookId id;\\n        uint256 limitPrice;\\n        uint256 baseAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the claim order action\\n     */\\n    struct ClaimOrderParams {\\n        OrderId id;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Struct for the parameters of the cancel order action\\n     */\\n    struct CancelOrderParams {\\n        OrderId id;\\n        uint256 leftQuoteAmount;\\n        bytes hookData;\\n    }\\n\\n    /**\\n     * @notice Opens a book\\n     * @param openBookParamsList The parameters of the open book action\\n     * @param deadline The deadline for the action\\n     */\\n    function open(OpenBookParams[] calldata openBookParamsList, uint64 deadline) external;\\n\\n    /**\\n     * @notice Returns the depth of a book\\n     * @param id The id of the book\\n     * @param tick The tick of the book\\n     * @return The depth of the book in quote amount\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the highest price of a book\\n     * @param id The id of the book\\n     * @return The highest price of the book with 2**128 precision\\n     */\\n    function getHighestPrice(BookId id) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the details of an order\\n     * @param orderId The id of the order\\n     * @return provider The provider of the order\\n     * @return price The price of the order with 2**128 precision\\n     * @return openAmount The open quote amount of the order\\n     * @return claimableAmount The claimable base amount of the order\\n     */\\n    function getOrder(OrderId orderId)\\n        external\\n        view\\n        returns (address provider, uint256 price, uint256 openAmount, uint256 claimableAmount);\\n\\n    /**\\n     * @notice Converts a price to a tick\\n     * @param price The price to convert\\n     * @return The tick\\n     */\\n    function fromPrice(uint256 price) external pure returns (Tick);\\n\\n    /**\\n     * @notice Converts a tick to a price\\n     * @param tick The tick to convert\\n     * @return The price with 2**128 precision\\n     */\\n    function toPrice(Tick tick) external pure returns (uint256);\\n\\n    /**\\n     * @notice Executes a list of actions\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param actionList The list of actions to execute\\n     * @param paramsDataList The parameters of the actions\\n     * @param tokensToSettle The tokens to settle\\n     * @param erc20PermitParamsList The parameters of the ERC20 permits\\n     * @param erc721PermitParamsList The parameters of the ERC721 permits\\n     * @param deadline The deadline for the actions\\n     * @return ids The ids of the orders\\n     */\\n    function execute(\\n        Action[] calldata actionList,\\n        bytes[] calldata paramsDataList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata erc20PermitParamsList,\\n        ERC721PermitParams[] calldata erc721PermitParamsList,\\n        uint64 deadline\\n    ) external payable returns (OrderId[] memory ids);\\n\\n    /**\\n     * @notice Makes a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to make\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     * @return ids The ids of the orders\\n     */\\n    function make(\\n        MakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable returns (OrderId[] memory ids);\\n\\n    /**\\n     * @notice Takes a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to take\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function take(\\n        TakeOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable;\\n\\n    /**\\n     * @notice Spends to take a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to spend\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function spend(\\n        SpendOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC20PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external payable;\\n\\n    /**\\n     * @notice Claims a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to claim\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function claim(\\n        ClaimOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external;\\n\\n    /**\\n     * @notice Cancels a list of orders\\n     * @dev IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.\\n     * @param orderParamsList The list of actions to cancel\\n     * @param tokensToSettle The tokens to settle\\n     * @param permitParamsList The parameters of the permits\\n     * @param deadline The deadline for the actions\\n     */\\n    function cancel(\\n        CancelOrderParams[] calldata orderParamsList,\\n        address[] calldata tokensToSettle,\\n        ERC721PermitParams[] calldata permitParamsList,\\n        uint64 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0df32a88849330500f141e61f4fe38e6db3ca846800e357d85b4c36f43bbab67\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4d9d80441c88885319565bc701c35d50c73bfa100a49a5fc8e5102fb416aabf\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenAmount The amount that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledAmount The amount that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedAmount The amount that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0x9627052cb6279f42bbcbe17f960d7d0dc659a83bcb1670b280408a06e7814ae4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ILocker\\n * @notice Interface for the locker contract\\n */\\ninterface ILocker {\\n    /**\\n     * @notice Called by the book manager on `msg.sender` when a lock is acquired\\n     * @param data The data that was passed to the call to lock\\n     * @return Any data that you want to be returned from the lock call\\n     */\\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x15fdb667c09302c413ce0791ac30b25bebac076d8d9a662eab2d928dafa06c37\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := hash\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428d95d5b141c6905c6726bdbd1a0c67c169a98a259f3befc7841e68cec4721d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\\n    }\\n}\\n\",\"keccak256\":\"0x7a4cd1d64d5c55f9f13144b5e0711317b5c83582b869def9a6a0c7cd0cc4c332\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {SignificantBit} from \\\"./SignificantBit.sol\\\";\\n\\nlibrary Math {\\n    using SignificantBit for uint256;\\n\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (int256) {\\n        require(x > 0);\\n\\n        uint8 msb = x.mostSignificantBit();\\n\\n        if (msb > 128) x >>= msb - 128;\\n        else if (msb < 128) x <<= 128 - msb;\\n\\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\\n\\n        int256 bit = 0x80000000000000000000000000000000;\\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result |= bit;\\n                x = (x >> 1) - 0x80000000000000000000000000000000;\\n            }\\n            bit >>= 1;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x44a5703a0cdbdf56c972cb7ddeb5205996e4879ee3d09a5f5c785adc4de076ab\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := shr(40, id)\\n            index := id\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := shr(40, id)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := id\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd41c94ed2861eb80259bf4e8e860fb3f1d446cb2148311fc46eace86e3c60cd1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SignificantBit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignificantBit {\\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\\n    bytes internal constant DEBRUIJN_INDEX =\\n        hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n     * @notice Finds the index of the least significant bit.\\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\\n     * @return ret The index of the least significant bit.\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 index;\\n        assembly {\\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\\n        }\\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 msb;\\n        assembly {\\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(5, gt(x, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(4, gt(x, 0xFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(3, gt(x, 0xFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(2, gt(x, 0xF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(1, gt(x, 0x3))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := gt(x, 0x1)\\n            msb := or(msb, f)\\n        }\\n        return uint8(msb);\\n    }\\n}\\n\",\"keccak256\":\"0x8dae2286bc0000fa7607b781f9ad044e81b48d10742cde8ecc050e58b1390c9b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for uint256;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 5800731190957938;\\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        int256 log = price.log2();\\n        int256 tick = log / 49089913871092318234424474366155889;\\n        int256 tickLow = (\\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\\n        ) / 49089913871092318234424474366155889;\\n\\n        if (tick == tickLow) return Tick.wrap(int24(tick));\\n\\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\\n\\n        return Tick.wrap(int24(tickLow));\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 128;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\\n        }\\n        if (tickValue > 0) price = type(uint256).max / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xc6b2ad67dec79b2d7a25b32243780c261fc760262209b881df2679d468a3c33d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620059733803806200597383398101604081905262000034916200004b565b60016000556001600160a01b03166080526200007d565b6000602082840312156200005e57600080fd5b81516001600160a01b03811681146200007657600080fd5b9392505050565b6080516157d0620001a3600039600081816102f1015281816104dc015281816106c10152818161080f015281816109a801528181610a3c01528181610b0801528181610c6901528181610ee7015281816111550152818161151f015281816115e8015281816116ae0152818161199601528181611da901528181611e3701528181611f1c015281816120d10152818161217601528181612214015281816123260152818161244a015281816124ef0152818161258d015281816126ad015281816127da01528181612858015281816128ff015281816129fe01528181612a8301528181612ac701528181612b5b01528181612bdb01528181612cc701528181612d4501528181612db701528181612e4b01528181612ec3015261365501526157d06000f3fe6080604052600436106100e15760003560e01c80638feb85b71161007f578063d09ef24111610059578063d09ef24114610259578063d35f1c42146102a3578063ef2a846e146102b6578063fe815746146102c957600080fd5b80638feb85b7146101f7578063a04c796b14610219578063a183a1041461023957600080fd5b8063483f9f2f116100bb578063483f9f2f1461017157806350835858146101a45780637658ab05146101c45780637d773110146101e457600080fd5b806315c7afb4146100ed5780631ae45a121461012357806341a8bb881461015157600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004613ef0565b6102dc565b60405161011a9190613fd2565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004613ffa565b61097b565b60405190815260200161011a565b34801561015d57600080fd5b5061014361016c366004614036565b610a1b565b34801561017d57600080fd5b5061019161018c36600461406f565b610b8d565b60405160029190910b815260200161011a565b3480156101b057600080fd5b506101436101bf366004614088565b610b98565b6101d76101d2366004614198565b610ba6565b60405161011a9190614298565b6101d76101f23660046142dc565b610d1b565b34801561020357600080fd5b50610217610212366004614389565b610f90565b005b34801561022557600080fd5b50610217610234366004614389565b6111e2565b34801561024557600080fd5b50610217610254366004614412565b611364565b34801561026557600080fd5b5061027961027436600461406f565b6115a9565b604080516001600160a01b039095168552602085019390935291830152606082015260800161011a565b6102176102b13660046142dc565b6117cf565b6102176102c43660046142dc565b611a25565b6101d76102d73660046142dc565b611ba9565b60606102e6611d2f565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614158061032757506001600160a01b0383163014155b1561035e576040517fc0185c6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000808580602001905181019061037891906145cf565b8251939750919550935091506000816001600160401b0381111561039e5761039e613df5565b6040519080825280602002602001820160405280156103c7578160200160208202803683370190505b5090506000805b838110156109345760008782815181106103ea576103ea6146cc565b6020026020010151905060006006811115610407576104076146e2565b816006811115610419576104196146e2565b0361045857610453878381518110610433576104336146cc565b602002602001015180602001905181019061044e91906147b9565b611d72565b61092b565b600181600681111561046c5761046c6146e2565b0361056a5760006104a8888481518110610488576104886146cc565b60200260200101518060200190518101906104a3919061484d565b611e11565b90508015610564576040516323b872dd60e01b81523060048201526001600160a01b038b81166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b15801561052057600080fd5b505af1158015610534573d6000803e3d6000fd5b5050505080858580610545906148ff565b965081518110610557576105576146cc565b6020026020010181815250505b5061092b565b600281600681111561057e5761057e6146e2565b036105ba5760006104a888848151811061059a5761059a6146cc565b60200260200101518060200190518101906105b59190614918565b611ff4565b60038160068111156105ce576105ce6146e2565b0361060f576106088783815181106105e8576105e86146cc565b60200260200101518060200190518101906106039190614a5f565b6120a9565b505061092b565b6004816006811115610623576106236146e2565b0361065d5761060887838151811061063d5761063d6146cc565b60200260200101518060200190518101906106589190614a5f565b612422565b6005816006811115610671576106716146e2565b036107ab57600087838151811061068a5761068a6146cc565b60200260200101518060200190518101906106a59190614a93565b80516040516331a9108f60e11b815260048101829052919250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f584a6d908290636352211e90602401602060405180830381865afa158015610718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073c9190614aee565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908e1660248201526044810184905260640160006040518083038186803b15801561078a57600080fd5b505afa15801561079e573d6000803e3d6000fd5b50505050610608826127a3565b60068160068111156107bf576107bf6146e2565b036108f95760008783815181106107d8576107d86146cc565b60200260200101518060200190518101906107f39190614b0b565b80516040516331a9108f60e11b815260048101829052919250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f584a6d908290636352211e90602401602060405180830381865afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190614aee565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908e1660248201526044810184905260640160006040518083038186803b1580156108d857600080fd5b505afa1580156108ec573d6000803e3d6000fd5b5050505061060882612854565b6040517f4a7f394f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001016103ce565b5061093f87856129d5565b808252816040516020016109539190614298565b6040516020818303038152906040529750505050505050506109756001600055565b92915050565b60405163cdc92f2d60e01b81526001600160c01b0382166004820152600090610975906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cdc92f2d90602401602060405180830381865afa1580156109ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a139190614b8b565b60020b6130de565b604051639b22917d60e01b81526001600160c01b03831660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190614ba8565b602001516040517f41a8bb880000000000000000000000000000000000000000000000000000000081526001600160c01b0385166004820152600284900b60248201526001600160401b03909116906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906341a8bb8890604401602060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b739190614bc4565b6001600160401b0316610b869190614be1565b9392505050565b6000610975826133e2565b60006109758260020b6130de565b606081806001600160401b0316421115610bd35760405163637910d560e11b815260040160405180910390fd5b8b8a14610c0c576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c16878761350a565b610c208585613611565b6000338e8e8e8e8e8e604051602001610c3f9796959493929190614cd8565b60408051601f19818403018152908290526313942f3360e31b825291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639ca1799890610ca09030908690600401614da9565b6000604051808303816000875af1158015610cbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ce79190810190614dcb565b90508051600014610d095780806020019051810190610d069190614dff565b93505b5050509b9a5050505050505050505050565b606081806001600160401b0316421115610d485760405163637910d560e11b815260040160405180910390fd5b8484610d54828261350a565b896000816001600160401b03811115610d6f57610d6f613df5565b604051908082528060200260200182016040528015610d98578160200160208202803683370190505b5090506000826001600160401b03811115610db557610db5613df5565b604051908082528060200260200182016040528015610de857816020015b6060815260200190600190039081610dd35790505b50905060005b83811015610ea1576001838281518110610e0a57610e0a6146cc565b60200260200101906006811115610e2357610e236146e2565b90816006811115610e3657610e366146e2565b9052508e8e82818110610e4b57610e4b6146cc565b9050602002810190610e5d9190614e84565b604051602001610e6d9190614ea4565b604051602081830303815290604052828281518110610e8e57610e8e6146cc565b6020908102919091010152600101610dee565b5060003383838f8f604051602001610ebd959493929190614f98565b60408051601f19818403018152908290526313942f3360e31b825291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639ca1799890610f1e9030908690600401614da9565b6000604051808303816000875af1158015610f3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f659190810190614dcb565b905080806020019051810190610f7b9190614dff565b98505050505050505050979650505050505050565b80806001600160401b0316421115610fbb5760405163637910d560e11b815260040160405180910390fd5b610fc58484613611565b866000816001600160401b03811115610fe057610fe0613df5565b604051908082528060200260200182016040528015611009578160200160208202803683370190505b5090506000826001600160401b0381111561102657611026613df5565b60405190808252806020026020018201604052801561105957816020015b60608152602001906001900390816110445790505b50905060005b8381101561111257600583828151811061107b5761107b6146cc565b60200260200101906006811115611094576110946146e2565b908160068111156110a7576110a76146e2565b9052508b8b828181106110bc576110bc6146cc565b90506020028101906110ce9190614fe1565b6040516020016110de9190614ff7565b6040516020818303038152906040528282815181106110ff576110ff6146cc565b602090810291909101015260010161105f565b5060003383838c8c60405160200161112e959493929190614f98565b60408051601f19818403018152908290526313942f3360e31b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639ca179989061118c9030908590600401614da9565b6000604051808303816000875af11580156111ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d39190810190614dcb565b50505050505050505050505050565b80806001600160401b031642111561120d5760405163637910d560e11b815260040160405180910390fd5b6112178484613611565b866000816001600160401b0381111561123257611232613df5565b60405190808252806020026020018201604052801561125b578160200160208202803683370190505b5090506000826001600160401b0381111561127857611278613df5565b6040519080825280602002602001820160405280156112ab57816020015b60608152602001906001900390816112965790505b50905060005b838110156111125760068382815181106112cd576112cd6146cc565b602002602001019060068111156112e6576112e66146e2565b908160068111156112f9576112f96146e2565b9052508b8b8281811061130e5761130e6146cc565b90506020028101906113209190615025565b604051602001611330919061503b565b604051602081830303815290604052828281518110611351576113516146cc565b60209081029190910101526001016112b1565b80806001600160401b031642111561138f5760405163637910d560e11b815260040160405180910390fd5b826000816001600160401b038111156113aa576113aa613df5565b6040519080825280602002602001820160405280156113d3578160200160208202803683370190505b5090506000826001600160401b038111156113f0576113f0613df5565b60405190808252806020026020018201604052801561142357816020015b606081526020019060019003908161140e5790505b50905060005b838110156114dc576000838281518110611445576114456146cc565b6020026020010190600681111561145e5761145e6146e2565b90816006811115611471576114716146e2565b905250878782818110611486576114866146cc565b90506020028101906114989190615073565b6040516020016114a8919061509f565b6040516020818303038152906040528282815181106114c9576114c96146cc565b6020908102919091010152600101611429565b5060606000338484846040516020016114f89493929190615167565b60408051601f19818403018152908290526313942f3360e31b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639ca17998906115569030908590600401614da9565b6000604051808303816000875af1158015611575573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261159d9190810190614dcb565b50505050505050505050565b60008080808080604087901c602888901c604051639b22917d60e01b81526001600160c01b038316600482015291935091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa15801561162f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116539190614ba8565b60208101519091506001600160401b0316611671600284900b6130de565b6040517fd09ef241000000000000000000000000000000000000000000000000000000008152600481018b90529097506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d09ef24190602401606060405180830381865afa1580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171991906151e7565b80516020820151909a50909150611739906001600160401b031683614be1565b606084015160408301519198509061176b9061175e906001600160401b031685614be1565b600287900b90600061372d565b965061177c8162ffffff1660171c90565b6117c257600061179262ffffff83168983613758565b9050600081136117b4576117a58161523b565b6117af9089615257565b6117be565b6117be818961526a565b9750505b5050505050509193509193565b80806001600160401b03164211156117fa5760405163637910d560e11b815260040160405180910390fd5b8383611806828261350a565b886000816001600160401b0381111561182157611821613df5565b60405190808252806020026020018201604052801561184a578160200160208202803683370190505b5090506000826001600160401b0381111561186757611867613df5565b60405190808252806020026020018201604052801561189a57816020015b60608152602001906001900390816118855790505b50905060005b838110156119535760048382815181106118bc576118bc6146cc565b602002602001019060068111156118d5576118d56146e2565b908160068111156118e8576118e86146e2565b9052508d8d828181106118fd576118fd6146cc565b905060200281019061190f9190614e84565b60405160200161191f91906152cd565b604051602081830303815290604052828281518110611940576119406146cc565b60209081029190910101526001016118a0565b5060003383838e8e60405160200161196f959493929190614f98565b60408051601f19818403018152908290526313942f3360e31b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639ca17998906119cd9030908590600401614da9565b6000604051808303816000875af11580156119ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a149190810190614dcb565b505050505050505050505050505050565b80806001600160401b0316421115611a505760405163637910d560e11b815260040160405180910390fd5b8383611a5c828261350a565b886000816001600160401b03811115611a7757611a77613df5565b604051908082528060200260200182016040528015611aa0578160200160208202803683370190505b5090506000826001600160401b03811115611abd57611abd613df5565b604051908082528060200260200182016040528015611af057816020015b6060815260200190600190039081611adb5790505b50905060005b83811015611953576003838281518110611b1257611b126146cc565b60200260200101906006811115611b2b57611b2b6146e2565b90816006811115611b3e57611b3e6146e2565b9052508d8d82818110611b5357611b536146cc565b9050602002810190611b659190614e84565b604051602001611b7591906152cd565b604051602081830303815290604052828281518110611b9657611b966146cc565b6020908102919091010152600101611af6565b606081806001600160401b0316421115611bd65760405163637910d560e11b815260040160405180910390fd5b8484611be2828261350a565b896000816001600160401b03811115611bfd57611bfd613df5565b604051908082528060200260200182016040528015611c26578160200160208202803683370190505b5090506000826001600160401b03811115611c4357611c43613df5565b604051908082528060200260200182016040528015611c7657816020015b6060815260200190600190039081611c615790505b50905060005b83811015610ea1576002838281518110611c9857611c986146cc565b60200260200101906006811115611cb157611cb16146e2565b90816006811115611cc457611cc46146e2565b9052508e8e82818110611cd957611cd96146cc565b9050602002810190611ceb9190615073565b604051602001611cfb91906152e0565b604051602081830303815290604052828281518110611d1c57611d1c6146cc565b6020908102919091010152600101611c7c565b600260005403611d6b576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b805160208201516040517ffefc7c510000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263fefc7c5192611ddc92600401615399565b600060405180830381600087803b158015611df657600080fd5b505af1158015611e0a573d6000803e3d6000fd5b5050505050565b8051604051639b22917d60e01b81526001600160c01b03909116600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa9190614ba8565b9050600083604001519050611ec8826060015162ffffff1660171c90565b15611ee6576060820151611ee39062ffffff168260006137db565b90505b6000611f0983602001516001600160401b031683611f049190615427565b613832565b90506001600160401b03811615611fec577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631dbef4886040518060800160405280868152602001886020015160020b8152602001846001600160401b0316815260200160006001600160a01b031681525087606001516040518363ffffffff1660e01b8152600401611fa692919061543b565b60408051808303816000875af1158015611fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe891906154ea565b5093505b505050919050565b600080612039604051806080016040528085600001516001600160c01b0316815260200185604001518152602001856080015181526020018560a00151815250612422565b915050808360800181815161204e919061526a565b9052506080830151156120a3576120a0604051806080016040528085602001516001600160c01b03168152602001856060015160020b8152602001856080015181526020018560c00151815250611e11565b91505b50919050565b8051604051639b22917d60e01b81526001600160c01b039091166004820152600090819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121449190614ba8565b90505b8284604001511180156121eb5750835160405163fcc8fc9b60e01b81526001600160c01b0390911660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fcc8fc9b90602401602060405180830381865afa1580156121c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e9919061550e565b155b1561241c57835160405163cdc92f2d60e01b81526001600160c01b0390911660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cdc92f2d90602401602060405180830381865afa158015612263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122879190614b8b565b90506122958160020b6130de565b856020015111156122a6575061241c565b60006122bb8360a0015162ffffff1660171c90565b156122ec576122e58587604001510360018560a0015162ffffff166137db9092919063ffffffff16565b90506122f6565b8486604001510390505b60208301516001600160401b031680820490820615156001160190508060000361232157505061241c565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b9500b060405180606001604052808881526020018760020b815260200161237687613832565b6001600160401b03168152508a606001516040518363ffffffff1660e01b81526004016123a4929190615530565b60408051808303816000875af11580156123c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e691906154ea565b91509150816000036123fb575050505061241c565b6124058288615257565b96506124118187615257565b955050505050612147565b50915091565b8051604051639b22917d60e01b81526001600160c01b039091166004820152600090819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015612499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bd9190614ba8565b90505b8360400151821080156125645750835160405163fcc8fc9b60e01b81526001600160c01b0390911660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fcc8fc9b90602401602060405180830381865afa15801561253e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612562919061550e565b155b1561241c57835160405163cdc92f2d60e01b81526001600160c01b0390911660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cdc92f2d90602401602060405180830381865afa1580156125dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126009190614b8b565b905061260e8160020b6130de565b8560200151111561261f575061241c565b60006126348360a0015162ffffff1660171c90565b156126475783866040015103905061266f565b61266c8487604001510360008560a0015162ffffff166137db9092919063ffffffff16565b90505b60208301516001600160401b031661268d600284900b83600061388a565b6126979190615427565b9050806000036126a857505061241c565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b9500b060405180606001604052808881526020018760020b81526020016126fd87613832565b6001600160401b03168152508a606001516040518363ffffffff1660e01b815260040161272b929190615530565b60408051808303816000875af1158015612749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276d91906154ea565b9150915080600003612782575050505061241c565b61278c8288615257565b96506127988187615257565b9550505050506124c0565b805160208201516040517f38926b6d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926338926b6d9261280d926004016155cb565b6020604051808303816000875af115801561282c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285091906155e4565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639b22917d612893846000015160401c90565b6040516001600160e01b031960e084901b1681526001600160c01b03909116600482015260240160c060405180830381865afa1580156128d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fb9190614ba8565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314d6a9eb60405180604001604052808560000151815260200161296185602001516001600160401b03168760200151611f049190615427565b6001600160401b031681525084604001516040518363ffffffff1660e01b815260040161298f9291906155fd565b6020604051808303816000875af19250505080156129ca575060408051601f3d908101601f191682019092526129c7918101906155e4565b60015b15612850575b505050565b60405163a54b283160e01b81523060048201526000602482018190529081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a54b283190604401602060405180830381865afa158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6991906155e4565b90506000811315612b3657612aa86001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836138d5565b604051636a256b2960e01b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303816000875af1158015612b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3491906155e4565b505b60405163a54b283160e01b81523060048201526001600160a01b0383811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063a54b283190604401602060405180830381865afa158015612ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc691906155e4565b90506000811215612c73576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d9caed128386612c0b8561523b565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015612c5a57600080fd5b505af1158015612c6e573d6000803e3d6000fd5b505050505b825160005b818110156130c3576000858281518110612c9457612c946146cc565b602090810291909101015160405163a54b283160e01b81523060048201526001600160a01b0380831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a54b283190604401602060405180830381865afa158015612d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3491906155e4565b93506000841315612e2657612d98877f000000000000000000000000000000000000000000000000000000000000000086898681518110612d7757612d776146cc565b60200260200101516001600160a01b03166139aa909392919063ffffffff16565b604051636a256b2960e01b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303816000875af1158015612e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2491906155e4565b505b60405163a54b283160e01b81523060048201526001600160a01b0382811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063a54b283190604401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb691906155e4565b93506000841215612f7d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d9caed12878481518110612f0257612f026146cc565b60200260200101518987612f159061523b565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015612f6457600080fd5b505af1158015612f78573d6000803e3d6000fd5b505050505b6000868381518110612f9157612f916146cc565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301e91906155e4565b905080156130b957868381518110613038576130386146cc565b602090810291909101015160405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015613093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b7919061550e565b505b5050600101612c78565b504715611e0a57611e0a6001600160a01b03841686476138d5565b60006130e982613a19565b816000600282900b81136130fd5781613106565b6131068261562a565b62ffffff811691506001161561312e576ffff97272373d413259a46990580e21399250613143565b70010000000000000000000000000000000092505b60028116156131665760806ffff2e50f5f656932ef12357cf3c7fdcb8402901c92505b60048116156131895760806fffe5caca7e10e4e61c3624eaa0941ccf8402901c92505b60088116156131ac5760806fffcb9843d60f6159c9db58835c9266438402901c92505b60108116156131cf5760806fff973b41fa98c081472e6896dfb254bf8402901c92505b60208116156131f25760806fff2ea16466c96a3843ec78b326b528608402901c92505b60408116156132155760806ffe5dee046a99a2a811c461f1969c30528402901c92505b60808116156132385760806ffcbe86c7900a88aedcffc83b479aa3a38402901c92505b61010081161561325c5760806ff987a7253ac413176f2b074cf7815e538402901c92505b6102008116156132805760806ff3392b0822b70005940c7a398e4b70f28402901c92505b6104008116156132a45760806fe7159475a2c29b7443b29c7fa6e889d88402901c92505b6108008116156132c85760806fd097f3bdfd2022b8845ad8f792aa58258402901c92505b6110008116156132ec5760806fa9f746462d870fdf8a65dc1f90e061e48402901c92505b6120008116156133105760806f70d869a156d2a1b890bb3df62baf32f68402901c92505b6140008116156133345760806f31be135f97d08fd981231505542fcfa58402901c92505b6180008116156133585760806f09aa508b5b7a84e1c677de54f3e99bc88402901c92505b6201000081161561337c5760806e5d6af8dedb81196699c329225ee6048402901c92505b6202000081161561339f5760806d2216e584f5fa1ea926041bedfe978402901c92505b620400008116156133c05760806b048a170391f7dc42444e8fa28402901c92505b60008260020b13156133db576133d883600019615427565b92505b5050919050565b600081790c6c127c88125cebb2bdb677f331363f32cf19fe80d4d1220a27811180613413575066149bbbfa13177281105b15613449576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061345484613a78565b905060006134716e097451d28210c583bbf7279ff89c718361564c565b905060006e097451d28210c583bbf7279ff89c71608087901c1561349f576911d069599f549a28ce716134b0565b6e097451d28210c583bbf7279ff89c6f5b6134cb906effffffffffffffffffffffffffffff168561567a565b6134d5919061564c565b90508082036134e8575092506120a39050565b856134f2836130de565b11613501575092506120a39050565b95945050505050565b60005b818110156129d0576000838383818110613529576135296146cc565b905060c0020180360381019061353f91906156f6565b604081015151909150156136085780516020808301516040808501518051938101518183015160609092015192517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810194909452606484019490945260ff909316608483015260a482019290925260c48101919091526001600160a01b039091169063d505accf9060e401600060405180830381600087803b1580156135f557600080fd5b505af1925050508015613606575060015b505b5060010161350d565b60005b818110156129d0576000838383818110613630576136306146cc565b905060a002016020018036038101906136499190615734565b805190915015613724577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ac2ff7b30868686818110613695576136956146cc565b865160208801516040808a015160608b015191516001600160e01b031960e08b901b1681526001600160a01b03909816600489015260a090940295909501356024870152604486019190915260ff16606485015260848401525060a482015260c401600060405180830381600087803b15801561371157600080fd5b505af1925050508015613722575060015b505b50600101613614565b6000613750608084901b6137438660020b6130de565b8082061515851691040190565b949350505050565b60006207a11f19627fffff851601600281900b8212828161377c578260000361377e565b825b62ffffff16905060006137b86137948389614be1565b620f4240886137aa578581830615151691040190565b808206151586151691040190565b9050826137cd576137c88161523b565b6137cf565b805b98975050505050505050565b60006207a11f19627fffff851601600281900b82128284156137fe578260000392505b82620f4240019050613827620f4240876138189190614be1565b82810615158416908390040190565b979650505050505050565b60006001600160401b0382111561388657604080517f6dfcc6500000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044015b60405180910390fd5b5090565b600061375061389b8560020b6130de565b6138a59085614be1565b6fffffffffffffffffffffffffffffffff8116151584167001000000000000000000000000000000009091040190565b60006001600160a01b03841661392d5760008060008085875af1905080613928576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6139a4565b60405163a9059cbb60e01b81526001600160a01b0384166004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806139a4576040517ff27f64e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526139a4908590613ba1565b6207ffff600282900b1380613a3e5750613a356207ffff61562a565b60020b8160020b125b15613a75576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000808211613a8657600080fd5b6000613a9183613c1d565b905060808160ff161115613ab757613aaa608082615750565b60ff1683901c9250613ad7565b60808160ff161015613ad757613ace816080615750565b60ff1683901b92505b6fffffffffffffffffffffffffffffffff929092169160006080613afe8160ff851661567a565b901b90506001607f1b60005b60808160ff16108015613b1d5750600086115b15613b97576080613b2e8780614be1565b613b3c906001607f1b615257565b613b4b911c600188901b615257565b95506fffffffffffffffffffffffffffffffff861115613b7e5791811791613b7b6001607f1b600188901c61526a565b95505b60019190911d9080613b8f81615769565b915050613b0a565b5090949350505050565b6000613bb66001600160a01b03841683613ca7565b90508051600014158015613bdb575080806020019051810190613bd9919061550e565b155b156129d0576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161387d565b6000808211613c2b57600080fd5b5060016fffffffffffffffffffffffffffffffff821160071b91821c6001600160401b03811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211871b91821c969096119490961792909217171791909117919091171790565b6060610b868383600084600080856001600160a01b03168486604051613ccd9190615788565b60006040518083038185875af1925050503d8060008114613d0a576040519150601f19603f3d011682016040523d82523d6000602084013e613d0f565b606091505b5091509150613d1f868383613d29565b9695505050505050565b606082613d3e57613d3982613d9e565b610b86565b8151158015613d5557506001600160a01b0384163b155b15613d97576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161387d565b5080610b86565b805115613dae5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381168114613a7557600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613e2d57613e2d613df5565b60405290565b604051608081016001600160401b0381118282101715613e2d57613e2d613df5565b60405160e081016001600160401b0381118282101715613e2d57613e2d613df5565b604051606081016001600160401b0381118282101715613e2d57613e2d613df5565b604051601f8201601f191681016001600160401b0381118282101715613ec157613ec1613df5565b604052919050565b60006001600160401b03821115613ee257613ee2613df5565b50601f01601f191660200190565b60008060408385031215613f0357600080fd5b8235613f0e81613de0565b915060208301356001600160401b03811115613f2957600080fd5b8301601f81018513613f3a57600080fd5b8035613f4d613f4882613ec9565b613e99565b818152866020838501011115613f6257600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b83811015613f9d578181015183820152602001613f85565b50506000910152565b60008151808452613fbe816020860160208601613f82565b601f01601f19169290920160200192915050565b602081526000610b866020830184613fa6565b6001600160c01b0381168114613a7557600080fd5b60006020828403121561400c57600080fd5b8135610b8681613fe5565b8060020b8114613a7557600080fd5b803561403181614017565b919050565b6000806040838503121561404957600080fd5b823561405481613fe5565b9150602083013561406481614017565b809150509250929050565b60006020828403121561408157600080fd5b5035919050565b60006020828403121561409a57600080fd5b8135610b8681614017565b60008083601f8401126140b757600080fd5b5081356001600160401b038111156140ce57600080fd5b6020830191508360208260051b85010111156140e957600080fd5b9250929050565b60008083601f84011261410257600080fd5b5081356001600160401b0381111561411957600080fd5b60208301915083602060c0830285010111156140e957600080fd5b60008083601f84011261414657600080fd5b5081356001600160401b0381111561415d57600080fd5b60208301915083602060a0830285010111156140e957600080fd5b6001600160401b0381168114613a7557600080fd5b803561403181614178565b600080600080600080600080600080600060c08c8e0312156141b957600080fd5b6001600160401b03808d3511156141cf57600080fd5b6141dc8e8e358f016140a5565b909c509a5060208d01358110156141f257600080fd5b6142028e60208f01358f016140a5565b909a50985060408d013581101561421857600080fd5b6142288e60408f01358f016140a5565b909850965060608d013581101561423e57600080fd5b61424e8e60608f01358f016140f0565b909650945060808d013581101561426457600080fd5b506142758d60808e01358e01614134565b909350915061428660a08d0161418d565b90509295989b509295989b9093969950565b6020808252825182820181905260009190848201906040850190845b818110156142d0578351835292840192918401916001016142b4565b50909695505050505050565b60008060008060008060006080888a0312156142f757600080fd5b87356001600160401b038082111561430e57600080fd5b61431a8b838c016140a5565b909950975060208a013591508082111561433357600080fd5b61433f8b838c016140a5565b909750955060408a013591508082111561435857600080fd5b506143658a828b016140f0565b909450925050606088013561437981614178565b8091505092959891949750929550565b60008060008060008060006080888a0312156143a457600080fd5b87356001600160401b03808211156143bb57600080fd5b6143c78b838c016140a5565b909950975060208a01359150808211156143e057600080fd5b6143ec8b838c016140a5565b909750955060408a013591508082111561440557600080fd5b506143658a828b01614134565b60008060006040848603121561442757600080fd5b83356001600160401b0381111561443d57600080fd5b614449868287016140a5565b909450925050602084013561445d81614178565b809150509250925092565b60006001600160401b0382111561448157614481613df5565b5060051b60200190565b60078110613a7557600080fd5b600082601f8301126144a957600080fd5b81516144b7613f4882613ec9565b8181528460208386010111156144cc57600080fd5b613750826020830160208701613f82565b600082601f8301126144ee57600080fd5b815160206144fe613f4883614468565b82815260059290921b8401810191818101908684111561451d57600080fd5b8286015b8481101561455c5780516001600160401b038111156145405760008081fd5b61454e8986838b0101614498565b845250918301918301614521565b509695505050505050565b600082601f83011261457857600080fd5b81516020614588613f4883614468565b8083825260208201915060208460051b8701019350868411156145aa57600080fd5b602086015b8481101561455c5780516145c281613de0565b83529183019183016145af565b600080600080608085870312156145e557600080fd5b84516145f081613de0565b809450506020808601516001600160401b038082111561460f57600080fd5b818801915088601f83011261462357600080fd5b8151614631613f4882614468565b81815260059190911b8301840190848101908b83111561465057600080fd5b938501935b828510156146775784516146688161448b565b82529385019390850190614655565b60408b0151909850945050508083111561469057600080fd5b61469c89848a016144dd565b945060608801519250808311156146b257600080fd5b50506146c087828801614567565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b62ffffff81168114613a7557600080fd5b600060c0828403121561471b57600080fd5b60405160c081018181106001600160401b038211171561473d5761473d613df5565b8060405250809150825161475081613de0565b8152602083015161476081614178565b6020820152604083015161477381613de0565b60408201526060830151614786816146f8565b6060820152608083015161479981613de0565b608082015260a08301516147ac816146f8565b60a0919091015292915050565b6000602082840312156147cb57600080fd5b81516001600160401b03808211156147e257600080fd5b9083019060e082860312156147f657600080fd5b6147fe613e0b565b6148088684614709565b815260c08301518281111561481c57600080fd5b61482887828601614498565b60208301525095945050505050565b805161403181613fe5565b805161403181614017565b60006020828403121561485f57600080fd5b81516001600160401b038082111561487657600080fd5b908301906080828603121561488a57600080fd5b614892613e33565b825161489d81613fe5565b815260208301516148ad81614017565b6020820152604083810151908201526060830151828111156148ce57600080fd5b6148da87828601614498565b60608301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201614911576149116148e9565b5060010190565b60006020828403121561492a57600080fd5b81516001600160401b038082111561494157600080fd5b9083019060e0828603121561495557600080fd5b61495d613e55565b61496683614837565b815261497460208401614837565b60208201526040830151604082015261498f60608401614842565b60608201526080830151608082015260a0830151828111156149b057600080fd5b6149bc87828601614498565b60a08301525060c0830151828111156149d457600080fd5b6149e087828601614498565b60c08301525095945050505050565b600060808284031215614a0157600080fd5b614a09613e33565b90508151614a1681613fe5565b80825250602082015160208201526040820151604082015260608201516001600160401b03811115614a4757600080fd5b614a5384828501614498565b60608301525092915050565b600060208284031215614a7157600080fd5b81516001600160401b03811115614a8757600080fd5b613750848285016149ef565b600060208284031215614aa557600080fd5b81516001600160401b0380821115614abc57600080fd5b9083019060408286031215614ad057600080fd5b614ad8613e0b565b8251815260208301518281111561481c57600080fd5b600060208284031215614b0057600080fd5b8151610b8681613de0565b600060208284031215614b1d57600080fd5b81516001600160401b0380821115614b3457600080fd5b9083019060608286031215614b4857600080fd5b614b50613e77565b8251815260208301516020820152604083015182811115614b7057600080fd5b614b7c87828601614498565b60408301525095945050505050565b600060208284031215614b9d57600080fd5b8151610b8681614017565b600060c08284031215614bba57600080fd5b610b868383614709565b600060208284031215614bd657600080fd5b8151610b8681614178565b8082028115828204841417610975576109756148e9565b600060078210614c1857634e487b7160e01b600052602160045260246000fd5b50815260200190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e19843603018112614c6157600080fd5b83016020810192503590506001600160401b03811115614c8057600080fd5b8036038213156140e957600080fd5b8183526000602080850194508260005b85811015614ccd578135614cb281613de0565b6001600160a01b031687529582019590820190600101614c9f565b509495945050505050565b6001600160a01b038816815260806020808301829052908201879052600090889060a08401835b8a811015614d2b578335614d128161448b565b614d1c8382614bf8565b94840194925050600101614cff565b5084810360408601528781528181019250600588901b810182018960005b8a811015614d8357838303601f19018652614d64828d614c4a565b614d6f858284614c21565b978701979450505090840190600101614d49565b50508581036060870152614d9881888a614c8f565b9d9c50505050505050505050505050565b6001600160a01b03831681526040602082015260006137506040830184613fa6565b600060208284031215614ddd57600080fd5b81516001600160401b03811115614df357600080fd5b61375084828501614498565b60006020808385031215614e1257600080fd5b82516001600160401b03811115614e2857600080fd5b8301601f81018513614e3957600080fd5b8051614e47613f4882614468565b81815260059190911b82018301908381019087831115614e6657600080fd5b928401925b8284101561382757835182529284019290840190614e6b565b60008235607e19833603018112614e9a57600080fd5b9190910192915050565b6020815260008235614eb581613fe5565b6001600160c01b0381166020840152506020830135614ed381614017565b8060020b60408401525060408301356060830152614ef46060840184614c4a565b60808085015261350160a085018284614c21565b60008151808452602080850194506020840160005b83811015614ccd57614f30878351614bf8565b965090820190600101614f1d565b60008282518085526020808601955060208260051b8401016020860160005b84811015614f8b57601f19868403018952614f79838351613fa6565b98840198925090830190600101614f5d565b5090979650505050505050565b6001600160a01b0386168152608060208201526000614fba6080830187614f08565b8281036040840152614fcc8187614f3e565b905082810360608401526137cf818587614c8f565b60008235603e19833603018112614e9a57600080fd5b602081528135602082015260006150116020840184614c4a565b604080850152613501606085018284614c21565b60008235605e19833603018112614e9a57600080fd5b602081528135602082015260208201356040820152600061505f6040840184614c4a565b606080850152613501608085018284614c21565b6000823560de19833603018112614e9a57600080fd5b8035614031816146f8565b803561403181613de0565b60208152600082356150b081613de0565b6001600160a01b038082166020850152602085013591506150d082614178565b6001600160401b0382166040850152604085013591506150ef82613de0565b16606083810191909152830135615105816146f8565b62ffffff811660808401525061511d60808401615094565b6001600160a01b03811660a08401525061513960a08401615089565b62ffffff811660c08401525061515260c0840184614c4a565b60e08085015261350161010085018284614c21565b60006001600160a01b03808716835260206080602085015261518c6080850188614f08565b848103604086015261519e8188614f3e565b85810360608701528651808252602080890193509091019060005b818110156151d75783518616835292840192918401916001016151b9565b50909a9950505050505050505050565b6000606082840312156151f957600080fd5b615201613e77565b825161520c81613de0565b8152602083015161521c81614178565b6020820152604083015161522f81614178565b60408201529392505050565b6000600160ff1b8203615250576152506148e9565b5060000390565b80820180821115610975576109756148e9565b81810381811115610975576109756148e9565b6000813561528a81613fe5565b6001600160c01b03811684525060208201356020840152604082013560408401526152b86060830183614c4a565b60806060860152613501608086018284614c21565b602081526000610b86602083018461527d565b60208152600082356152f181613fe5565b6001600160c01b038116602084015250602083013561530f81613fe5565b6001600160c01b0381166040840152506040830135606083015261533560608401614026565b615344608084018260020b9052565b50608083013560a083015261535c60a0840184614c4a565b60e060c085015261537261010085018284614c21565b91505061538260c0850185614c4a565b848303601f190160e0860152613d1f838284614c21565b6153fb81846001600160a01b038082511683526001600160401b036020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b60e060c0820152600061375060e0830184613fa6565b634e487b7160e01b600052601260045260246000fd5b60008261543657615436615411565b500490565b60006101406154a38386516001600160a01b038082511683526001600160401b036020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602085015160020b60c08401526001600160401b0360408601511660e08401526001600160a01b036060860151166101008401528061012084015261350181840185613fa6565b600080604083850312156154fd57600080fd5b505080516020909101519092909150565b60006020828403121561552057600080fd5b81518015158114610b8657600080fd5b60006101206155988386516001600160a01b038082511683526001600160401b036020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602085015160020b60c08401526001600160401b0360408601511660e08401528061010084015261350181840185613fa6565b8281526040602082015260006137506040830184613fa6565b6000602082840312156155f657600080fd5b5051919050565b825181526001600160401b0360208401511660208201526060604082015260006137506060830184613fa6565b60008160020b627fffff198103615643576156436148e9565b60000392915050565b60008261565b5761565b615411565b600160ff1b821460001984141615615675576156756148e9565b500590565b818103600083128015838313168383128216171561569a5761569a6148e9565b5092915050565b6000608082840312156156b357600080fd5b6156bb613e33565b905081358152602082013560ff811681146156d557600080fd5b80602083015250604082013560408201526060820135606082015292915050565b600060c0828403121561570857600080fd5b615710613e77565b823561571b81613de0565b81526020838101359082015261522f84604085016156a1565b60006080828403121561574657600080fd5b610b8683836156a1565b60ff8281168282160390811115610975576109756148e9565b600060ff821660ff810361577f5761577f6148e9565b60010192915050565b60008251614e9a818460208701613f8256fea264697066735822122044b03685cebff843552541068847ef7ef8e5bfbfd57a7f5ab55786ca45ac212364736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancel((uint256,uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "details": "IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.",
        "params": {
          "deadline": "The deadline for the actions",
          "orderParamsList": "The list of actions to cancel",
          "permitParamsList": "The parameters of the permits",
          "tokensToSettle": "The tokens to settle"
        }
      },
      "claim((uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "details": "IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.",
        "params": {
          "deadline": "The deadline for the actions",
          "orderParamsList": "The list of actions to claim",
          "permitParamsList": "The parameters of the permits",
          "tokensToSettle": "The tokens to settle"
        }
      },
      "execute(uint8[],bytes[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "details": "IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.",
        "params": {
          "actionList": "The list of actions to execute",
          "deadline": "The deadline for the actions",
          "erc20PermitParamsList": "The parameters of the ERC20 permits",
          "erc721PermitParamsList": "The parameters of the ERC721 permits",
          "paramsDataList": "The parameters of the actions",
          "tokensToSettle": "The tokens to settle"
        },
        "returns": {
          "ids": "The ids of the orders"
        }
      },
      "fromPrice(uint256)": {
        "params": {
          "price": "The price to convert"
        },
        "returns": {
          "_0": "The tick"
        }
      },
      "getDepth(uint192,int24)": {
        "params": {
          "id": "The id of the book",
          "tick": "The tick of the book"
        },
        "returns": {
          "_0": "The depth of the book in quote amount"
        }
      },
      "getHighestPrice(uint192)": {
        "params": {
          "id": "The id of the book"
        },
        "returns": {
          "_0": "The highest price of the book with 2**128 precision"
        }
      },
      "getOrder(uint256)": {
        "params": {
          "orderId": "The id of the order"
        },
        "returns": {
          "claimableAmount": "The claimable base amount of the order",
          "openAmount": "The open quote amount of the order",
          "price": "The price of the order with 2**128 precision",
          "provider": "The provider of the order"
        }
      },
      "make((uint192,int24,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "details": "IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.",
        "params": {
          "deadline": "The deadline for the actions",
          "orderParamsList": "The list of actions to make",
          "permitParamsList": "The parameters of the permits",
          "tokensToSettle": "The tokens to settle"
        },
        "returns": {
          "ids": "The ids of the orders"
        }
      },
      "open(((address,uint64,address,uint24,address,uint24),bytes)[],uint64)": {
        "params": {
          "deadline": "The deadline for the action",
          "openBookParamsList": "The parameters of the open book action"
        }
      },
      "spend((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "details": "IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.",
        "params": {
          "deadline": "The deadline for the actions",
          "orderParamsList": "The list of actions to spend",
          "permitParamsList": "The parameters of the permits",
          "tokensToSettle": "The tokens to settle"
        }
      },
      "take((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "details": "IMPORTANT: The caller must provide `tokensToSettle` to receive appropriate tokens after execution.",
        "params": {
          "deadline": "The deadline for the actions",
          "orderParamsList": "The list of actions to take",
          "permitParamsList": "The parameters of the permits",
          "tokensToSettle": "The tokens to settle"
        }
      },
      "toPrice(int24)": {
        "params": {
          "tick": "The tick to convert"
        },
        "returns": {
          "_0": "The price with 2**128 precision"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20TransferFailed()": [
        {
          "notice": "Thrown when an ERC20 transfer fails"
        }
      ],
      "NativeTransferFailed()": [
        {
          "notice": "Thrown when a native transfer fails"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "cancel((uint256,uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "notice": "Cancels a list of orders"
      },
      "claim((uint256,bytes)[],address[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "notice": "Claims a list of orders"
      },
      "execute(uint8[],bytes[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],(uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "notice": "Executes a list of actions"
      },
      "fromPrice(uint256)": {
        "notice": "Converts a price to a tick"
      },
      "getDepth(uint192,int24)": {
        "notice": "Returns the depth of a book"
      },
      "getHighestPrice(uint192)": {
        "notice": "Returns the highest price of a book"
      },
      "getOrder(uint256)": {
        "notice": "Returns the details of an order"
      },
      "make((uint192,int24,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "notice": "Makes a list of orders"
      },
      "open(((address,uint64,address,uint24,address,uint24),bytes)[],uint64)": {
        "notice": "Opens a book"
      },
      "spend((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "notice": "Spends to take a list of orders"
      },
      "take((uint192,uint256,uint256,bytes)[],address[],(address,uint256,(uint256,uint8,bytes32,bytes32))[],uint64)": {
        "notice": "Takes a list of orders"
      },
      "toPrice(int24)": {
        "notice": "Converts a tick to a price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3456,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}