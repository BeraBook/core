{
  "address": "0x964146859fE891Af960985314025Ce91f85fD189",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyExistsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BookAlreadyOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BookNotOpened",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "maxCancelableAmount",
          "type": "uint64"
        }
      ],
      "name": "CancelFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "DirtyUint64Error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrdersOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "PackedUint256Error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QueueReplaceFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "SegmentedSegmentTreeError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLargeTakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    }
  ],
  "transactionHash": "0xe601057dee153b414db67daa3332dbdb70fd999a821ba7045cedaa3acd136525",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0x964146859fE891Af960985314025Ce91f85fD189",
    "transactionIndex": 50,
    "gasUsed": "1424053",
    "logsBloom": "0x
    "blockHash": "0x177b3be756d6b67006b2bd5e62a00e72a5406751da1210063387032a62917556",
    "transactionHash": "0xe601057dee153b414db67daa3332dbdb70fd999a821ba7045cedaa3acd136525",
    "logs": [],
    "blockNumber": 1039951,
    "cumulativeGasUsed": "5705063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6d67cda5872fd76f8ff4e0dcae9b6502",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyExistsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BookAlreadyOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BookNotOpened\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"maxCancelableAmount\",\"type\":\"uint64\"}],\"name\":\"CancelFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"DirtyUint64Error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrdersOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"PackedUint256Error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueReplaceFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"SegmentedSegmentTreeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLargeTakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{\"take(Book.State storage,int24,uint64)\":{\"params\":{\"maxTakeAmount\":\"The maximum amount to take\",\"self\":\"The book state\"},\"returns\":{\"takenAmount\":\"The actual amount to take\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"take(Book.State storage,int24,uint64)\":{\"notice\":\"Take orders from the book\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Book.sol\":\"Book\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@clober/library/contracts/DirtyUint64.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nlibrary DirtyUint64 {\\n    error DirtyUint64Error(uint256 errorCode);\\n    uint256 private constant _OVERFLOW_ERROR = 0;\\n    uint256 private constant _UNDERFLOW_ERROR = 1;\\n\\n    function toDirtyUnsafe(uint64 cleanUint) internal pure returns (uint64 dirtyUint) {\\n        assembly {\\n            dirtyUint := add(cleanUint, 1)\\n        }\\n    }\\n\\n    function toDirty(uint64 cleanUint) internal pure returns (uint64 dirtyUint) {\\n        assembly {\\n            dirtyUint := add(cleanUint, 1)\\n        }\\n        if (dirtyUint == 0) {\\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\\n        }\\n    }\\n\\n    function toClean(uint64 dirtyUint) internal pure returns (uint64 cleanUint) {\\n        assembly {\\n            cleanUint := sub(dirtyUint, gt(dirtyUint, 0))\\n        }\\n    }\\n\\n    function addClean(uint64 current, uint64 cleanUint) internal pure returns (uint64) {\\n        assembly {\\n            current := add(add(current, iszero(current)), cleanUint)\\n        }\\n        if (current < cleanUint) {\\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\\n        }\\n        return current;\\n    }\\n\\n    function addDirty(uint64 current, uint64 dirtyUint) internal pure returns (uint64) {\\n        assembly {\\n            current := sub(add(add(current, iszero(current)), add(dirtyUint, iszero(dirtyUint))), 1)\\n        }\\n        if (current < dirtyUint) {\\n            revert DirtyUint64Error(_OVERFLOW_ERROR);\\n        }\\n        return current;\\n    }\\n\\n    function subClean(uint64 current, uint64 cleanUint) internal pure returns (uint64 ret) {\\n        assembly {\\n            current := add(current, iszero(current))\\n            ret := sub(current, cleanUint)\\n        }\\n        if (current < ret || ret == 0) {\\n            revert DirtyUint64Error(_UNDERFLOW_ERROR);\\n        }\\n    }\\n\\n    function subDirty(uint64 current, uint64 dirtyUint) internal pure returns (uint64 ret) {\\n        assembly {\\n            current := add(current, iszero(current))\\n            ret := sub(add(current, 1), add(dirtyUint, iszero(dirtyUint)))\\n        }\\n        if (current < ret || ret == 0) {\\n            revert DirtyUint64Error(_UNDERFLOW_ERROR);\\n        }\\n    }\\n\\n    function sumPackedUnsafe(\\n        uint256 packed,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (uint64 ret) {\\n        packed = packed >> (from << 6);\\n        unchecked {\\n            for (uint256 i = from; i < to; ++i) {\\n                assembly {\\n                    let element := and(packed, 0xffffffffffffffff)\\n                    ret := add(ret, add(element, iszero(element)))\\n                    packed := shr(64, packed)\\n                }\\n            }\\n        }\\n        assembly {\\n            ret := sub(ret, sub(to, from))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f945464f04f0d1731dd2a6bf9f96768e63e09835cd812eae520ca47438a2069\",\"license\":\"-\"},\"@clober/library/contracts/PackedUint256.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nlibrary PackedUint256 {\\n    error PackedUint256Error(uint256 errorCode);\\n    uint256 private constant _UINT8_INDEX_ERROR = 0;\\n    uint256 private constant _UINT16_INDEX_ERROR = 1;\\n    uint256 private constant _UINT32_INDEX_ERROR = 2;\\n    uint256 private constant _UINT64_INDEX_ERROR = 3;\\n\\n    uint256 private constant _MAX_UINT64 = type(uint64).max;\\n    uint256 private constant _MAX_UINT32 = type(uint32).max;\\n    uint256 private constant _MAX_UINT16 = type(uint16).max;\\n    uint256 private constant _MAX_UINT8 = type(uint8).max;\\n\\n    function get8Unsafe(uint256 packed, uint256 index) internal pure returns (uint8 ret) {\\n        assembly {\\n            ret := shr(shl(3, index), packed)\\n        }\\n    }\\n\\n    function get8(uint256 packed, uint256 index) internal pure returns (uint8 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(3, index), packed)\\n        }\\n    }\\n\\n    function get16Unsafe(uint256 packed, uint256 index) internal pure returns (uint16 ret) {\\n        assembly {\\n            ret := shr(shl(4, index), packed)\\n        }\\n    }\\n\\n    function get16(uint256 packed, uint256 index) internal pure returns (uint16 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(4, index), packed)\\n        }\\n    }\\n\\n    function get32Unsafe(uint256 packed, uint256 index) internal pure returns (uint32 ret) {\\n        assembly {\\n            ret := shr(shl(5, index), packed)\\n        }\\n    }\\n\\n    function get32(uint256 packed, uint256 index) internal pure returns (uint32 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(5, index), packed)\\n        }\\n    }\\n\\n    function get64Unsafe(uint256 packed, uint256 index) internal pure returns (uint64 ret) {\\n        assembly {\\n            ret := shr(shl(6, index), packed)\\n        }\\n    }\\n\\n    function get64(uint256 packed, uint256 index) internal pure returns (uint64 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        assembly {\\n            ret := shr(shl(6, index), packed)\\n        }\\n    }\\n\\n    function add8Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(3, index), casted))\\n        }\\n    }\\n\\n    function add8(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        uint8 current = get8Unsafe(packed, index);\\n        current += value;\\n        ret = update8Unsafe(packed, index, current);\\n    }\\n\\n    function add16Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(4, index), casted))\\n        }\\n    }\\n\\n    function add16(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        uint16 current = get16Unsafe(packed, index);\\n        current += value;\\n        ret = update16Unsafe(packed, index, current);\\n    }\\n\\n    function add32Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(5, index), casted))\\n        }\\n    }\\n\\n    function add32(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        uint32 current = get32Unsafe(packed, index);\\n        current += value;\\n        ret = update32Unsafe(packed, index, current);\\n    }\\n\\n    function add64Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(shl(6, index), casted))\\n        }\\n    }\\n\\n    function add64(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        uint64 current = get64Unsafe(packed, index);\\n        current += value;\\n        ret = update64Unsafe(packed, index, current);\\n    }\\n\\n    function sub8Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(3, index), casted))\\n        }\\n    }\\n\\n    function sub8(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        uint8 current = get8Unsafe(packed, index);\\n        current -= value;\\n        ret = update8Unsafe(packed, index, current);\\n    }\\n\\n    function sub16Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(4, index), casted))\\n        }\\n    }\\n\\n    function sub16(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        uint16 current = get16Unsafe(packed, index);\\n        current -= value;\\n        ret = update16Unsafe(packed, index, current);\\n    }\\n\\n    function sub32Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(5, index), casted))\\n        }\\n    }\\n\\n    function sub32(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        uint32 current = get32Unsafe(packed, index);\\n        current -= value;\\n        ret = update32Unsafe(packed, index, current);\\n    }\\n\\n    function sub64Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        uint256 casted = value;\\n        assembly {\\n            ret := sub(packed, shl(shl(6, index), casted))\\n        }\\n    }\\n\\n    function sub64(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        uint64 current = get64Unsafe(packed, index);\\n        current -= value;\\n        ret = update64Unsafe(packed, index, current);\\n    }\\n\\n    function update8Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 3;\\n            packed = packed - (packed & (_MAX_UINT8 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update8(\\n        uint256 packed,\\n        uint256 index,\\n        uint8 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 31) {\\n            revert PackedUint256Error(_UINT8_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 3;\\n            packed = packed - (packed & (_MAX_UINT8 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update16Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 4;\\n            packed = packed - (packed & (_MAX_UINT16 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update16(\\n        uint256 packed,\\n        uint256 index,\\n        uint16 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 15) {\\n            revert PackedUint256Error(_UINT16_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 4;\\n            packed = packed - (packed & (_MAX_UINT16 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update32Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 5;\\n            packed = packed - (packed & (_MAX_UINT32 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update32(\\n        uint256 packed,\\n        uint256 index,\\n        uint32 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 7) {\\n            revert PackedUint256Error(_UINT32_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 5;\\n            packed = packed - (packed & (_MAX_UINT32 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update64Unsafe(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        unchecked {\\n            index = index << 6;\\n            packed = packed - (packed & (_MAX_UINT64 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function update64(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 value\\n    ) internal pure returns (uint256 ret) {\\n        if (index > 3) {\\n            revert PackedUint256Error(_UINT64_INDEX_ERROR);\\n        }\\n        unchecked {\\n            index = index << 6;\\n            packed = packed - (packed & (_MAX_UINT64 << index));\\n        }\\n        uint256 casted = value;\\n        assembly {\\n            ret := add(packed, shl(index, casted))\\n        }\\n    }\\n\\n    function total32(uint256 packed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret = _MAX_UINT32 & packed;\\n            for (uint256 i = 0; i < 7; ++i) {\\n                packed = packed >> 32;\\n                ret += _MAX_UINT32 & packed;\\n            }\\n            return ret;\\n        }\\n    }\\n\\n    function total64(uint256 packed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret = _MAX_UINT64 & packed;\\n            for (uint256 i = 0; i < 3; ++i) {\\n                packed = packed >> 64;\\n                ret += _MAX_UINT64 & packed;\\n            }\\n            return ret;\\n        }\\n    }\\n\\n    function sum32(\\n        uint256 packed,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            packed = packed >> (from << 5);\\n            uint256 ret = 0;\\n            for (uint256 i = from; i < to; ++i) {\\n                ret += _MAX_UINT32 & packed;\\n                packed = packed >> 32;\\n            }\\n            return ret;\\n        }\\n    }\\n\\n    function sum64(\\n        uint256 packed,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            packed = packed >> (from << 6);\\n            uint256 ret = 0;\\n            for (uint256 i = from; i < to; ++i) {\\n                ret += _MAX_UINT64 & packed;\\n                packed = packed >> 64;\\n            }\\n            return ret;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06afe8ad083ccf139f6629ea721aa57ee1356b13648d5b958ee5c0333647a4bf\",\"license\":\"-\"},\"@clober/library/contracts/SegmentedSegmentTree.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PackedUint256.sol\\\";\\nimport \\\"./DirtyUint64.sol\\\";\\n\\n/**\\n\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\n\\n                  Segmented Segment Tree\\n                               by Clober\\n\\n____________/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\____________/\\\\\\\\\\\\____\\n __________/\\\\\\\\\\\\\\\\\\\\___________/\\\\\\\\\\\\\\\\////___________/\\\\\\\\\\\\\\\\\\\\____\\n  ________/\\\\\\\\\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\///______________/\\\\\\\\\\\\/\\\\\\\\\\\\____\\n   ______/\\\\\\\\\\\\/\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\/\\\\/\\\\\\\\\\\\____\\n    ____/\\\\\\\\\\\\/__\\\\/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\///////\\\\\\\\\\\\_____/\\\\\\\\\\\\/__\\\\/\\\\\\\\\\\\____\\n     __/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\n      _\\\\///////////\\\\\\\\\\\\//__\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\///////////\\\\\\\\\\\\//__\\n       ___________\\\\/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/_____________\\\\/\\\\\\\\\\\\____\\n        ___________\\\\///________\\\\/////////_______________\\\\///_____\\n\\n          4 Layers of 64-bit nodes, hence 464\\n\\n\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\ud83c\\udf32\\n*/\\n\\nlibrary SegmentedSegmentTree {\\n    using PackedUint256 for uint256;\\n    using DirtyUint64 for uint64;\\n\\n    error SegmentedSegmentTreeError(uint256 errorCode);\\n    uint256 private constant _INDEX_ERROR = 0;\\n    uint256 private constant _OVERFLOW_ERROR = 1;\\n\\n    //    uint8 private constant _R = 2; // There are `2` root node groups\\n    //    uint8 private constant _C = 4; // There are `4` children (each child is a node group of its own) for each node\\n    uint8 private constant _L = 4; // There are `4` layers of node groups\\n    uint256 private constant _P = 4; // uint256 / uint64 = `4`\\n    uint256 private constant _P_M = 3; // % 4 = & `3`\\n    uint256 private constant _P_P = 2; // 2 ** `2` = 4\\n    uint256 private constant _N_P = 4; // C * P = 2 ** `4`\\n    uint256 private constant _MAX_NODES = 2**15; // (R * P) * ((C * P) ** (L - 1)) = `32768`\\n    uint256 private constant _MAX_NODES_P_MINUS_ONE = 14; // MAX_NODES / R = 2 ** `14`\\n\\n    struct Core {\\n        mapping(uint256 => uint256)[_L] layers;\\n    }\\n\\n    struct LayerIndex {\\n        uint256 group;\\n        uint256 node;\\n    }\\n\\n    function get(Core storage core, uint256 index) internal view returns (uint64 ret) {\\n        if (index >= _MAX_NODES) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n        unchecked {\\n            ret = core.layers[_L - 1][index >> _P_P].get64(index & _P_M).toClean();\\n        }\\n    }\\n\\n    function total(Core storage core) internal view returns (uint64) {\\n        return\\n            DirtyUint64.sumPackedUnsafe(core.layers[0][0], 0, _P) +\\n            DirtyUint64.sumPackedUnsafe(core.layers[0][1], 0, _P);\\n    }\\n\\n    function query(\\n        Core storage core,\\n        uint256 left,\\n        uint256 right\\n    ) internal view returns (uint64 sum) {\\n        if (left == right) {\\n            return 0;\\n        }\\n        // right should be greater than left\\n        if (left >= right) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n        if (right > _MAX_NODES) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n\\n        LayerIndex[] memory leftIndices = _getLayerIndices(left);\\n        LayerIndex[] memory rightIndices = _getLayerIndices(right);\\n        uint256 ret;\\n        uint256 deficit;\\n\\n        unchecked {\\n            uint256 leftNodeIndex;\\n            uint256 rightNodeIndex;\\n            for (uint256 l = _L - 1; ; --l) {\\n                LayerIndex memory leftIndex = leftIndices[l];\\n                LayerIndex memory rightIndex = rightIndices[l];\\n                leftNodeIndex += leftIndex.node;\\n                rightNodeIndex += rightIndex.node;\\n\\n                if (rightIndex.group == leftIndex.group) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, rightNodeIndex);\\n                    break;\\n                }\\n\\n                if (rightIndex.group - leftIndex.group < 4) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\\n\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\\n\\n                    for (uint256 group = leftIndex.group + 1; group < rightIndex.group; group++) {\\n                        ret += DirtyUint64.sumPackedUnsafe(core.layers[l][group], 0, _P);\\n                    }\\n                    break;\\n                }\\n\\n                if (leftIndex.group % 4 == 0) {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], 0, leftNodeIndex);\\n                    leftNodeIndex = 0;\\n                } else if (leftIndex.group % 4 == 1) {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group - 1], 0, _P);\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], 0, leftNodeIndex);\\n                    leftNodeIndex = 0;\\n                } else if (leftIndex.group % 4 == 2) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group + 1], 0, _P);\\n                    leftNodeIndex = 1;\\n                } else {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][leftIndex.group], leftNodeIndex, _P);\\n                    leftNodeIndex = 1;\\n                }\\n\\n                if (rightIndex.group % 4 == 0) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\\n                    rightNodeIndex = 0;\\n                } else if (rightIndex.group % 4 == 1) {\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group - 1], 0, _P);\\n                    ret += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], 0, rightNodeIndex);\\n                    rightNodeIndex = 0;\\n                } else if (rightIndex.group % 4 == 2) {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], rightNodeIndex, _P);\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group + 1], 0, _P);\\n                    rightNodeIndex = 1;\\n                } else {\\n                    deficit += DirtyUint64.sumPackedUnsafe(core.layers[l][rightIndex.group], rightNodeIndex, _P);\\n                    rightNodeIndex = 1;\\n                }\\n            }\\n            ret -= deficit;\\n        }\\n        sum = uint64(ret);\\n    }\\n\\n    function update(\\n        Core storage core,\\n        uint256 index,\\n        uint64 value\\n    ) internal returns (uint64 replaced) {\\n        if (index >= _MAX_NODES) {\\n            revert SegmentedSegmentTreeError(_INDEX_ERROR);\\n        }\\n        LayerIndex[] memory indices = _getLayerIndices(index);\\n        unchecked {\\n            LayerIndex memory bottomIndex = indices[_L - 1];\\n            replaced = core.layers[_L - 1][bottomIndex.group].get64Unsafe(bottomIndex.node).toClean();\\n            if (replaced >= value) {\\n                uint64 diff = replaced - value;\\n                for (uint256 l = 0; l < _L; ++l) {\\n                    LayerIndex memory layerIndex = indices[l];\\n                    uint256 node = core.layers[l][layerIndex.group];\\n                    core.layers[l][layerIndex.group] = node.update64(\\n                        layerIndex.node,\\n                        node.get64(layerIndex.node).subClean(diff)\\n                    );\\n                }\\n            } else {\\n                uint64 diff = value - replaced;\\n                if (total(core) > type(uint64).max - diff) revert SegmentedSegmentTreeError(_OVERFLOW_ERROR);\\n                for (uint256 l = 0; l < _L; ++l) {\\n                    LayerIndex memory layerIndex = indices[l];\\n                    uint256 node = core.layers[l][layerIndex.group];\\n                    core.layers[l][layerIndex.group] = node.update64(\\n                        layerIndex.node,\\n                        node.get64(layerIndex.node).addClean(diff)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getLayerIndices(uint256 index) private pure returns (LayerIndex[] memory) {\\n        unchecked {\\n            LayerIndex[] memory indices = new LayerIndex[](_L);\\n            uint256 shifter = _MAX_NODES_P_MINUS_ONE;\\n            for (uint256 l = 0; l < _L; ++l) {\\n                indices[l] = LayerIndex({group: index >> shifter, node: (index >> (shifter - _P_P)) & _P_M});\\n                shifter = shifter - _N_P;\\n            }\\n            return indices;\\n        }\\n    }\\n}\\n\\n/*\\n * Segmented Segment Tree is a Segment Tree\\n * that has been compressed so that `C` nodes\\n * are compressed into a single uint256.\\n *\\n * Each node in a non-leaf node group is the sum of the\\n * total sum of each child node group that it represents.\\n * Each non-leaf node represents `E` node groups.\\n *\\n * A node group consists of `S` uint256.\\n *\\n * By expressing the index in `N` notation,\\n * we can find the index in each respective layer\\n *\\n * S: Size of each node group\\n * C: Compression Coefficient\\n * E: Expansion Coefficient\\n * L: Number of Layers\\n * N: Notation, S * C * E\\n *\\n * `E` will not be considered for this version of the implementation. (E = 2)\\n */\\n\",\"keccak256\":\"0x2f77fa7d506726281f06ad30b4c2511698cd6aea252d0e8960466ae0b809e967\",\"license\":\"-\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"contracts/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"../libraries/Book.sol\\\";\\nimport \\\"../libraries/Currency.sol\\\";\\nimport \\\"../libraries/OrderId.sol\\\";\\nimport \\\"../libraries/Tick.sol\\\";\\nimport \\\"../libraries/FeePolicy.sol\\\";\\nimport \\\"./IERC721Permit.sol\\\";\\nimport \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnit();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unit The unit of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unit,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param amount The order amount\\n     */\\n    event Make(BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param amount The order amount\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 amount);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param canceledAmount The canceled amount\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 canceledAmount);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param rawAmount The claimed amount\\n     */\\n    event Claim(OrderId indexed orderId, uint64 rawAmount);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param oldDefaultProvider The old default provider address\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed oldDefaultProvider, address indexed newDefaultProvider);\\n\\n    struct BookKey {\\n        Currency base;\\n        uint64 unit;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable amount\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the lowest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The lowest tick\\n     */\\n    function getLowest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the minimum tick greater than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the highest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next higher tick\\n     */\\n    function minGreaterThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 amount; // times 10**unitDecimals to get actual bid amount\\n        /// @notice The limit order service provider address to collect fees\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxAmount;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 to;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param provider The provider address\\n     * @param currency The currency\\n     */\\n    function collect(address provider, Currency currency) external;\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0x70ed4c02f86ee08f773665a7b6a8540d78bf5197e71b3b10d7ff511a6acc2b36\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4d9d80441c88885319565bc701c35d50c73bfa100a49a5fc8e5102fb416aabf\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IBookManager.sol\\\";\\nimport \\\"../libraries/OrderId.sol\\\";\\nimport \\\"../libraries/Tick.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenAmount The amount that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledAmount The amount that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledAmount,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedAmount The amount that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedAmount, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb1e06b73d4db262613f7aaa1522cf72fe2dbbfea20e42990998cf833243603f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Book.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@clober/library/contracts/SegmentedSegmentTree.sol\\\";\\n\\nimport \\\"../interfaces/IBookManager.sol\\\";\\nimport \\\"./Tick.sol\\\";\\nimport \\\"./OrderId.sol\\\";\\nimport \\\"./TotalClaimableMap.sol\\\";\\nimport \\\"./TickBitmap.sol\\\";\\n\\nlibrary Book {\\n    using Book for State;\\n    using TickBitmap for mapping(uint256 => uint256);\\n    using SegmentedSegmentTree for SegmentedSegmentTree.Core;\\n    using TotalClaimableMap for mapping(uint24 => uint256);\\n    using TickLibrary for *;\\n    using OrderIdLibrary for OrderId;\\n\\n    error ZeroAmount();\\n    error BookAlreadyOpened();\\n    error BookNotOpened();\\n    error OrdersOutOfRange();\\n    error QueueReplaceFailed();\\n    error TooLargeTakeAmount();\\n    error CancelFailed(uint64 maxCancelableAmount);\\n\\n    // @dev Due to the segment tree implementation, the maximum order size is 2 ** 15.\\n    uint40 internal constant MAX_ORDER = 2 ** 15; // 32768\\n    uint256 internal constant MAX_ORDER_M = 2 ** 15 - 1; // % 32768\\n\\n    struct Order {\\n        address provider;\\n        uint64 pending; // @dev unfilled amount + filled(claimable) amount\\n    }\\n\\n    struct Queue {\\n        SegmentedSegmentTree.Core tree;\\n        Order[] orders;\\n    }\\n\\n    struct State {\\n        IBookManager.BookKey key;\\n        mapping(Tick tick => Queue) queues;\\n        mapping(uint256 => uint256) tickBitmap;\\n        // @dev Four values of totalClaimable are stored in one uint256\\n        mapping(uint24 groupIndex => uint256) totalClaimableOf;\\n    }\\n\\n    function open(State storage self, IBookManager.BookKey calldata key) external {\\n        if (self.isOpened()) revert BookAlreadyOpened();\\n        self.key = key;\\n    }\\n\\n    function isOpened(State storage self) internal view returns (bool) {\\n        return self.key.unit != 0;\\n    }\\n\\n    function checkOpened(State storage self) internal view {\\n        if (!self.isOpened()) revert BookNotOpened();\\n    }\\n\\n    function depth(State storage self, Tick tick) internal view returns (uint64) {\\n        return self.queues[tick].tree.total() - self.totalClaimableOf.get(tick);\\n    }\\n\\n    function lowest(State storage self) internal view returns (Tick) {\\n        return self.tickBitmap.lowest().toTick();\\n    }\\n\\n    function minGreaterThan(State storage self, Tick tick) internal view returns (Tick) {\\n        return self.tickBitmap.minGreaterThan(tick.toUint24()).toTick();\\n    }\\n\\n    function isEmpty(State storage self) internal view returns (bool) {\\n        return self.tickBitmap.isEmpty();\\n    }\\n\\n    function _getOrder(State storage self, Tick tick, uint40 index) private view returns (Order storage) {\\n        return self.queues[tick].orders[index];\\n    }\\n\\n    function getOrder(State storage self, Tick tick, uint40 index) internal view returns (Order memory) {\\n        return _getOrder(self, tick, index);\\n    }\\n\\n    function make(State storage self, Tick tick, uint64 amount, address provider)\\n        external\\n        returns (uint40 orderIndex)\\n    {\\n        if (amount == 0) revert ZeroAmount();\\n        uint24 tickIndex = tick.toUint24();\\n        if (!self.tickBitmap.has(tickIndex)) self.tickBitmap.set(tickIndex);\\n\\n        Queue storage queue = self.queues[tick];\\n        // @dev Assume that orders.length cannot reach to type(uint40).max + 1.\\n        orderIndex = SafeCast.toUint40(queue.orders.length);\\n\\n        if (orderIndex >= MAX_ORDER) {\\n            unchecked {\\n                uint40 staleOrderIndex = orderIndex - MAX_ORDER;\\n                uint64 stalePendingAmount = queue.orders[staleOrderIndex].pending;\\n                if (stalePendingAmount > 0) {\\n                    // If the order is not settled completely, we cannot replace it\\n                    uint64 claimable = calculateClaimableRawAmount(self, tick, staleOrderIndex);\\n                    if (claimable != stalePendingAmount) revert QueueReplaceFailed();\\n                }\\n            }\\n\\n            // The stale order is settled completely, so remove it from the totalClaimableOf.\\n            // We can determine the stale order is claimable.\\n            uint64 staleOrderedAmount = queue.tree.get(orderIndex & MAX_ORDER_M);\\n            if (staleOrderedAmount > 0) self.totalClaimableOf.sub(tick, staleOrderedAmount);\\n        }\\n\\n        queue.tree.update(orderIndex & MAX_ORDER_M, amount);\\n\\n        queue.orders.push(Order({pending: amount, provider: provider}));\\n    }\\n\\n    /**\\n     * @notice Take orders from the book\\n     * @param self The book state\\n     * @param maxTakeAmount The maximum amount to take\\n     * @return takenAmount The actual amount to take\\n     */\\n    function take(State storage self, Tick tick, uint64 maxTakeAmount) external returns (uint64 takenAmount) {\\n        uint64 currentDepth = depth(self, tick);\\n        if (currentDepth > maxTakeAmount) {\\n            takenAmount = maxTakeAmount;\\n        } else {\\n            takenAmount = currentDepth;\\n            self.tickBitmap.clear(tick.toUint24());\\n        }\\n\\n        self.totalClaimableOf.add(tick, takenAmount);\\n    }\\n\\n    function cancel(State storage self, OrderId orderId, uint64 to)\\n        external\\n        returns (uint64 canceled, uint64 afterPending)\\n    {\\n        (, Tick tick, uint40 orderIndex) = orderId.decode();\\n        Queue storage queue = self.queues[tick];\\n        uint64 pending = queue.orders[orderIndex].pending;\\n        uint64 claimableRaw = calculateClaimableRawAmount(self, tick, orderIndex);\\n        afterPending = to + claimableRaw;\\n        unchecked {\\n            if (pending < afterPending) revert CancelFailed(pending - claimableRaw);\\n            canceled = pending - afterPending;\\n\\n            self.queues[tick].tree.update(\\n                orderIndex & MAX_ORDER_M, self.queues[tick].tree.get(orderIndex & MAX_ORDER_M) - canceled\\n            );\\n        }\\n        queue.orders[orderIndex].pending = afterPending;\\n\\n        if (depth(self, tick) == 0) {\\n            // clear() won't revert so we can cancel with to=0 even if the depth() is already zero\\n            // works even if bitmap is empty\\n            self.tickBitmap.clear(tick.toUint24());\\n        }\\n    }\\n\\n    function claim(State storage self, Tick tick, uint40 index) external returns (uint64 claimedRaw) {\\n        Order storage order = _getOrder(self, tick, index);\\n\\n        claimedRaw = calculateClaimableRawAmount(self, tick, index);\\n        unchecked {\\n            order.pending -= claimedRaw;\\n        }\\n    }\\n\\n    function calculateClaimableRawAmount(State storage self, Tick tick, uint40 index) public view returns (uint64) {\\n        uint64 orderAmount = self.getOrder(tick, index).pending;\\n\\n        Queue storage queue = self.queues[tick];\\n        // @dev Book logic always considers replaced orders as claimable.\\n        unchecked {\\n            if (uint256(index) + MAX_ORDER < queue.orders.length) return orderAmount;\\n            uint64 totalClaimable = self.totalClaimableOf.get(tick);\\n            uint64 rangeRight = _getClaimRangeRight(queue, index);\\n            if (rangeRight - orderAmount >= totalClaimable) return 0;\\n\\n            // -------- totalClaimable ---------|---\\n            // ------|---- orderAmount ----|--------\\n            //   rangeLeft           rangeRight\\n            if (rangeRight <= totalClaimable) return orderAmount;\\n            // -- totalClaimable --|----------------\\n            // ------|---- orderAmount ----|--------\\n            //   rangeLeft           rangeRight\\n            else return totalClaimable - (rangeRight - orderAmount);\\n        }\\n    }\\n\\n    function _getClaimRangeRight(Queue storage queue, uint256 orderIndex) private view returns (uint64 rangeRight) {\\n        uint256 l = queue.orders.length & MAX_ORDER_M;\\n        uint256 r = (orderIndex + 1) & MAX_ORDER_M;\\n        rangeRight = (l < r) ? queue.tree.query(l, r) : queue.tree.total() - queue.tree.query(r, l);\\n    }\\n}\\n\",\"keccak256\":\"0x823ce74647f9be9ab7c6f4d7f33050ca617a6d30e0d2dfe54e471a380cb02148\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := hash\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e4f39abaec1daacb64f566bfff0471c39f6c9e55d28bf8c95a5d36263ab4fe1\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity ^0.8.20;\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xa0b380059f60b44a905482f7a46ba6657a48c2b0fc3a3d92907fbf68c031ae7d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(rate_, MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\\n    }\\n}\\n\",\"keccak256\":\"0xebc5eb1479644b4f0ac0ecd9de637b5f149b0a80e1d82ee787f38cc4cd1fa3bb\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SignificantBit.sol\\\";\\n\\nlibrary Math {\\n    using SignificantBit for uint256;\\n\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (int256) {\\n        require(x > 0);\\n\\n        uint8 msb = x.mostSignificantBit();\\n\\n        if (msb > 128) x >>= msb - 128;\\n        else if (msb < 128) x <<= 128 - msb;\\n\\n        x &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        int256 result = (int256(uint256(msb)) - 128) << 128; // Integer part of log_2\\n\\n        int256 bit = 0x80000000000000000000000000000000;\\n        for (uint8 i = 0; i < 128 && x > 0; i++) {\\n            x = (x << 1) + ((x * x + 0x80000000000000000000000000000000) >> 128);\\n            if (x > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result |= bit;\\n                x = (x >> 1) - 0x80000000000000000000000000000000;\\n            }\\n            bit >>= 1;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe7597fa634f5bd517236d0f003ebbbe03eed6fc77a07907870ac21c803fa95fa\",\"license\":\"-\"},\"contracts/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Tick.sol\\\";\\nimport \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := shr(40, id)\\n            index := id\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := shr(40, id)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := id\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x68d432fc1e330f0678b675beaf34889263d7c7411d19ff5c5654f4eca8ca1e42\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SignificantBit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignificantBit {\\n    // http://supertech.csail.mit.edu/papers/debruijn.pdf\\n    uint256 internal constant DEBRUIJN_SEQ = 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF;\\n    bytes internal constant DEBRUIJN_INDEX =\\n        hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n     * @notice Finds the index of the least significant bit.\\n     * @param x The value to compute the least significant bit for. Must be a non-zero value.\\n     * @return ret The index of the least significant bit.\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 index;\\n        assembly {\\n            index := shr(248, mul(and(x, add(not(x), 1)), DEBRUIJN_SEQ))\\n        }\\n        return uint8(DEBRUIJN_INDEX[index]); // can optimize with CODECOPY opcode\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8) {\\n        require(x > 0);\\n        uint256 msb;\\n        assembly {\\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(5, gt(x, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(4, gt(x, 0xFFFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(3, gt(x, 0xFF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(2, gt(x, 0xF))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := shl(1, gt(x, 0x3))\\n            msb := or(msb, f)\\n            x := shr(f, x)\\n            f := gt(x, 0x1)\\n            msb := or(msb, f)\\n        }\\n        return uint8(msb);\\n    }\\n}\\n\",\"keccak256\":\"0x8dae2286bc0000fa7607b781f9ad044e81b48d10742cde8ecc050e58b1390c9b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for uint256;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 5800731190957938;\\n    uint256 internal constant MAX_PRICE = 19961636804996334433808922353085948875386438476189866322430503;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990580e2139; // 2^128 / r^(2^0)\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357cf3c7fdcb;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624eaa0941ccf;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db58835c926643;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896dfb254bf;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b326b52860;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1969c3052;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b479aa3a3;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074cf7815e53;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a398e4b70f2;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7fa6e889d8;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f792aa5825;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f90e061e4;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df62baf32f6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505542fcfa5;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54f3e99bc8;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329225ee604;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea926041bedfe97;\\n    uint256 private constant _R18 = 0x48a170391f7dc42444e8fa2;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function toTick(uint24 x) internal pure returns (Tick t) {\\n        assembly {\\n            t := sub(x, 0x800000)\\n        }\\n    }\\n\\n    function toUint24(Tick tick) internal pure returns (uint24 r) {\\n        assembly {\\n            r := add(tick, 0x800000)\\n        }\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        int256 log = price.log2();\\n        int256 tick = log / 49089913871092318234424474366155889;\\n        int256 tickLow = (\\n            log - int256(uint256((price >> 128 == 0) ? 49089913871092318234424474366155887 : 84124744249948177485425))\\n        ) / 49089913871092318234424474366155889;\\n\\n        if (tick == tickLow) return Tick.wrap(int24(tick));\\n\\n        if (toPrice(Tick.wrap(int24(tick))) <= price) return Tick.wrap(int24(tick));\\n\\n        return Tick.wrap(int24(tickLow));\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 128;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 128;\\n        }\\n        if (tickValue > 0) price = type(uint256).max / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 128, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = raw(uint64) * unit(uint64) < 2^128\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 128, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0x29628ae108b4751ec75ccebed056f9f31cb3dfeea003e31e02ede78baad4a3dd\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SignificantBit.sol\\\";\\n\\nlibrary TickBitmap {\\n    using SignificantBit for uint256;\\n\\n    error EmptyError();\\n    error AlreadyExistsError();\\n\\n    uint256 public constant B0_BITMAP_KEY = uint256(keccak256(\\\"TickBitmap\\\"));\\n    uint256 public constant MAX_UINT_256_MINUS_1 = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;\\n\\n    function has(mapping(uint256 => uint256) storage self, uint24 value) internal view returns (bool) {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 mask = 1 << b2;\\n        return self[b0b1] & mask == mask;\\n    }\\n\\n    function isEmpty(mapping(uint256 => uint256) storage self) internal view returns (bool) {\\n        return self[B0_BITMAP_KEY] == 0;\\n    }\\n\\n    function _split(uint24 value) private pure returns (uint256 b0b1, uint8 b2) {\\n        assembly {\\n            b2 := value\\n            b0b1 := shr(8, value)\\n        }\\n    }\\n\\n    function lowest(mapping(uint256 => uint256) storage self) internal view returns (uint24) {\\n        if (isEmpty(self)) revert EmptyError();\\n\\n        uint256 b0 = self[B0_BITMAP_KEY].leastSignificantBit();\\n        uint256 b0b1 = (b0 << 8) | (self[~b0].leastSignificantBit());\\n        uint256 b2 = self[b0b1].leastSignificantBit();\\n        return uint24((b0b1 << 8) | b2);\\n    }\\n\\n    function set(mapping(uint256 => uint256) storage self, uint24 value) internal {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 mask = 1 << b2;\\n        uint256 b2Bitmap = self[b0b1];\\n        if (b2Bitmap & mask > 0) revert AlreadyExistsError();\\n\\n        self[b0b1] = b2Bitmap | mask;\\n        if (b2Bitmap == 0) {\\n            mask = 1 << (b0b1 & 0xff);\\n            uint256 b1BitmapKey = ~(b0b1 >> 8);\\n            uint256 b1Bitmap = self[b1BitmapKey];\\n            self[b1BitmapKey] = b1Bitmap | mask;\\n\\n            if (b1Bitmap == 0) self[B0_BITMAP_KEY] = self[B0_BITMAP_KEY] | (1 << ~b1BitmapKey);\\n        }\\n    }\\n\\n    function clear(mapping(uint256 => uint256) storage self, uint24 value) internal {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 mask = 1 << b2;\\n        uint256 b2Bitmap = self[b0b1];\\n\\n        self[b0b1] = b2Bitmap & (~mask);\\n        if (b2Bitmap == mask) {\\n            mask = 1 << (b0b1 & 0xff);\\n            uint256 b1BitmapKey = ~(b0b1 >> 8);\\n            uint256 b1Bitmap = self[b1BitmapKey];\\n\\n            self[b1BitmapKey] = b1Bitmap & (~mask);\\n            if (mask == b1Bitmap) {\\n                mask = 1 << (~b1BitmapKey);\\n                self[B0_BITMAP_KEY] = self[B0_BITMAP_KEY] & (~mask);\\n            }\\n        }\\n    }\\n\\n    function minGreaterThan(mapping(uint256 => uint256) storage self, uint24 value) internal view returns (uint24) {\\n        (uint256 b0b1, uint256 b2) = _split(value);\\n        uint256 b2Bitmap = (MAX_UINT_256_MINUS_1 << b2) & self[b0b1];\\n        if (b2Bitmap == 0) {\\n            uint256 b0 = b0b1 >> 8;\\n            uint256 b1Bitmap = (MAX_UINT_256_MINUS_1 << (b0b1 & 0xff)) & self[~b0];\\n            if (b1Bitmap == 0) {\\n                uint256 b0Bitmap = (MAX_UINT_256_MINUS_1 << b0) & self[B0_BITMAP_KEY];\\n                if (b0Bitmap == 0) return 0;\\n                b0 = b0Bitmap.leastSignificantBit();\\n                b1Bitmap = self[~b0];\\n            }\\n            b0b1 = (b0 << 8) | b1Bitmap.leastSignificantBit();\\n            b2Bitmap = self[b0b1];\\n        }\\n        b2 = b2Bitmap.leastSignificantBit();\\n        return uint24((b0b1 << 8) | b2);\\n    }\\n}\\n\",\"keccak256\":\"0x6ea1043f87eb5c4b811d3522f9b862e4d43b46d5e24114a94dcfe6c17c333d8b\",\"license\":\"-\"},\"contracts/libraries/TotalClaimableMap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@clober/library/contracts/DirtyUint64.sol\\\";\\nimport \\\"@clober/library/contracts/PackedUint256.sol\\\";\\n\\nimport \\\"./Tick.sol\\\";\\n\\nlibrary TotalClaimableMap {\\n    using DirtyUint64 for uint64;\\n    using PackedUint256 for uint256;\\n\\n    // @dev n should be less than type(uint64).max due to the dirty storage logic.\\n    function add(mapping(uint24 => uint256) storage self, Tick tick, uint64 n) internal {\\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\\n        uint256 group = self[groupIndex];\\n        // @notice Be aware of dirty storage add logic\\n        self[groupIndex] = group.update64Unsafe(\\n            elementIndex, // elementIndex < 4\\n            group.get64Unsafe(elementIndex).addClean(n)\\n        );\\n    }\\n\\n    function sub(mapping(uint24 => uint256) storage self, Tick tick, uint64 n) internal {\\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\\n        self[groupIndex] = self[groupIndex].sub64Unsafe(elementIndex, n);\\n    }\\n\\n    function get(mapping(uint24 => uint256) storage self, Tick tick) internal view returns (uint64) {\\n        (uint24 groupIndex, uint8 elementIndex) = _splitTick(tick);\\n        return self[groupIndex].get64Unsafe(elementIndex).toClean();\\n    }\\n\\n    function _splitTick(Tick tick) internal pure returns (uint24 groupIndex, uint8 elementIndex) {\\n        uint256 casted = uint24(Tick.unwrap(tick));\\n        assembly {\\n            groupIndex := shr(2, casted) // div 4\\n            elementIndex := and(casted, 3) // mod 4\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b9586f295c3d92d0617f6629b940c5a8c35f7da368eb614e7e75f3e525863d8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6118d861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c8063ab8a7e3f1161005a578063ab8a7e3f14610113578063c49d262114610135578063ffa0afb51461015557600080fd5b80633ac502c11461008157806359d84f5b146100c7578063a151a7e1146100f3575b600080fd5b81801561008d57600080fd5b506100a161009c36600461153a565b61018b565b6040805167ffffffffffffffff9384168152929091166020830152015b60405180910390f35b6100da6100d536600461158a565b61034a565b60405167ffffffffffffffff90911681526020016100be565b8180156100ff57600080fd5b506100da61010e3660046115c9565b61042a565b81801561011f57600080fd5b5061013361012e3660046115fe565b610492565b005b81801561014157600080fd5b506100da61015036600461158a565b6104ee565b81801561016157600080fd5b5061017561017036600461164b565b610555565b60405164ffffffffff90911681526020016100be565b602882901c600281900b600090815260038501602052604081206004810180549293849390928792909185919064ffffffffff85169081106101cf576101cf61169c565b6000918252602082200154600160a01b900467ffffffffffffffff1691506101f88a868661034a565b905061020481896116c8565b95508567ffffffffffffffff168267ffffffffffffffff161015610267576040517fc332559a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8284031660048201526024015b60405180910390fd5b600285900b600090815260038b016020526040902086830397506102b590617fff861690899061029790836107b7565b600289900b600090815260038f016020526040902092919003610818565b5085836004018564ffffffffff16815481106102d3576102d361169c565b9060005260206000200160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506103108a86610a74565b67ffffffffffffffff1660000361033d5761033d6103338660020b628000000190565b60048c0190610ab1565b5050505050935093915050565b600080610358858585610b59565b602090810151600286900b600090815260038801909252604090912060048101549192509064ffffffffff851661800001101561039757509050610423565b60006103a66005880187610bae565b905060006103bb838764ffffffffff16610bea565b90508167ffffffffffffffff1684820367ffffffffffffffff16106103e7576000945050505050610423565b8167ffffffffffffffff168167ffffffffffffffff161161040e5783945050505050610423565b8381038203945050505050610423565b505050505b9392505050565b6000806104378585610a74565b90508267ffffffffffffffff168167ffffffffffffffff16111561045d5782915061047c565b80915061047c6104728560020b628000000190565b6004870190610ab1565b61048a600586018584610c3e565b509392505050565b8154600160a01b900467ffffffffffffffff16156104dc576040517fc15ba32200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80826104e88282611705565b50505050565b6000806104fc858585610cb4565b905061050985858561034a565b815467ffffffffffffffff600160a01b8083048216849003909116027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff90911617909155949350505050565b60008267ffffffffffffffff1660000361059b576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105ac8560020b628000000190565b600881901c6000908152600488016020526040902054909150600160ff83161b908116146105e1576105e16004870182610cf8565b600285900b60009081526003870160205260409020600481015461060490610ddb565b925061800064ffffffffff84161061071c576000618000840390506000826004018264ffffffffff168154811061063d5761063d61169c565b600091825260209091200154600160a01b900467ffffffffffffffff16905080156106c057600061066f8a8a8561034a565b90508167ffffffffffffffff168167ffffffffffffffff16146106be576040517ff2f9ac9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b50600090506106d382617fff86166107b7565b905067ffffffffffffffff81161561071a57623fffff600288901c1660009081526005890160205260409020805467ffffffffffffffff831660c060068b901b161b900390555b505b61072b81617fff851687610818565b50604080518082019091526001600160a01b03948516815267ffffffffffffffff958616602080830191825260049093018054600181018255600091825293902091519190920180549251909616600160a01b027fffffffff00000000000000000000000000000000000000000000000000000000909216941693909317929092179092555092915050565b600061800082106107de5760405163163da48960e01b81526000600482015260240161025e565b6104236108066003848116908690600287901c60009081529101602052604090205490610e2a565b67ffffffffffffffff16801515900390565b6000618000831061083f5760405163163da48960e01b81526000600482015260240161025e565b600061084a84610e59565b9050600081600160040360ff16815181106108675761086761169c565b602090810291909101810151808201518151600090815260038a0190935260409092205490925061089b9160061b1c610806565b92508367ffffffffffffffff168367ffffffffffffffff16106109785783830360005b60048110156109715760008482815181106108db576108db61169c565b6020026020010151905060008960000183600481106108fc576108fc61169c565b83516000908152910160209081526040909120549083015190915061094190610939866109298584610e2a565b67ffffffffffffffff1690610f02565b839190610f4f565b8a84600481106109535761095361169c565b935160009081529301602052604090922091909155506001016108be565b5050610a6b565b82840367ffffffffffffffff8181031661099188610f97565b67ffffffffffffffff1611156109bd5760405163163da48960e01b81526001600482015260240161025e565b60005b600481101561041e5760008482815181106109dd576109dd61169c565b6020026020010151905060008960000183600481106109fe576109fe61169c565b835160009081529101602090815260409091205490830151909150610a3b9061093986610a2b8584610e2a565b67ffffffffffffffff1690610fd8565b8a8460048110610a4d57610a4d61169c565b935160009081529301602052604090922091909155506001016109c0565b50509392505050565b6000610a836005840183610bae565b600283900b60009081526003850160205260409020610aa190610f97565b610423919061186e565b92915050565b600881901c60008181526020849052604090208054600160ff851690811b801983169093559190818103610b5157600884901c1960008181526020889052604090208054600160ff88161b80198216909255909350808403610b4e577f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b95460009081526020899052604090208054600184191b801990911690915593505b50505b505050505050565b6040805180820190915260008082526020820152610b78848484610cb4565b6040805180820190915290546001600160a01b0381168252600160a01b900467ffffffffffffffff166020820152949350505050565b623fffff600282901c166000818152602084905260408120549091906003841690610be19060c0600687901b161c610806565b95945050505050565b6004820154600090617fff908116908290610c0685600161188f565b169050808210610c3357610c1b858284611021565b610c2486610f97565b610c2e919061186e565b610be1565b610be1858383611021565b623fffff600283901c166000818152602085905260409020546003841690610c9382610c748660c060068a901b1685901c610a2b565b67ffffffffffffffff90811660069290921b91821b911b831683030190565b62ffffff909316600090815260209690965250506040909320929092555050565b600282900b60009081526003840160205260408120600401805464ffffffffff8416908110610ce557610ce561169c565b9060005260206000200190509392505050565b600881901c60008181526020849052604090205460ff8316906001821b9081811615610d50576040517feb73dbfd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020879052604081208284179055819003610b5157600884901c1960008181526020889052604081208054600160ff89161b81811790925590945090819003610b4e577f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b95460009081526020899052604090208054600184191b1790555050505050505050565b600064ffffffffff821115610e26576040517f6dfcc650000000000000000000000000000000000000000000000000000000008152602860048201526024810183905260440161025e565b5090565b60006003821115610e515760405163b8710e2160e01b81526003600482015260240161025e565b5060061b1c90565b60408051600480825260a0820190925260609160009190816020015b6040805180820190915260008082526020820152815260200190600190039081610e75579050509050600e60005b6004811015610ef95760405180604001604052808387901c815260200160036002850388901c16815250838281518110610edf57610edf61169c565b602090810291909101015260031990910190600101610ea3565b50909392505050565b81159091019080820367ffffffffffffffff8082169084161080610f2e575067ffffffffffffffff8116155b15610aab57604051633e6c0de960e11b81526001600482015260240161025e565b60006003831115610f765760405163b8710e2160e01b81526003600482015260240161025e565b5067ffffffffffffffff90811660069290921b91821b911b82169091030190565b6001600090815260208290526040812054610fb4908260046114e0565b600080805260208490526040812054610fce9160046114e0565b610aab91906116c8565b600081831584010192508167ffffffffffffffff168367ffffffffffffffff16101561101a57604051633e6c0de960e11b81526000600482015260240161025e565b5090919050565b600081830361103257506000610423565b8183106110555760405163163da48960e01b81526000600482015260240161025e565b61800082111561107b5760405163163da48960e01b81526000600482015260240161025e565b600061108684610e59565b9050600061109384610e59565b9050600080808060035b60008782815181106110b1576110b161169c565b6020026020010151905060008783815181106110cf576110cf61169c565b60200260200101519050816020015185019450806020015184019350816000015181600001510361113c576111278d846004811061110f5761110f61169c565b845160009081529101602052604090205486866114e0565b67ffffffffffffffff168701965050506114d1565b8151815160049190031015611221576111798d84600481106111605761116061169c565b84516000908152910160205260409020548660046114e0565b67ffffffffffffffff1696909601956111b58d846004811061119d5761119d61169c565b835160009081529101602052604081205490866114e0565b825167ffffffffffffffff9190911697909701966001015b8151811015611219576112028e85600481106111eb576111eb61169c565b6000848152910160205260408120549060046114e0565b67ffffffffffffffff1697909701966001016111cd565b5050506114d1565b81516003166000036112715761125a8d84600481106112425761124261169c565b845160009081529101602052604081205490876114e0565b67ffffffffffffffff168601955060009450611373565b81516003166001036112d3576112af8d84600481106112925761129261169c565b8451600019016000908152910160205260408120549060046114e0565b67ffffffffffffffff16959095019461125a8d84600481106112425761124261169c565b815160031660020361134b576112f48d84600481106111605761116061169c565b67ffffffffffffffff1696909601956113348d84600481106113185761131861169c565b84516001016000908152910160205260408120549060046114e0565b67ffffffffffffffff168701965060019450611373565b6113608d84600481106111605761116061169c565b67ffffffffffffffff1687019650600194505b80516003166000036113ab576113948d846004811061119d5761119d61169c565b67ffffffffffffffff1687019650600093506114c6565b805160031660010361140d576113e98d84600481106113cc576113cc61169c565b8351600019016000908152910160205260408120549060046114e0565b67ffffffffffffffff1696909601956113948d846004811061119d5761119d61169c565b805160031660020361149e576114478d846004811061142e5761142e61169c565b83516000908152910160205260409020548560046114e0565b67ffffffffffffffff1695909501946114878d846004811061146b5761146b61169c565b83516001016000908152910160205260408120549060046114e0565b67ffffffffffffffff1686019550600193506114c6565b6114b38d846004811061142e5761142e61169c565b67ffffffffffffffff1686019550600193505b50506000190161109d565b50505090039695505050505050565b600682901b9290921c916000825b8281101561151657604085901c9467ffffffffffffffff1680150191909101906001016114ee565b509190039003919050565b67ffffffffffffffff8116811461153757600080fd5b50565b60008060006060848603121561154f57600080fd5b8335925060208401359150604084013561156881611521565b809150509250925092565b8035600281900b811461158557600080fd5b919050565b60008060006060848603121561159f57600080fd5b833592506115af60208501611573565b9150604084013564ffffffffff8116811461156857600080fd5b6000806000606084860312156115de57600080fd5b833592506115ee60208501611573565b9150604084013561156881611521565b60008082840360e081121561161257600080fd5b8335925060c0601f198201121561162857600080fd5b506020830190509250929050565b6001600160a01b038116811461153757600080fd5b6000806000806080858703121561166157600080fd5b8435935061167160208601611573565b9250604085013561168181611521565b9150606085013561169181611636565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8181168382160190808211156116e9576116e96116b2565b5092915050565b6000813562ffffff81168114610aab57600080fd5b813561171081611636565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03821617825550602082013561174581611521565b81547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff0000000000000000000000000000000000000000161781556001810160408301356117a281611636565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038216178255506118206117d8606085016116f0565b82547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b76ffffff000000000000000000000000000000000000000016178255565b5060028101608083013561183381611636565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038216178255506118696117d860a085016116f0565b505050565b67ffffffffffffffff8281168282160390808211156116e9576116e96116b2565b80820180821115610aab57610aab6116b256fea26469706673582212201a9fa958371fd2722c6c72c72b9ef86a9573ccec35d1c9322154e330651918ec64736f6c63430008180033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c8063ab8a7e3f1161005a578063ab8a7e3f14610113578063c49d262114610135578063ffa0afb51461015557600080fd5b80633ac502c11461008157806359d84f5b146100c7578063a151a7e1146100f3575b600080fd5b81801561008d57600080fd5b506100a161009c36600461153a565b61018b565b6040805167ffffffffffffffff9384168152929091166020830152015b60405180910390f35b6100da6100d536600461158a565b61034a565b60405167ffffffffffffffff90911681526020016100be565b8180156100ff57600080fd5b506100da61010e3660046115c9565b61042a565b81801561011f57600080fd5b5061013361012e3660046115fe565b610492565b005b81801561014157600080fd5b506100da61015036600461158a565b6104ee565b81801561016157600080fd5b5061017561017036600461164b565b610555565b60405164ffffffffff90911681526020016100be565b602882901c600281900b600090815260038501602052604081206004810180549293849390928792909185919064ffffffffff85169081106101cf576101cf61169c565b6000918252602082200154600160a01b900467ffffffffffffffff1691506101f88a868661034a565b905061020481896116c8565b95508567ffffffffffffffff168267ffffffffffffffff161015610267576040517fc332559a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8284031660048201526024015b60405180910390fd5b600285900b600090815260038b016020526040902086830397506102b590617fff861690899061029790836107b7565b600289900b600090815260038f016020526040902092919003610818565b5085836004018564ffffffffff16815481106102d3576102d361169c565b9060005260206000200160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506103108a86610a74565b67ffffffffffffffff1660000361033d5761033d6103338660020b628000000190565b60048c0190610ab1565b5050505050935093915050565b600080610358858585610b59565b602090810151600286900b600090815260038801909252604090912060048101549192509064ffffffffff851661800001101561039757509050610423565b60006103a66005880187610bae565b905060006103bb838764ffffffffff16610bea565b90508167ffffffffffffffff1684820367ffffffffffffffff16106103e7576000945050505050610423565b8167ffffffffffffffff168167ffffffffffffffff161161040e5783945050505050610423565b8381038203945050505050610423565b505050505b9392505050565b6000806104378585610a74565b90508267ffffffffffffffff168167ffffffffffffffff16111561045d5782915061047c565b80915061047c6104728560020b628000000190565b6004870190610ab1565b61048a600586018584610c3e565b509392505050565b8154600160a01b900467ffffffffffffffff16156104dc576040517fc15ba32200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80826104e88282611705565b50505050565b6000806104fc858585610cb4565b905061050985858561034a565b815467ffffffffffffffff600160a01b8083048216849003909116027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff90911617909155949350505050565b60008267ffffffffffffffff1660000361059b576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105ac8560020b628000000190565b600881901c6000908152600488016020526040902054909150600160ff83161b908116146105e1576105e16004870182610cf8565b600285900b60009081526003870160205260409020600481015461060490610ddb565b925061800064ffffffffff84161061071c576000618000840390506000826004018264ffffffffff168154811061063d5761063d61169c565b600091825260209091200154600160a01b900467ffffffffffffffff16905080156106c057600061066f8a8a8561034a565b90508167ffffffffffffffff168167ffffffffffffffff16146106be576040517ff2f9ac9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b50600090506106d382617fff86166107b7565b905067ffffffffffffffff81161561071a57623fffff600288901c1660009081526005890160205260409020805467ffffffffffffffff831660c060068b901b161b900390555b505b61072b81617fff851687610818565b50604080518082019091526001600160a01b03948516815267ffffffffffffffff958616602080830191825260049093018054600181018255600091825293902091519190920180549251909616600160a01b027fffffffff00000000000000000000000000000000000000000000000000000000909216941693909317929092179092555092915050565b600061800082106107de5760405163163da48960e01b81526000600482015260240161025e565b6104236108066003848116908690600287901c60009081529101602052604090205490610e2a565b67ffffffffffffffff16801515900390565b6000618000831061083f5760405163163da48960e01b81526000600482015260240161025e565b600061084a84610e59565b9050600081600160040360ff16815181106108675761086761169c565b602090810291909101810151808201518151600090815260038a0190935260409092205490925061089b9160061b1c610806565b92508367ffffffffffffffff168367ffffffffffffffff16106109785783830360005b60048110156109715760008482815181106108db576108db61169c565b6020026020010151905060008960000183600481106108fc576108fc61169c565b83516000908152910160209081526040909120549083015190915061094190610939866109298584610e2a565b67ffffffffffffffff1690610f02565b839190610f4f565b8a84600481106109535761095361169c565b935160009081529301602052604090922091909155506001016108be565b5050610a6b565b82840367ffffffffffffffff8181031661099188610f97565b67ffffffffffffffff1611156109bd5760405163163da48960e01b81526001600482015260240161025e565b60005b600481101561041e5760008482815181106109dd576109dd61169c565b6020026020010151905060008960000183600481106109fe576109fe61169c565b835160009081529101602090815260409091205490830151909150610a3b9061093986610a2b8584610e2a565b67ffffffffffffffff1690610fd8565b8a8460048110610a4d57610a4d61169c565b935160009081529301602052604090922091909155506001016109c0565b50509392505050565b6000610a836005840183610bae565b600283900b60009081526003850160205260409020610aa190610f97565b610423919061186e565b92915050565b600881901c60008181526020849052604090208054600160ff851690811b801983169093559190818103610b5157600884901c1960008181526020889052604090208054600160ff88161b80198216909255909350808403610b4e577f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b95460009081526020899052604090208054600184191b801990911690915593505b50505b505050505050565b6040805180820190915260008082526020820152610b78848484610cb4565b6040805180820190915290546001600160a01b0381168252600160a01b900467ffffffffffffffff166020820152949350505050565b623fffff600282901c166000818152602084905260408120549091906003841690610be19060c0600687901b161c610806565b95945050505050565b6004820154600090617fff908116908290610c0685600161188f565b169050808210610c3357610c1b858284611021565b610c2486610f97565b610c2e919061186e565b610be1565b610be1858383611021565b623fffff600283901c166000818152602085905260409020546003841690610c9382610c748660c060068a901b1685901c610a2b565b67ffffffffffffffff90811660069290921b91821b911b831683030190565b62ffffff909316600090815260209690965250506040909320929092555050565b600282900b60009081526003840160205260408120600401805464ffffffffff8416908110610ce557610ce561169c565b9060005260206000200190509392505050565b600881901c60008181526020849052604090205460ff8316906001821b9081811615610d50576040517feb73dbfd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020879052604081208284179055819003610b5157600884901c1960008181526020889052604081208054600160ff89161b81811790925590945090819003610b4e577f7710c0702d438d37259561c892984b894ff622adfa3d98b5dfe5a9763f94b95460009081526020899052604090208054600184191b1790555050505050505050565b600064ffffffffff821115610e26576040517f6dfcc650000000000000000000000000000000000000000000000000000000008152602860048201526024810183905260440161025e565b5090565b60006003821115610e515760405163b8710e2160e01b81526003600482015260240161025e565b5060061b1c90565b60408051600480825260a0820190925260609160009190816020015b6040805180820190915260008082526020820152815260200190600190039081610e75579050509050600e60005b6004811015610ef95760405180604001604052808387901c815260200160036002850388901c16815250838281518110610edf57610edf61169c565b602090810291909101015260031990910190600101610ea3565b50909392505050565b81159091019080820367ffffffffffffffff8082169084161080610f2e575067ffffffffffffffff8116155b15610aab57604051633e6c0de960e11b81526001600482015260240161025e565b60006003831115610f765760405163b8710e2160e01b81526003600482015260240161025e565b5067ffffffffffffffff90811660069290921b91821b911b82169091030190565b6001600090815260208290526040812054610fb4908260046114e0565b600080805260208490526040812054610fce9160046114e0565b610aab91906116c8565b600081831584010192508167ffffffffffffffff168367ffffffffffffffff16101561101a57604051633e6c0de960e11b81526000600482015260240161025e565b5090919050565b600081830361103257506000610423565b8183106110555760405163163da48960e01b81526000600482015260240161025e565b61800082111561107b5760405163163da48960e01b81526000600482015260240161025e565b600061108684610e59565b9050600061109384610e59565b9050600080808060035b60008782815181106110b1576110b161169c565b6020026020010151905060008783815181106110cf576110cf61169c565b60200260200101519050816020015185019450806020015184019350816000015181600001510361113c576111278d846004811061110f5761110f61169c565b845160009081529101602052604090205486866114e0565b67ffffffffffffffff168701965050506114d1565b8151815160049190031015611221576111798d84600481106111605761116061169c565b84516000908152910160205260409020548660046114e0565b67ffffffffffffffff1696909601956111b58d846004811061119d5761119d61169c565b835160009081529101602052604081205490866114e0565b825167ffffffffffffffff9190911697909701966001015b8151811015611219576112028e85600481106111eb576111eb61169c565b6000848152910160205260408120549060046114e0565b67ffffffffffffffff1697909701966001016111cd565b5050506114d1565b81516003166000036112715761125a8d84600481106112425761124261169c565b845160009081529101602052604081205490876114e0565b67ffffffffffffffff168601955060009450611373565b81516003166001036112d3576112af8d84600481106112925761129261169c565b8451600019016000908152910160205260408120549060046114e0565b67ffffffffffffffff16959095019461125a8d84600481106112425761124261169c565b815160031660020361134b576112f48d84600481106111605761116061169c565b67ffffffffffffffff1696909601956113348d84600481106113185761131861169c565b84516001016000908152910160205260408120549060046114e0565b67ffffffffffffffff168701965060019450611373565b6113608d84600481106111605761116061169c565b67ffffffffffffffff1687019650600194505b80516003166000036113ab576113948d846004811061119d5761119d61169c565b67ffffffffffffffff1687019650600093506114c6565b805160031660010361140d576113e98d84600481106113cc576113cc61169c565b8351600019016000908152910160205260408120549060046114e0565b67ffffffffffffffff1696909601956113948d846004811061119d5761119d61169c565b805160031660020361149e576114478d846004811061142e5761142e61169c565b83516000908152910160205260409020548560046114e0565b67ffffffffffffffff1695909501946114878d846004811061146b5761146b61169c565b83516001016000908152910160205260408120549060046114e0565b67ffffffffffffffff1686019550600193506114c6565b6114b38d846004811061142e5761142e61169c565b67ffffffffffffffff1686019550600193505b50506000190161109d565b50505090039695505050505050565b600682901b9290921c916000825b8281101561151657604085901c9467ffffffffffffffff1680150191909101906001016114ee565b509190039003919050565b67ffffffffffffffff8116811461153757600080fd5b50565b60008060006060848603121561154f57600080fd5b8335925060208401359150604084013561156881611521565b809150509250925092565b8035600281900b811461158557600080fd5b919050565b60008060006060848603121561159f57600080fd5b833592506115af60208501611573565b9150604084013564ffffffffff8116811461156857600080fd5b6000806000606084860312156115de57600080fd5b833592506115ee60208501611573565b9150604084013561156881611521565b60008082840360e081121561161257600080fd5b8335925060c0601f198201121561162857600080fd5b506020830190509250929050565b6001600160a01b038116811461153757600080fd5b6000806000806080858703121561166157600080fd5b8435935061167160208601611573565b9250604085013561168181611521565b9150606085013561169181611636565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8181168382160190808211156116e9576116e96116b2565b5092915050565b6000813562ffffff81168114610aab57600080fd5b813561171081611636565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03821617825550602082013561174581611521565b81547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff0000000000000000000000000000000000000000161781556001810160408301356117a281611636565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038216178255506118206117d8606085016116f0565b82547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b76ffffff000000000000000000000000000000000000000016178255565b5060028101608083013561183381611636565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038216178255506118696117d860a085016116f0565b505050565b67ffffffffffffffff8281168282160390808211156116e9576116e96116b2565b80820180821115610aab57610aab6116b256fea26469706673582212201a9fa958371fd2722c6c72c72b9ef86a9573ccec35d1c9322154e330651918ec64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "take(Book.State storage,int24,uint64)": {
        "params": {
          "maxTakeAmount": "The maximum amount to take",
          "self": "The book state"
        },
        "returns": {
          "takenAmount": "The actual amount to take"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "take(Book.State storage,int24,uint64)": {
        "notice": "Take orders from the book"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}